{"version":3,"sources":["../../src/functions/Query.js"],"names":["module","exports","getStatisticsByPublish","publishId","stat","submits","answers","answerOptionGraphData","Submit","find","publish","err","i","length","Answer","_id","$in","answer","options","j","Question","findOne","question","type","Graph","answerOption","getStatisticsByUser","userId","userStudentProjects","userCards","userLangs","userFeaturedLangs","userProjects","userSubjects","userCourses","studentProjects","cards","langs","featuredLangs","projects","subjects","courses","featuredCount","likeCount","langCharCount","langCharFreq","cardDateGraphData","cardMonthGraphData","studentProjectsId","StudentProject","getByUser","data","cardsId","Card","getByStudentProjects","langsId","Lang","getByCards","featuredLangsId","projectsId","Project","subjectsId","Subject","getByProjects","coursesId","Course","getBySubjects","grade","langCharStat","mostlyUsedCharInLangs","cardDate","cardMonth","getStatisticsByCourse","courseId","course","courseStudents","courseProjects","courseStudentProjects","courseCards","courseLangs","profiles","cardStudentGraphData","findById","profilesId","Profile","getStudentsByCoursesId","featured","cardStudent","teacher","getStatisticsBySchool","schoolId","schoolTeachers","schoolStudents","schoolCourses","schoolSubjects","schoolProjects","schoolCards","schoolLangs","loginDateGraphData","School","school","getBySchool","getByCourses","getTeachersBySchool","Log","getMultipleByProfiles","loginDate","skipChar","txt","text","key","indexOf","sortNumuriObject","objectToSort","sortable","item","push","sort","a","b","objectToReturn"],"mappings":"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","file":"Query.js","sourcesContent":["import to from '../to';\r\n\r\nimport Profile from '../models/Profile';\r\nimport User from '../models/User';\r\nimport School from '../models/School';\r\nimport Course from '../models/Course';\r\nimport Subject from '../models/Subject';\r\nimport Project from '../models/Project';\r\nimport StudentProject from '../models/StudentProject';\r\nimport Card from '../models/Card';\r\nimport Lang from '../models/Lang';\r\nimport Log from '../models/Log';\r\n\r\nimport Publish from '../models/survey/Publish';\r\nimport Submit from '../models/survey/Submit';\r\nimport Question from '../models/survey/Question';\r\nimport Answer from '../models/survey/Answer';\r\n\r\nimport Graph from './Graph';\r\n\r\nmodule.exports.getStatisticsByPublish = async (publishId)=>{\r\n  var err, answer, question;\r\n  var stat= {\r\n    submits: [],\r\n    answers: [],\r\n\r\n    answerOptionGraphData: {}\r\n  }\r\n\r\n  var submits = [];\r\n  [err, submits] = await to(Submit.find({ publish: publishId }));\r\n  stat['submits'] = submits;\r\n\r\n  var answers = [];\r\n  for(var i=0;i<submits.length;i++){\r\n    [err, answer] = await to(Answer.find({ _id: { $in: submits[i].answers }}));\r\n    answers = [...answers, ...answer];\r\n  }\r\n  stat['answers'] = answers;\r\n\r\n  var options = {};\r\n  for(var j=0;j<answers.length;j++){\r\n    [err, question] = await to(Question.findOne({ _id: answers[j].question }));\r\n    if(!options[question._id] && question.type === 'option'){ options[question._id] = question.options }\r\n  }\r\n\r\n  stat['answerOptionGraphData'] = Graph.answerOption(stat['answers'], options);\r\n\r\n  return [err, stat];\r\n}\r\n\r\nmodule.exports.getStatisticsByUser = async (userId)=>{\r\n  var err, data;\r\n  var stat= {\r\n    userStudentProjects: [],\r\n    userCards: [],\r\n    userLangs: [],\r\n    userFeaturedLangs: [],\r\n    userProjects: [],\r\n    userSubjects: [],\r\n    userCourses: [],\r\n\r\n    studentProjects: [],\r\n    cards: [],\r\n    langs: [],\r\n    featuredLangs: [],\r\n    projects: [],\r\n    subjects: [],\r\n    courses: [],\r\n\r\n    featuredCount: 0,\r\n    likeCount: 0,\r\n    langCharCount: 0,\r\n    langCharFreq: {},\r\n\r\n    cardDateGraphData: [],\r\n    cardMonthGraphData: []\r\n  };\r\n\r\n  var studentProjectsId = [];\r\n  [err, data, studentProjectsId] = await StudentProject.getByUser(userId);\r\n\r\n  stat['userStudentProjects'] = studentProjectsId;\r\n  stat['studentProjects'] = data;\r\n\r\n  var cardsId = [];\r\n  [err, data, cardsId] = await Card.getByStudentProjects(stat['studentProjects']);\r\n\r\n  stat['userCards'] = cardsId;\r\n  stat['cards'] = data;\r\n\r\n  var langsId = [];\r\n  [err, data, langsId] = await Lang.getByCards(stat['cards']);\r\n\r\n  stat['userLangs'] = langsId;\r\n  stat['langs'] = data;\r\n\r\n  var featuredLangsId = [];\r\n  [err, data, featuredLangsId] = await Lang.getByCards(stat['cards'], true);\r\n\r\n  stat['userFeaturedLangs'] = featuredLangsId;\r\n  stat['featuredLangs'] = data;\r\n\r\n  var projectsId = [];\r\n  [err, data, projectsId] = await Project.getByStudentProjects(stat['studentProjects']);\r\n\r\n  stat['userProjects'] = projectsId;\r\n  stat['projects'] = data;\r\n\r\n  var subjectsId = [];\r\n  [err, data, subjectsId] = await Subject.getByProjects(stat['projects']);\r\n\r\n  stat['userSubjects'] = subjectsId;\r\n  stat['subjects'] = data;\r\n\r\n  var coursesId = [];\r\n  [err, data, coursesId] = await Course.getBySubjects(stat['subjects']);\r\n\r\n  stat['userCourses'] = coursesId;\r\n  stat['courses'] = data;\r\n\r\n  for(var i=0;i<stat.cards.length;i++){\r\n    if(stat.cards[i].grade === 'featured'){\r\n      stat.featuredCount++;\r\n      if(stat.cards[i].likeCount){ stat.likeCount += stat.cards[i].likeCount; }\r\n    }\r\n  }\r\n\r\n  const langCharStat =  mostlyUsedCharInLangs(stat.langs);\r\n  stat['langCharFreq'] = langCharStat.langCharFreq;\r\n  stat['langCharCount'] = langCharStat.langCharCount;\r\n\r\n\r\n  stat['cardDateGraphData'] = Graph.cardDate(stat['cards']);\r\n  stat['cardMonthGraphData'] = Graph.cardMonth(stat['cards']);\r\n\r\n  //console.log(stat);\r\n  return [err, stat];\r\n}\r\n\r\nmodule.exports.getStatisticsByCourse = async (courseId)=>{\r\n  var err, data, course;\r\n  var stat= {\r\n    course: null,\r\n    courseStudents: [],\r\n    courseProjects: [],\r\n    courseStudentProjects: [],\r\n    courseCards: [],\r\n    courseLangs: [],\r\n\r\n    profiles: [],\r\n    subjects: [],\r\n    projects: [],\r\n    studentProjects: [],\r\n    cards: [],\r\n    langs: [],\r\n\r\n    featuredCount: 0,\r\n    cardDateGraphData: [],\r\n    cardMonthGraphData: [],\r\n    cardStudentGraphData: []\r\n  };\r\n\r\n  [err, course] = await to(Course.findById(courseId));\r\n  stat['course'] = course;\r\n\r\n  var profilesId = [];\r\n  [err, data, profilesId] = await Profile.getStudentsByCoursesId([courseId]);\r\n\r\n  stat['courseStudents'] = profilesId;\r\n  stat['profiles'] = [...stat['profiles'], ...data];\r\n\r\n  [err, data] = await to(Subject.find({ _id: { $in: course.subjects }}));\r\n  stat['subjects'] = data;\r\n\r\n  var projectsId = [];\r\n  [err , data, projectsId] = await Project.getBySubjects(data);\r\n\r\n  stat['courseProjects'] = projectsId;\r\n  stat['projects'] = data;\r\n\r\n  var studentProjectsId = [];\r\n  [err , data, studentProjectsId] = await StudentProject.getByProjects(data);\r\n\r\n  stat['courseStudentProjects'] = studentProjectsId;\r\n  stat['studentProjects'] = data;\r\n\r\n  var cardsId = [];\r\n  var featured = 0;\r\n  [err, data, cardsId, featured] = await Card.getByStudentProjects(stat['studentProjects']);\r\n\r\n  stat['courseCards'] = cardsId;\r\n  stat['cards'] = data;\r\n  stat['featuredCount'] = featured;\r\n\r\n  var langsId = [];\r\n  [err, data, langsId] = await Lang.getByCards(stat['cards']);\r\n\r\n  stat['courseLangs'] = langsId;\r\n  stat['langs'] = data;\r\n\r\n  stat['cardDateGraphData'] = Graph.cardDate(stat['cards']);\r\n  stat['cardMonthGraphData'] = Graph.cardMonth(stat['cards']);\r\n  stat['cardStudentGraphData'] = Graph.cardStudent(stat['cards'], course.teacher);\r\n\r\n\r\n  //console.log(stat);\r\n  return [err, stat];\r\n}\r\n\r\nmodule.exports.getStatisticsBySchool = async (schoolId)=>{\r\n  var err, data, school;\r\n  var stat= {\r\n    schoolTeachers: [],\r\n    schoolStudents: [],\r\n    schoolCourses: [],\r\n    schoolSubjects: [],\r\n    schoolProjects: [],\r\n    schoolCards: [],\r\n    schoolLangs: [],\r\n\r\n    profiles: [],\r\n    courses: [],\r\n    subjects: [],\r\n    projects: [],\r\n    cards: [],\r\n    langs: [],\r\n\r\n    featuredCount: 0,\r\n    cardDateGraphData: [],\r\n    cardMonthGraphData: [],\r\n    loginDateGraphData: []\r\n  };\r\n\r\n  [err, school] = await to(School.findById(schoolId));\r\n  var coursesId = [];\r\n  [err, data, coursesId] = await Course.getBySchool(school);\r\n\r\n  stat['schoolCourses'] = coursesId;\r\n  stat['courses'] = data;\r\n\r\n  var subjectsId = [];\r\n  [err, data, subjectsId] = await Subject.getByCourses(data, true);\r\n\r\n  stat['schoolSubjects'] = subjectsId;\r\n  stat['subjects'] = data;\r\n\r\n  var projectsId = [];\r\n  [err, data, projectsId] = await Project.getBySubjects(data);\r\n\r\n  stat['schoolProjects'] = projectsId;\r\n  stat['projects'] = data;\r\n\r\n  var cardsId = [];\r\n  var featuredCount = 0;\r\n  [err, data, cardsId, featuredCount] = await Card.getByProjects(data);\r\n\r\n  stat['schoolCards'] = cardsId;\r\n  stat['cards'] = data;\r\n  stat['featuredCount'] = featuredCount;\r\n\r\n  var langsId = [];\r\n  [err, data, langsId] = await Lang.getByCards(data);\r\n\r\n  stat['schoolLangs'] = langsId;\r\n  stat['langs'] = data;\r\n\r\n  var profilesId = [];\r\n  [err, data, profilesId] = await Profile.getTeachersBySchool(schoolId);\r\n\r\n  stat['schoolTeachers'] = profilesId;\r\n  stat['profiles'] = data;\r\n\r\n  [err, data, profilesId] = await Profile.getStudentsByCoursesId(stat.schoolCourses);\r\n\r\n  stat['schoolStudents'] = profilesId;\r\n  stat['profiles'] = [...stat.profiles, ...data];\r\n\r\n  stat['cardDateGraphData'] = Graph.cardDate(stat['cards']);\r\n  stat['cardMonthGraphData'] = Graph.cardMonth(stat['cards']);\r\n\r\n  [err, data] = await Log.getMultipleByProfiles(stat.profiles);\r\n\r\n  stat['loginDateGraphData'] = Graph.loginDate(data);\r\n\r\n  return [err, stat];\r\n}\r\n\r\nvar mostlyUsedCharInLangs = (langs) =>{\r\n  var stat = { langCharFreq: {}, langCharCount: 0 };\r\n  const skipChar = ['，', '。','1','2','3','4','5','6','7','8','9','0']\r\n  for(var i=0;i<langs.length;i++){\r\n    const txt = langs[i].text;\r\n    const key = langs[i].key;\r\n\r\n    stat.langCharCount += txt.length;\r\n    for(var j=0;j<txt.length;j++){\r\n      if(skipChar.indexOf(txt[j]) > -1){ continue; }\r\n      if(!stat.langCharFreq[key]){ stat.langCharFreq[key] = {}; }\r\n      if(!stat.langCharFreq[key][txt[j]]){ stat.langCharFreq[key][txt[j]] = 0; }\r\n      stat.langCharFreq[key][txt[j]]++;\r\n    }\r\n    stat.langCharFreq[key] = sortNumuriObject(stat.langCharFreq[key]);\r\n  }\r\n  //console.log(stat);\r\n  return stat;\r\n}\r\n\r\nvar sortNumuriObject = (objectToSort) =>{\r\n  var sortable = [];\r\n  for (var item in objectToSort){ sortable.push([item, objectToSort[item]]); }\r\n  sortable.sort((a, b)=> { return b[1] - a[1]; });\r\n\r\n  var objectToReturn = {};\r\n  for (var i = 0;i<sortable.length;i++){ objectToReturn[sortable[i][0]] = sortable[i][1] }\r\n\r\n  return objectToReturn;\r\n}\r\n"]}