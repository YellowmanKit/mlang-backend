{"version":3,"sources":["../../src/main/createApp.js"],"names":["temp","storage","CreateApp","appName","port","createApp","storageConfig","multer","diskStorage","destination","req","file","cb","filename","console","log","Date","now","originalname","upload","app","server","http","createServer","use","exposeHeaders","bodyParser","json","limit","urlencoded","extended","express","static","path","join","__dirname","set","AppRouter","UserRouter","ProfileRouter","CourseRouter","ProjectRouter","StudentProjectRouter","CardRouter","LangRouter","listen","address"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;AAEA,IAAMA,OAAO,eAAb;AACA,IAAMC,UAAU,kBAAhB;;IAEMC,S;AAEJ,qBAAYC,OAAZ,EAAoBC,IAApB,EAAyB;AAAA;;AACvB,SAAKC,SAAL,CAAeF,OAAf,EAAuBC,IAAvB;AACD;;;;8BAESD,O,EAAQC,I,EAAK;AACrB,UAAIE,gBAAgBC,iBAAOC,WAAP,CAAmB;AACrCC,qBAAa,qBAAUC,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACpCA,aAAG,IAAH,EAASZ,IAAT;AACD,SAHoC;AAIrCa,kBAAU,kBAAUH,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACjCE,kBAAQC,GAAR,CAAYJ,IAAZ;AACAC,aAAG,IAAH,EAASI,KAAKC,GAAL,KAAa,GAAb,GAAmBN,KAAKO,YAAjC;AACD;AAPoC,OAAnB,CAApB;;AAUA,UAAIC,SAAS,sBAAO,EAAElB,SAASK,aAAX,EAAP,CAAb;;AAEA,UAAMc,MAAM,wBAAZ;;AAEAA,UAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;AACAA,UAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAJ,UAAII,GAAJ,CAAQ,oBAAK,EAACC,eAAe,GAAhB,EAAL,CAAR;AACAL,UAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB,EAACC,OAAO,MAAR,EAAhB,CAAR;AACAR,UAAII,GAAJ,CAAQE,qBAAWG,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAR;AACAV,UAAII,GAAJ,CAAQO,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAoB,SAAShC,OAAT,GAAmB,GAAvC,CAAf,CAAR;;AAEAiB,UAAIgB,GAAJ,CAAQ,MAAR,EAAeD,SAAf;AACAf,UAAIgB,GAAJ,CAAQ,QAAR,EAAkB9B,aAAlB;AACAc,UAAIgB,GAAJ,CAAQ,QAAR,EAAiBjB,MAAjB;AACAC,UAAIgB,GAAJ,CAAQ,MAAR,EAAepC,IAAf;AACAoB,UAAIgB,GAAJ,CAAQ,SAAR,EAAkBnC,OAAlB;;AAEA,UAAIoC,aAAJ,CAAcjB,GAAd;AACA,UAAIkB,cAAJ,CAAelB,GAAf;AACA,UAAImB,iBAAJ,CAAkBnB,GAAlB;AACA,UAAIoB,gBAAJ,CAAiBpB,GAAjB;AACA,UAAIqB,iBAAJ,CAAkBrB,GAAlB;AACA,UAAIsB,wBAAJ,CAAyBtB,GAAzB;AACA,UAAIuB,cAAJ,CAAevB,GAAf;AACA,UAAIwB,cAAJ,CAAexB,GAAf;;AAEAA,UAAIC,MAAJ,CAAWwB,MAAX,CAAkBzC,IAAlB,EAAwB,YAAI;AAACU,gBAAQC,GAAR,CAAY,4BAA4BK,IAAIC,MAAJ,CAAWyB,OAAX,GAAqB1C,IAA7D;AAAoE,OAAjG;AACD;;;;;;kBAKYF,S","file":"createApp.js","sourcesContent":["import http from 'http';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport multer from 'multer';\r\nimport path from 'path';\r\n\r\nimport AppRouter from './routers/app.js';\r\nimport UserRouter from './routers/user.js';\r\nimport ProfileRouter from './routers/profile.js';\r\nimport CourseRouter from './routers/course.js';\r\nimport ProjectRouter from './routers/project.js';\r\nimport StudentProjectRouter from './routers/studentProject.js';\r\n\r\nimport CardRouter from './routers/card.js';\r\nimport LangRouter from './routers/lang.js';\r\n\r\nconst temp = 'C:/data/temp/';\r\nconst storage = 'C:/data/storage/';\r\n\r\nclass CreateApp {\r\n\r\n  constructor(appName,port){\r\n    this.createApp(appName,port);\r\n  }\r\n\r\n  createApp(appName,port){\r\n    var storageConfig = multer.diskStorage({\r\n      destination: function (req, file, cb) {\r\n        cb(null, temp);\r\n      },\r\n      filename: function (req, file, cb) {\r\n        console.log(file)\r\n        cb(null, Date.now() + '-' + file.originalname);\r\n      }\r\n    });\r\n\r\n    var upload = multer({ storage: storageConfig })\r\n\r\n    const app = express();\r\n\r\n    app.server = http.createServer(app);\r\n    app.use(morgan('dev'));\r\n    app.use(cors({exposeHeaders: \"*\"}));\r\n    app.use(bodyParser.json({limit: '50mb'}));\r\n    app.use(bodyParser.urlencoded({extended: false}));\r\n    app.use(express.static(path.join(__dirname,'././' + appName + '/')));\r\n\r\n    app.set('root',__dirname);\r\n    app.set('config', storageConfig);\r\n    app.set('upload',upload);\r\n    app.set('temp',temp);\r\n    app.set('storage',storage);\r\n\r\n    new AppRouter(app);\r\n    new UserRouter(app);\r\n    new ProfileRouter(app);\r\n    new CourseRouter(app);\r\n    new ProjectRouter(app);\r\n    new StudentProjectRouter(app);\r\n    new CardRouter(app);\r\n    new LangRouter(app);\r\n\r\n    app.server.listen(port, ()=>{console.log('App is running on port ' + app.server.address().port);});\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default CreateApp;\r\n"]}