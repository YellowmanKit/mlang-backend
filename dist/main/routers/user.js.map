{"version":3,"sources":["../../../src/main/routers/user.js"],"names":["ObjectId","require","Types","UserRouter","app","mlanghku","init","mongoose","connect","db","connection","post","req","res","next","userId","body","data","err","updatedUser","User","findOneAndUpdate","id","$set","type","new","console","log","json","result","profiles","admins","getProfilesByUsers","existedUser","findOne","pw","_id","toString","get","email","headers","resetPassword","code","codeType","acquireNewAccountByCode","user","acquireNewAccount","profile","appUser","getUserAndProfile","login","aquireNewAccountByAppAccount","attributes","schools","courses","subjects","projects","studentProjects","cards","langs","teacherProfiles","Course","getJoined","joinedCourses","Subject","getByCourses","joinedSubjects","Project","getBySubjects","joinedProjects","StudentProject","getByProjects","joinedStudentProjects","Card","getByStudentProjects","joinedCards","getTeaching","teachingCourses","teachingSubjects","teachingProjects","teachingStudentProjects","teachingCards","School","getByUser","supervisingSchools","getByType","adminUsers","Profile","profilesId","Lang","getByCards","langsId","Router"],"mappings":"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","file":"user.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\nimport to from '../../to';\r\n\r\nimport Query from '../../models/Query.js';\r\nimport User from '../../models/User.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport School from '../../models/School.js';\r\nimport Course from '../../models/Course.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nclass UserRouter extends Router {\r\n\r\n  constructor(app, mlanghku){\r\n    super(app);\r\n    this.app = app;\r\n    this.mlanghku = mlanghku;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const mlanghku = this.mlanghku;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/user/addAdmin', async(req, res, next)=>{\r\n      const userId = req.body.data.userId;\r\n      //console.log(userId);\r\n      let err, updatedUser;\r\n      [err, updatedUser] = await to(User.findOneAndUpdate({id: userId},{$set:{type:'admin'}},{new: true}))\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      let profiles = [];\r\n      let admins = [];\r\n      [err, profiles, admins] = await User.getProfilesByUsers([updatedUser]);\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedUser: updatedUser,\r\n        profiles: profiles,\r\n        admins: admins\r\n      });\r\n    });\r\n\r\n    app.post('/user/update', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      let err, existedUser;\r\n      [err, existedUser] = await to(User.findOne({id: data.id, pw: data.pw}));\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n      if(existedUser && existedUser._id.toString() !== data._id){ console.log('user id/pw already used'); return res.json({ result: 'failed'}) }\r\n\r\n      User.findOneAndUpdate({_id: data._id}, { $set: data }, {new: true}, (err, updatedUser)=>{\r\n        return res.json({\r\n          result: (err || !updatedUser)? 'failed':'success' ,\r\n          updatedUser: updatedUser\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n    app.get('/user/resetPassword/', async (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.resetPassword(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccountByCode/', (req, res, next)=>{\r\n      const code = req.headers.code;\r\n      const codeType = req.headers.type;\r\n\r\n      User.acquireNewAccountByCode(code, codeType, (result, user)=>{\r\n        console.log(result);\r\n        if(result === 'failed'){ return res.json({result: result})}\r\n        return res.json({ result: result, id: user.id, pw: user.pw });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccount/', (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.acquireNewAccount(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/login/', async (req, res, next)=>{\r\n      const id = req.headers.id;\r\n      const pw = req.headers.pw;\r\n\r\n      //console.log(id + ' ' + pw);\r\n\r\n      let err, data, user, profile, appUser;\r\n      [err, user, profile] = await User.getUserAndProfile(id, pw);\r\n      if(err){\r\n        [err, appUser] = await mlanghku.login(id, pw);\r\n        if(err){ console.log(err); return res.json({ result: \"failed\" }); }\r\n\r\n        [err, user, profile] = await User.aquireNewAccountByAppAccount(appUser.attributes, pw);\r\n      }\r\n      //console.log(user);\r\n      //console.log(profile);\r\n\r\n      profiles = [profile];\r\n\r\n      let profiles = [];\r\n      let schools = [];\r\n      let courses = [];\r\n      let subjects = [];\r\n      let projects = [];\r\n      let studentProjects = [];\r\n      let cards = [];\r\n      let langs = [];\r\n\r\n      let teacherProfiles;\r\n      [err, data, teacherProfiles] = await Course.getJoined(profile.joinedCourses);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      courses = [...courses, ...data];\r\n      profiles = [...profiles, ...teacherProfiles];\r\n\r\n      var joinedSubjects;\r\n      [err, data, joinedSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var joinedProjects;\r\n      [err, data, joinedProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var joinedStudentProjects;\r\n      [err, data, joinedStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var joinedCards;\r\n      [err, data, joinedCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      var teachingCourses;\r\n      [err, data, teachingCourses] = await Course.getTeaching(user._id);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      courses = [...courses, ...data];\r\n\r\n      var teachingSubjects;\r\n      [err, data, teachingSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var teachingProjects;\r\n      [err, data, teachingProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var teachingStudentProjects;\r\n      [err, data, teachingStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var teachingCards;\r\n      [err, data, teachingCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var supervisingSchools;\r\n      [err, data, supervisingSchools] = await School.getByUser(user._id, profile);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      schools = [...schools, ...data];\r\n\r\n      var adminUsers;\r\n      [err, data, adminUsers] = await User.getByType('admin');\r\n\r\n      var admins = [];\r\n\r\n      [err, data, admins] = await User.getProfilesByUsers(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var profilesId;\r\n      [err, data, profilesId] = await Profile.getByStudentProjects(studentProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n      var langsId;\r\n      [err, data, langsId] = await Lang.getByCards(cards);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      langs = [...langs, ...data];\r\n\r\n      return res.json({\r\n        result: \"success\",\r\n        user: user,\r\n        profile: profile,\r\n        profiles: profiles,\r\n\r\n        admins: admins,\r\n        supervisingSchools: supervisingSchools,\r\n\r\n        teachingCourses: teachingCourses,\r\n        joinedCourses: profile.joinedCourses,\r\n\r\n        teachingSubjects: teachingSubjects,\r\n        joinedSubjects: joinedSubjects,\r\n\r\n        teachingProjects: teachingProjects,\r\n        joinedProjects: joinedProjects,\r\n\r\n        teachingStudentProjects: teachingStudentProjects,\r\n        joinedStudentProjects: joinedStudentProjects,\r\n\r\n        teachingCards: teachingCards,\r\n        joinedCards: joinedCards,\r\n\r\n        schools: schools,\r\n        courses: courses,\r\n        subjects: subjects,\r\n        projects: projects,\r\n        studentProjects: studentProjects,\r\n        cards: cards,\r\n        langs: langs\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default UserRouter;\r\n"]}