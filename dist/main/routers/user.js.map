{"version":3,"sources":["../../../src/main/routers/user.js"],"names":["UserRouter","app","mlanghku","init","upload","get","temp","post","single","req","res","next","excel","Excel","Workbook","xlsx","readFile","file","originalname","then","workbook","eachSheet","sheet","id","eachRow","row","rowIndex","getCell","value","pw","codeType","code","User","acquireNewAccountByCode","err","user","console","log","json","result","findOne","existedUser","findOneAndUpdate","_id","$set","new","updatedUser","Profile","belongTo","updateProfile","userId","body","data","type","profiles","admins","getProfilesByUsers","toString","email","headers","resetPassword","acquireNewAccount","getUserAndProfile","profile","login","appUser","aquireNewAccountByAppAccount","attributes","Log","createLoginLog","schools","courses","subjects","projects","studentProjects","groups","cards","langs","questionnaires","questions","publishes","submits","answers","joinedSchools","length","joinedCourses","Course","teacher","School","joinSchool","getJoined","teacherProfiles","Subject","getByCourses","joinedSubjects","Project","getBySubjects","joinedProjects","StudentProject","getByProjects","joinedStudentProjects","Card","getByStudentProjects","joinedCards","Group","getByUserAndProjects","joinedGroups","getTeaching","teachingCourses","slice","reverse","teachingSubjects","teachingProjects","teachingStudentProjects","teachingCards","teachingGroups","getByUser","supervisingSchools","getByType","adminUsers","profilesId","Lang","getByCards","langsId","createdQuestionnaires","Questionnaire","getByAuthor","assignedPublishes","Publish","getAssigned","createdSubmits","Submit","getByUserAndPublishesId","Answer","getBySubmits","getByPublishes","Question","getByQuestionnaires","createdPublishes","Router"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;IAEMA,U;;;AAEJ,0BAAYC,GAAZ,EAAiBC,QAAjB,EAA0B;AAAA;;AAAA,gIAClBD,GADkB;;AAExB,kBAAKA,GAAL,GAAWA,GAAX;AACA,kBAAKC,QAAL,GAAgBA,QAAhB;AACA,kBAAKC,IAAL;AAJwB;AAKzB;;;;mCAEK;AAAA;;AACJ,sBAAMF,MAAM,KAAKA,GAAjB;AACA,sBAAMC,WAAW,KAAKA,QAAtB;;AAEA,sBAAME,SAASH,IAAII,GAAJ,CAAQ,QAAR,CAAf;AACA,sBAAMC,OAAOL,IAAII,GAAJ,CAAQ,MAAR,CAAb;;AAEAJ,sBAAIM,IAAJ,CAAS,aAAT,EAAwBH,OAAOI,MAAP,CAAc,MAAd,CAAxB;AAAA,2FAA8C,kBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtCC,2DAFsC,GAE9B,IAAIC,kBAAMC,QAAV,EAF8B;;;AAI5CF,4DAAMG,IAAN,CAAWC,QAAX,CAAoBV,OAAOG,IAAIQ,IAAJ,CAASC,YAApC,EAAkDC,IAAlD,CAAuD,oBAAY;AACjEC,qEAASC,SAAT,CAAmB,UAACC,KAAD,EAAQC,EAAR,EAAe;AAChCD,wEAAME,OAAN;AAAA,4IAAc,iBAAOC,GAAP,EAAYC,QAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4GACTA,YAAY,CADH;AAAA;AAAA;AAAA;;AAENH,wGAFM,GAEDE,IAAIE,OAAJ,CAAY,CAAZ,EAAeC,KAFd;AAGNC,wGAHM,GAGDJ,IAAIE,OAAJ,CAAY,CAAZ,EAAeC,KAHd;AAINE,8GAJM,GAIKL,IAAIE,OAAJ,CAAY,CAAZ,EAAeC,KAJpB;AAKNG,0GALM,GAKCN,IAAIE,OAAJ,CAAY,CAAZ,EAAeC,KALhB;;AAOV;AACA;AACA;AACA;;AAVU;AAAA,6GAeUI,eAAKC,uBAAL,CAA6BF,IAA7B,EAAmCD,QAAnC,CAfV;;AAAA;AAAA;AAAA;AAeTI,yGAfS;AAeJC,0GAfI;;AAAA,2GAgBPD,GAhBO;AAAA;AAAA;AAAA;;AAgBDE,8GAAQC,GAAR,CAAYH,GAAZ,EAhBC,iCAgBwBxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAhBxB;;AAAA;AAAA;AAAA,6GAqBiB,kBAAGP,eAAKQ,OAAL,CAAa,EAACjB,IAAIY,KAAKZ,EAAV,EAAb,CAAH,CArBjB;;AAAA;AAAA;AAAA;AAqBTW,yGArBS;AAqBJO,iHArBI;;AAAA,2GAuBPP,GAvBO;AAAA;AAAA;AAAA;;AAuBDE,8GAAQC,GAAR,CAAYH,GAAZ,EAvBC,iCAuBwBxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAvBxB;;AAAA;AAwBV;;AAEAP,qHAAKU,gBAAL,CAAsB,EAACC,KAAKR,KAAKQ,GAAX,EAAtB,EAAuC,EAAEC,MAAM,EAAC,MAAMrB,EAAP,EAAR,EAAvC,EAA6D,EAACsB,KAAK,IAAN,EAA7D,EAA0E,UAACX,GAAD,EAAMY,WAAN,EAAoB;AAC5F,gHAAGZ,GAAH,EAAO;AACLE,0HAAQC,GAAR,CAAY,oCAAZ;AACA,yHAAO3B,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,oBAAV,EAAT,CAAP;AACD;AACF,uGALD;;AAOAQ,wHAAQL,gBAAR,CAAyB,EAACM,UAAUb,KAAKQ,GAAhB,EAAzB,EAA+C,EAAEC,MAAM,EAAC,QAAQrB,EAAT,EAAa,QAAQ,mBAArB,EAAR,EAA/C,EAAmG,UAACW,GAAD,EAAMe,aAAN,EAAuB;AACxH,gHAAGf,GAAH,EAAO;AACLE,0HAAQC,GAAR,CAAY,uCAAZ;AACA,yHAAO3B,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,uBAAV,EAAT,CAAP;AACD;AACF,uGALD;;AAjCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEAAd;;AAAA;AAAA;AAAA;AAAA;AAyCD,6DA1CD;AA2CD,uDA5CD;;AAJ4C,wFAkDrC7B,IAAI4B,IAAJ,CAAS,EAACC,QAAQ,SAAT,EAAT,CAlDqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA9C;;AAAA;AAAA;AAAA;AAAA;;AAqDAtC,sBAAIM,IAAJ,CAAS,gBAAT;AAAA,4FAA2B,kBAAME,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnBuC,4DADmB,GACVzC,IAAI0C,IAAJ,CAASC,IAAT,CAAcF,MADJ;AAEzB;;AAFyB;AAAA,6DAIE,kBAAGlB,eAAKU,gBAAL,CAAsB,EAACnB,IAAI2B,MAAL,EAAtB,EAAmC,EAACN,MAAK,EAACS,MAAK,OAAN,EAAN,EAAnC,EAAyD,EAACR,KAAK,IAAN,EAAzD,CAAH,CAJF;;AAAA;AAAA;AAAA;AAIxBX,yDAJwB;AAInBY,iEAJmB;;AAAA,2DAKtBZ,GALsB;AAAA;AAAA;AAAA;;AAKhBE,8DAAQC,GAAR,CAAYH,GAAZ,EALgB,kCAKSxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CALT;;AAAA;AAOrBe,8DAPqB,GAOV,EAPU;AAQrBC,4DARqB,GAQZ,EARY;AAAA;AAAA,6DASOvB,eAAKwB,kBAAL,CAAwB,CAACV,WAAD,CAAxB,CATP;;AAAA;AAAA;AAAA;AASxBZ,yDATwB;AASnBoB,8DATmB;AASTC,4DATS;;AAAA,2DAUtBrB,GAVsB;AAAA;AAAA;AAAA;;AAUhBE,8DAAQC,GAAR,CAAYH,GAAZ,EAVgB,kCAUSxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAVT;;AAAA;AAAA,wFAYlB7B,IAAI4B,IAAJ,CAAS;AACdC,oEAAQ,SADM;AAEdO,yEAAaA,WAFC;AAGdQ,sEAAUA,QAHI;AAIdC,oEAAQA;AAJM,uDAAT,CAZkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA3B;;AAAA;AAAA;AAAA;AAAA;;AAoBAtD,sBAAIM,IAAJ,CAAS,cAAT;AAAA,6FAAyB,kBAAME,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjByC,0DADiB,GACV3C,IAAI0C,IAAJ,CAASC,IADC;AAAA;AAAA,6DAGI,kBAAGpB,eAAKQ,OAAL,CAAa,EAACjB,IAAI6B,KAAK7B,EAAV,EAAcM,IAAIuB,KAAKvB,EAAvB,EAAb,CAAH,CAHJ;;AAAA;AAAA;AAAA;AAGtBK,yDAHsB;AAGjBO,iEAHiB;;AAAA,2DAIpBP,GAJoB;AAAA;AAAA;AAAA;;AAIdE,8DAAQC,GAAR,CAAYH,GAAZ,EAJc,kCAIWxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAJX;;AAAA;AAAA,4DAKpBE,eAAeA,YAAYE,GAAZ,CAAgBc,QAAhB,OAA+BL,KAAKT,GAL/B;AAAA;AAAA;AAAA;;AAKqCP,8DAAQC,GAAR,CAAY,yBAAZ,EALrC,kCAKoF3B,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CALpF;;AAAA;;AAOvBP,qEAAKU,gBAAL,CAAsB,EAACC,KAAKS,KAAKT,GAAX,EAAtB,EAAuC,EAAEC,MAAMQ,IAAR,EAAvC,EAAuD,EAACP,KAAK,IAAN,EAAvD,EAAoE,UAACX,GAAD,EAAMY,WAAN,EAAoB;AACtF,mEAAOpC,IAAI4B,IAAJ,CAAS;AACdC,0EAASL,OAAO,CAACY,WAAT,GAAuB,QAAvB,GAAgC,SAD1B;AAEdA,+EAAaA;AAFC,6DAAT,CAAP;AAID,uDALD;;AAPuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAzB;;AAAA;AAAA;AAAA;AAAA;;AAgBA7C,sBAAII,GAAJ,CAAQ,sBAAR;AAAA,6FAAgC,kBAAOI,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACxB+C,2DADwB,GAChBjD,IAAIkD,OAAJ,CAAYD,KADI;;;AAG9B1B,qEAAK4B,aAAL,CAAmBF,KAAnB,EAA0B,kBAAQ;AAChC,mEAAOhD,IAAI4B,IAAJ,CAAS,EAAEC,QAAQA,MAAV,EAAT,CAAP;AACD,uDAFD;;AAH8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAhC;;AAAA;AAAA;AAAA;AAAA;;AAQAtC,sBAAII,GAAJ,CAAQ,4BAAR;AAAA,6FAAsC,kBAAOI,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC9BoB,0DAD8B,GACvBtB,IAAIkD,OAAJ,CAAY5B,IADW;AAE9BD,8DAF8B,GAEnBrB,IAAIkD,OAAJ,CAAYN,IAFO;AAAA;AAAA,6DAMhBrB,eAAKC,uBAAL,CAA6BF,IAA7B,EAAmCD,QAAnC,CANgB;;AAAA;AAAA;AAAA;AAMnCI,yDANmC;AAM9BC,0DAN8B;;AAAA,2DAOjCD,GAPiC;AAAA;AAAA;AAAA;;AAAA,wFAOpBxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAPoB;;AAAA;AAAA,wFAS7B7B,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,SAAV,EAAqBhB,IAAIY,KAAKZ,EAA9B,EAAkCM,IAAIM,KAAKN,EAA3C,EAAT,CAT6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAtC;;AAAA;AAAA;AAAA;AAAA;;AAYA5B,sBAAII,GAAJ,CAAQ,sBAAR,EAAgC,UAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAkB;AAChD,4BAAM+C,QAAQjD,IAAIkD,OAAJ,CAAYD,KAA1B;;AAEA1B,uCAAK6B,iBAAL,CAAuBH,KAAvB,EAA8B,kBAAQ;AACpC,qCAAOhD,IAAI4B,IAAJ,CAAS,EAAEC,QAAQA,MAAV,EAAT,CAAP;AACD,yBAFD;AAGD,mBAND;;AAQAtC,sBAAII,GAAJ,CAAQ,cAAR;AAAA,6FAAwB,kBAAOI,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBY,wDADgB,GACXd,IAAIkD,OAAJ,CAAYpC,EADD;AAEhBM,wDAFgB,GAEXpB,IAAIkD,OAAJ,CAAY9B,EAFD;;AAItB;;AAJsB;AAAA,6DAOOG,eAAK8B,iBAAL,CAAuBvC,EAAvB,EAA2BM,EAA3B,CAPP;;AAAA;AAAA;AAAA;AAOrBK,yDAPqB;AAOhBC,0DAPgB;AAOV4B,6DAPU;;AAAA,2DAQnB7B,GARmB;AAAA;AAAA;AAAA;;AAAA;AAAA,6DASGhC,SAAS8D,KAAT,CAAezC,EAAf,EAAmBM,EAAnB,CATH;;AAAA;AAAA;AAAA;AASnBK,yDATmB;AASd+B,6DATc;;AAAA,2DAUjB/B,GAViB;AAAA;AAAA;AAAA;;AAUXE,8DAAQC,GAAR,CAAYH,GAAZ,EAVW,kCAUcxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAVd;;AAAA;AAAA;AAAA,6DAWSP,eAAKkC,4BAAL,CAAkCD,QAAQE,UAA1C,EAAsDtC,EAAtD,CAXT;;AAAA;AAAA;AAAA;AAWnBK,yDAXmB;AAWdC,0DAXc;AAWR4B,6DAXQ;;AAAA;AAatB;AACA;;AAEAK,oEAAIC,cAAJ,CAAmBlC,KAAKQ,GAAxB;;AAEIW,8DAlBkB,GAkBP,EAlBO;AAmBlBgB,6DAnBkB,GAmBR,EAnBQ;AAoBlBC,6DApBkB,GAoBR,EApBQ;AAqBlBC,8DArBkB,GAqBP,EArBO;AAsBlBC,8DAtBkB,GAsBP,EAtBO;AAuBlBC,qEAvBkB,GAuBA,EAvBA;AAwBlBC,4DAxBkB,GAwBT,EAxBS;AAyBlBC,2DAzBkB,GAyBV,EAzBU;AA0BlBC,2DA1BkB,GA0BV,EA1BU;AA4BlBC,oEA5BkB,GA4BD,EA5BC;AA6BlBC,+DA7BkB,GA6BN,EA7BM;AA8BlBC,+DA9BkB,GA8BN,EA9BM;AA+BlBC,6DA/BkB,GA+BR,EA/BQ;AAgClBC,6DAhCkB,GAgCR,EAhCQ;;AAAA,4DAkCnBnB,QAAQoB,aAAR,CAAsBC,MAAtB,KAAiC,CAAjC,IAAsCrB,QAAQsB,aAAR,CAAsBD,MAAtB,GAA+B,CAlClD;AAAA;AAAA;AAAA;;AAAA;AAAA,6DAmCA,kBAAGE,iBAAO9C,OAAP,CAAe,EAAEG,KAAKoB,QAAQsB,aAAR,CAAsB,CAAtB,CAAP,EAAf,CAAH,CAnCA;;AAAA;AAAA;AAAA;AAmCnBnD,yDAnCmB;AAmCdkB,0DAnCc;AAAA;AAAA,6DAoCA,kBAAGpB,eAAKQ,OAAL,CAAa,EAAEG,KAAKS,KAAKmC,OAAZ,EAAb,CAAH,CApCA;;AAAA;AAAA;AAAA;AAoCnBrD,yDApCmB;AAoCdkB,0DApCc;AAAA;AAAA,6DAqCA,kBAAGL,kBAAQP,OAAR,CAAgB,EAAEQ,UAAUI,KAAKT,GAAjB,EAAhB,CAAH,CArCA;;AAAA;AAAA;AAAA;AAqCnBT,yDArCmB;AAqCdkB,0DArCc;AAAA;AAAA,6DAsCA,kBAAGoC,iBAAOhD,OAAP,CAAe,EAAEG,KAAKS,KAAK+B,aAAL,CAAmB,CAAnB,CAAP,EAAf,CAAH,CAtCA;;AAAA;AAAA;AAAA;AAsCnBjD,yDAtCmB;AAsCdkB,0DAtCc;;AAuCpBkB,6FAAcA,OAAd,IAAuBlB,IAAvB;AAvCoB;AAAA,6DAwCSoC,iBAAOC,UAAP,CAAkB,EAAEtD,MAAMA,IAAR,EAAcJ,MAAMqB,KAAKrB,IAAzB,EAAlB,CAxCT;;AAAA;AAAA;AAAA;AAwCnBG,yDAxCmB;AAwCdkB,0DAxCc;AAwCRW,6DAxCQ;;AAAA;;AA2CtBT,iEAAW,CAACS,OAAD,CAAX;;AA3CsB;AAAA,6DA8CeuB,iBAAOI,SAAP,CAAiB3B,QAAQsB,aAAzB,CA9Cf;;AAAA;AAAA;AAAA;AA8CrBnD,yDA9CqB;AA8ChBkB,0DA9CgB;AA8CVuC,qEA9CU;;AAAA,2DA+CnBzD,GA/CmB;AAAA;AAAA;AAAA;;AAAA,wFA+CNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA/CM;;AAAA;;AAiDtBgC,6FAAcA,OAAd,sBAA0BnB,IAA1B;AACAE,8FAAeA,QAAf,sBAA4BqC,eAA5B;;AAlDsB;AAAA,6DAqDcC,kBAAQC,YAAR,CAAqBzC,IAArB,CArDd;;AAAA;AAAA;AAAA;AAqDrBlB,yDArDqB;AAqDhBkB,0DArDgB;AAqDV0C,oEArDU;;AAAA,2DAsDnB5D,GAtDmB;AAAA;AAAA;AAAA;;AAAA,wFAsDNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAtDM;;AAAA;;AAwDtBiC,8FAAeA,QAAf,sBAA4BpB,IAA5B;;AAxDsB;AAAA,6DA2Dc2C,kBAAQC,aAAR,CAAsB5C,IAAtB,CA3Dd;;AAAA;AAAA;AAAA;AA2DrBlB,yDA3DqB;AA2DhBkB,0DA3DgB;AA2DV6C,oEA3DU;;AAAA,2DA4DnB/D,GA5DmB;AAAA;AAAA;AAAA;;AAAA,wFA4DNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA5DM;;AAAA;;AA8DtBkC,8FAAeA,QAAf,sBAA4BrB,IAA5B;;AA9DsB;AAAA,6DAiEqB8C,yBAAeC,aAAf,CAA6B/C,IAA7B,CAjErB;;AAAA;AAAA;AAAA;AAiErBlB,yDAjEqB;AAiEhBkB,0DAjEgB;AAiEVgD,2EAjEU;;AAAA,2DAkEnBlE,GAlEmB;AAAA;AAAA;AAAA;;AAAA,wFAkENxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAlEM;;AAAA;;AAoEtBmC,qGAAsBA,eAAtB,sBAA0CtB,IAA1C;;AApEsB;AAAA,6DAuEWiD,eAAKC,oBAAL,CAA0BlD,IAA1B,CAvEX;;AAAA;AAAA;AAAA;AAuErBlB,yDAvEqB;AAuEhBkB,0DAvEgB;AAuEVmD,iEAvEU;;AAAA,2DAwEnBrE,GAxEmB;AAAA;AAAA;AAAA;;AAAA,wFAwENxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAxEM;;AAAA;;AA0EtBqC,2FAAYA,KAAZ,sBAAsBxB,IAAtB;;AA1EsB;AAAA,6DA6EYoD,gBAAMC,oBAAN,CAA2BtE,KAAKQ,GAAhC,EAAqCsD,cAArC,CA7EZ;;AAAA;AAAA;AAAA;AA6ErB/D,yDA7EqB;AA6EhBkB,0DA7EgB;AA6EVsD,kEA7EU;;AAAA,2DA8EnBxE,GA9EmB;AAAA;AAAA;AAAA;;AAAA,wFA8ENxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA9EM;;AAAA;;AAgFtBoC,4FAAaA,MAAb,sBAAwBvB,IAAxB;;AAhFsB;AAAA,6DAuFekC,iBAAOqB,WAAP,CAAmBxE,KAAKQ,GAAxB,CAvFf;;AAAA;AAAA;AAAA;AAuFrBT,yDAvFqB;AAuFhBkB,0DAvFgB;AAuFVwD,qEAvFU;;AAAA,2DAwFnB1E,GAxFmB;AAAA;AAAA;AAAA;;AAAA,wFAwFNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAxFM;;AAAA;;AA0FtBgC,6FAAcA,OAAd,sBAA0BnB,IAA1B;;AA1FsB;AAAA,6DA6FgBwC,kBAAQC,YAAR,CAAqBzC,KAAKyD,KAAL,CAAW,CAAX,EAAcC,OAAd,EAArB,CA7FhB;;AAAA;AAAA;AAAA;AA6FrB5E,yDA7FqB;AA6FhBkB,0DA7FgB;AA6FV2D,sEA7FU;;AAAA,2DA8FnB7E,GA9FmB;AAAA;AAAA;AAAA;;AAAA,wFA8FNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA9FM;;AAAA;;AAgGtBiC,8FAAeA,QAAf,sBAA4BpB,IAA5B;;AAhGsB;AAAA,6DAmGgB2C,kBAAQC,aAAR,CAAsB5C,IAAtB,CAnGhB;;AAAA;AAAA;AAAA;AAmGrBlB,yDAnGqB;AAmGhBkB,0DAnGgB;AAmGV4D,sEAnGU;;AAAA,2DAoGnB9E,GApGmB;AAAA;AAAA;AAAA;;AAAA,wFAoGNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CApGM;;AAAA;;AAsGtBkC,8FAAeA,QAAf,sBAA4BrB,IAA5B;;AAtGsB;AAAA,6DAyGuB8C,yBAAeC,aAAf,CAA6B/C,IAA7B,CAzGvB;;AAAA;AAAA;AAAA;AAyGrBlB,yDAzGqB;AAyGhBkB,0DAzGgB;AAyGV6D,6EAzGU;;AAAA,2DA0GnB/E,GA1GmB;AAAA;AAAA;AAAA;;AAAA,wFA0GNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA1GM;;AAAA;;AA4GtBmC,qGAAsBA,eAAtB,sBAA0CtB,IAA1C;;AA5GsB;AAAA,6DA+GaiD,eAAKC,oBAAL,CAA0BlD,IAA1B,CA/Gb;;AAAA;AAAA;AAAA;AA+GrBlB,yDA/GqB;AA+GhBkB,0DA/GgB;AA+GV8D,mEA/GU;;AAAA,2DAgHnBhF,GAhHmB;AAAA;AAAA;AAAA;;AAAA,wFAgHNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAhHM;;AAAA;;AAkHtBqC,2FAAYA,KAAZ,sBAAsBxB,IAAtB;;AAlHsB;AAAA,6DAqHcoD,gBAAML,aAAN,CAAoBa,gBAApB,CArHd;;AAAA;AAAA;AAAA;AAqHrB9E,yDArHqB;AAqHhBkB,0DArHgB;AAqHV+D,oEArHU;;AAAA,2DAsHnBjF,GAtHmB;AAAA;AAAA;AAAA;;AAAA,wFAsHNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAtHM;;AAAA;;AAwHtBoC,4FAAaA,MAAb,sBAAwBvB,IAAxB;;AAxHsB;AAAA,6DA6HkBoC,iBAAO4B,SAAP,CAAiBjF,KAAKQ,GAAtB,EAA2BoB,OAA3B,CA7HlB;;AAAA;AAAA;AAAA;AA6HrB7B,yDA7HqB;AA6HhBkB,0DA7HgB;AA6HViE,wEA7HU;;AAAA,2DA8HnBnF,GA9HmB;AAAA;AAAA;AAAA;;AAAA,wFA8HNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA9HM;;AAAA;;AAgItB+B,6FAAcA,OAAd,sBAA0BlB,IAA1B;;AAhIsB;AAAA,6DAmIUpB,eAAKsF,SAAL,CAAe,OAAf,CAnIV;;AAAA;AAAA;AAAA;AAmIrBpF,yDAnIqB;AAmIhBkB,0DAnIgB;AAmIVmE,gEAnIU;AAqIlBhE,4DArIkB,GAqIT,EArIS;AAAA;AAAA,6DAuIMvB,eAAKwB,kBAAL,CAAwBJ,IAAxB,CAvIN;;AAAA;AAAA;AAAA;AAuIrBlB,yDAvIqB;AAuIhBkB,0DAvIgB;AAuIVG,4DAvIU;;AAAA,2DAwInBrB,GAxImB;AAAA;AAAA;AAAA;;AAAA,wFAwINxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAxIM;;AAAA;;AA0ItBe,8FAAeA,QAAf,sBAA4BF,IAA5B;;AA1IsB;AAAA,6DAgJUL,kBAAQuD,oBAAR,CAA6B5B,eAA7B,CAhJV;;AAAA;AAAA;AAAA;AAgJrBxC,yDAhJqB;AAgJhBkB,0DAhJgB;AAgJVoE,gEAhJU;;AAAA,2DAiJnBtF,GAjJmB;AAAA;AAAA;AAAA;;AAAA,wFAiJNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAjJM;;AAAA;;AAmJtBe,8FAAeA,QAAf,sBAA4BF,IAA5B;;AAnJsB;AAAA,6DAsJOqE,eAAKC,UAAL,CAAgB9C,KAAhB,CAtJP;;AAAA;AAAA;AAAA;AAsJrB1C,yDAtJqB;AAsJhBkB,0DAtJgB;AAsJVuE,6DAtJU;;AAAA,2DAuJnBzF,GAvJmB;AAAA;AAAA;AAAA;;AAAA,wFAuJNxB,IAAI4B,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAvJM;;AAAA;;AAyJtBsC,2FAAYA,KAAZ,sBAAsBzB,IAAtB;;AAMIwE,2EA/JkB,GA+JM,EA/JN;AAAA;AAAA,6DAgKqBC,wBAAcC,WAAd,CAA0B3F,KAAKQ,GAA/B,CAhKrB;;AAAA;AAAA;AAAA;AAgKrBT,yDAhKqB;AAgKhBkB,0DAhKgB;AAgKVwE,2EAhKU;;AAiKtB9C,oGAAqBA,cAArB,sBAAwC1B,IAAxC;;AAEI2E,uEAnKkB,GAmKE,EAnKF;AAAA;AAAA,6DAoKiBC,kBAAQC,WAAR,CAAoBlE,OAApB,CApKjB;;AAAA;AAAA;AAAA;AAoKrB7B,yDApKqB;AAoKhBkB,0DApKgB;AAoKV2E,uEApKU;;AAqKtB/C,+FAAgBA,SAAhB,sBAA8B5B,IAA9B;;AAGI8E,oEAxKkB,GAwKD,EAxKC;AAAA;AAAA,6DAyKcC,iBAAOC,uBAAP,CAA+BjG,KAAKQ,GAApC,EAAyCoF,iBAAzC,CAzKd;;AAAA;AAAA;AAAA;AAyKrB7F,yDAzKqB;AAyKhBkB,0DAzKgB;AAyKV8E,oEAzKU;;AA0KtBjD,6FAAcA,OAAd,sBAA0B7B,IAA1B;;AA1KsB;AAAA,6DA4KFiF,iBAAOC,YAAP,CAAoBlF,IAApB,CA5KE;;AAAA;AAAA;AAAA;AA4KrBlB,yDA5KqB;AA4KhBkB,0DA5KgB;;AA6KtB8B,6FAAcA,OAAd,sBAA0B9B,IAA1B;;AA7KsB;AAAA,6DAgLFyE,wBAAcU,cAAd,CAA6BvD,SAA7B,CAhLE;;AAAA;AAAA;AAAA;AAgLrB9C,yDAhLqB;AAgLhBkB,0DAhLgB;;AAiLtB0B,oGAAqBA,cAArB,sBAAwC1B,IAAxC;;AAjLsB;AAAA,6DAmLFoF,mBAASC,mBAAT,CAA6B3D,cAA7B,CAnLE;;AAAA;AAAA;AAAA;AAmLrB5C,yDAnLqB;AAmLhBkB,0DAnLgB;;AAoLtB2B,+FAAgBA,SAAhB,sBAA8B3B,IAA9B;;AAIIsF,sEAxLkB,GAwLC,EAxLD;AAAA;AAAA,6DAyLgBV,kBAAQF,WAAR,CAAoB3F,KAAKQ,GAAzB,CAzLhB;;AAAA;AAAA;AAAA;AAyLrBT,yDAzLqB;AAyLhBkB,0DAzLgB;AAyLVsF,sEAzLU;;AA0LtB1D,+FAAgBA,SAAhB,sBAA8B5B,IAA9B;;AA1LsB;AAAA,6DA4LFoC,iBAAO+C,cAAP,CAAsBvD,SAAtB,CA5LE;;AAAA;AAAA;AAAA;AA4LrB9C,yDA5LqB;AA4LhBkB,0DA5LgB;;AA6LtBkB,6FAAcA,OAAd,sBAA0BlB,IAA1B;;AA7LsB,wFAkMf1C,IAAI4B,IAAJ,CAAS;AACdC,oEAAQ,SADM;AAEdJ,kEAAMA,IAFQ;AAGd4B,qEAASA,OAHK;AAIdT,sEAAUA,QAJI;;AAMdC,oEAAQA,MANM;AAOd8D,gFAAoBA,kBAPN;;AASdT,6EAAiBA,eATH;AAUdvB,2EAAetB,QAAQsB,aAVT;;AAYd0B,8EAAkBA,gBAZJ;AAadjB,4EAAgBA,cAbF;;AAedkB,8EAAkBA,gBAfJ;AAgBdf,4EAAgBA,cAhBF;;AAkBdgB,qFAAyBA,uBAlBX;AAmBdb,mFAAuBA,qBAnBT;;AAqBdc,2EAAeA,aArBD;AAsBdX,yEAAaA,WAtBC;;AAwBdwB,+EAAmBA,iBAxBL;AAyBdH,mFAAuBA,qBAzBT;AA0Bdc,8EAAkBA,gBA1BJ;AA2BdR,4EAAgBA,cA3BF;;AA6Bd5D,qEAASA,OA7BK;AA8BdC,qEAASA,OA9BK;AA+BdC,sEAAUA,QA/BI;AAgCdC,sEAAUA,QAhCI;AAiCdC,6EAAiBA,eAjCH;AAkCdC,oEAAQA,MAlCM;AAmCdC,mEAAOA,KAnCO;AAoCdC,mEAAOA,KApCO;;AAsCdC,4EAAgBA,cAtCF;AAuCdC,uEAAWA,SAvCG;AAwCdC,uEAAWA,SAxCG;AAyCdC,qEAASA,OAzCK;AA0CdC,qEAASA;AA1CK,uDAAT,CAlMe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAxB;;AAAA;AAAA;AAAA;AAAA;AAgPD;;;;EArXsByD,gB;;kBAyXV3I,U","file":"user.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport to from '../../to';\r\nimport Excel from 'exceljs';\r\n\r\nimport Query from '../../functions/Query.js';\r\nimport User from '../../models/User.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport School from '../../models/School.js';\r\nimport Course from '../../models/Course.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Group from '../../models/Group.js';\r\n\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nimport Questionnaire from '../../models/survey/Questionnaire.js';\r\nimport Question from '../../models/survey/Question.js';\r\nimport Publish from '../../models/survey/Publish.js';\r\nimport Submit from '../../models/survey/Submit.js';\r\nimport Answer from '../../models/survey/Answer.js';\r\n\r\nimport Log from '../../models/Log.js';\r\n\r\nclass UserRouter extends Router {\r\n\r\n  constructor(app, mlanghku){\r\n    super(app);\r\n    this.app = app;\r\n    this.mlanghku = mlanghku;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const mlanghku = this.mlanghku;\r\n    \r\n    const upload = app.get('upload');\r\n    const temp = app.get('temp');\r\n\r\n    app.post('/user/excel', upload.single('file'),async(req, res, next)=>{\r\n\r\n      const excel = new Excel.Workbook();\r\n\r\n      excel.xlsx.readFile(temp + req.file.originalname).then(workbook => {\r\n        workbook.eachSheet((sheet, id) => {\r\n          sheet.eachRow(async (row, rowIndex) => {\r\n            if(rowIndex != 1){\r\n              var id = row.getCell(1).value;\r\n              var pw = row.getCell(2).value;\r\n              var codeType = row.getCell(3).value;\r\n              var code = row.getCell(4).value;\r\n\r\n              //console.log(\"id: \" + id);\r\n              //console.log(\"pw: \" + pw);\r\n              //console.log(\"codeType: \" + codeType);\r\n              //console.log(\"code: \" + code);\r\n\r\n              var err;\r\n              var user;\r\n\r\n              [err, user] = await User.acquireNewAccountByCode(code, codeType);\r\n              if(err){ console.log(err); return res.json({ result: 'failed'});}\r\n\r\n              //console.log(user);\r\n\r\n              var err, existedUser;\r\n              [err, existedUser] = await to(User.findOne({id: user.id}));\r\n\r\n              if(err){ console.log(err); return res.json({ result: 'failed'});}\r\n              //if(existedUser && existedUser._id.toString() !== user._id){ console.log('user id/pw already used'); }\r\n\r\n              User.findOneAndUpdate({_id: user._id}, { $set: {\"id\": id} }, {new: true}, (err, updatedUser)=>{\r\n                if(err){\r\n                  console.log(\"something wrong when updating user\");\r\n                  return res.json({ result: 'update user failed'});\r\n                }\r\n              });\r\n\r\n              Profile.findOneAndUpdate({belongTo: user._id}, { $set: {\"name\": id, \"icon\": \"0-profileIcon.png\"}}, (err, updateProfile) =>{\r\n                if(err){\r\n                  console.log(\"something wrong when updating profile\");\r\n                  return res.json({ result: 'update profile failed'});\r\n                }\r\n              });\r\n            }\r\n          })\r\n        })\r\n      })\r\n\r\n      return res.json({result: 'success'});\r\n    });\r\n\r\n    app.post('/user/addAdmin', async(req, res, next)=>{\r\n      const userId = req.body.data.userId;\r\n      //console.log(userId);\r\n      var err, updatedUser;\r\n      [err, updatedUser] = await to(User.findOneAndUpdate({id: userId},{$set:{type:'admin'}},{new: true}))\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      var profiles = [];\r\n      var admins = [];\r\n      [err, profiles, admins] = await User.getProfilesByUsers([updatedUser]);\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedUser: updatedUser,\r\n        profiles: profiles,\r\n        admins: admins\r\n      });\r\n    });\r\n\r\n    app.post('/user/update', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      var err, existedUser;\r\n      [err, existedUser] = await to(User.findOne({id: data.id, pw: data.pw}));\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n      if(existedUser && existedUser._id.toString() !== data._id){ console.log('user id/pw already used'); return res.json({ result: 'failed'}) }\r\n\r\n      User.findOneAndUpdate({_id: data._id}, { $set: data }, {new: true}, (err, updatedUser)=>{\r\n        return res.json({\r\n          result: (err || !updatedUser)? 'failed':'success' ,\r\n          updatedUser: updatedUser\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n    app.get('/user/resetPassword/', async (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.resetPassword(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccountByCode/', async (req, res, next)=>{\r\n      const code = req.headers.code;\r\n      const codeType = req.headers.type;\r\n\r\n      var err, user;\r\n\r\n      [err, user] = await User.acquireNewAccountByCode(code, codeType);\r\n      if(err){ return res.json({ result: 'failed'})}\r\n\r\n      return res.json({ result: 'success', id: user.id, pw: user.pw });\r\n    });\r\n\r\n    app.get('/user/getNewAccount/', (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.acquireNewAccount(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/login/', async (req, res, next)=>{\r\n      const id = req.headers.id;\r\n      const pw = req.headers.pw;\r\n\r\n      //console.log(id + ' ' + pw);\r\n\r\n      var err, data, user, profile, appUser;\r\n      [err, user, profile] = await User.getUserAndProfile(id, pw);\r\n      if(err){\r\n        [err, appUser] = await mlanghku.login(id, pw);\r\n        if(err){ console.log(err); return res.json({ result: \"failed\" }); }\r\n        [err, user, profile] = await User.aquireNewAccountByAppAccount(appUser.attributes, pw);\r\n      }\r\n      //console.log(user);\r\n      //console.log(profile);\r\n\r\n      Log.createLoginLog(user._id);\r\n\r\n      var profiles = [];\r\n      var schools = [];\r\n      var courses = [];\r\n      var subjects = [];\r\n      var projects = [];\r\n      var studentProjects = [];\r\n      var groups = [];\r\n      var cards = [];\r\n      var langs = [];\r\n\r\n      var questionnaires = [];\r\n      var questions = [];\r\n      var publishes = [];\r\n      var submits = [];\r\n      var answers = [];\r\n\r\n      if(profile.joinedSchools.length === 0 && profile.joinedCourses.length > 0){\r\n        [err, data] = await to(Course.findOne({ _id: profile.joinedCourses[0] }));\r\n        [err, data] = await to(User.findOne({ _id: data.teacher }));\r\n        [err, data] = await to(Profile.findOne({ belongTo: data._id }));\r\n        [err, data] = await to(School.findOne({ _id: data.joinedSchools[0] }));\r\n        schools = [...schools, data];\r\n        [err, data, profile] = await School.joinSchool({ user: user, code: data.code});\r\n      }\r\n\r\n      profiles = [profile];\r\n\r\n      var teacherProfiles;\r\n      [err, data, teacherProfiles] = await Course.getJoined(profile.joinedCourses);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      courses = [...courses, ...data];\r\n      profiles = [...profiles, ...teacherProfiles];\r\n\r\n      var joinedSubjects;\r\n      [err, data, joinedSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var joinedProjects;\r\n      [err, data, joinedProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var joinedStudentProjects;\r\n      [err, data, joinedStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var joinedCards;\r\n      [err, data, joinedCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var joinedGroups;\r\n      [err, data, joinedGroups] = await Group.getByUserAndProjects(user._id, joinedProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      groups = [...groups, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var teachingCourses;\r\n      [err, data, teachingCourses] = await Course.getTeaching(user._id);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      courses = [...courses, ...data];\r\n\r\n      var teachingSubjects;\r\n      [err, data, teachingSubjects] = await Subject.getByCourses(data.slice(0).reverse());\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var teachingProjects;\r\n      [err, data, teachingProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var teachingStudentProjects;\r\n      [err, data, teachingStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var teachingCards;\r\n      [err, data, teachingCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var teachingGroups;\r\n      [err, data, teachingGroups] = await Group.getByProjects(teachingProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      groups = [...groups, ...data];\r\n\r\n\r\n\r\n      var supervisingSchools;\r\n      [err, data, supervisingSchools] = await School.getByUser(user._id, profile);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      schools = [...schools, ...data];\r\n\r\n      var adminUsers;\r\n      [err, data, adminUsers] = await User.getByType('admin');\r\n\r\n      var admins = [];\r\n\r\n      [err, data, admins] = await User.getProfilesByUsers(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n\r\n\r\n\r\n      var profilesId;\r\n      [err, data, profilesId] = await Profile.getByStudentProjects(studentProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n      var langsId;\r\n      [err, data, langsId] = await Lang.getByCards(cards);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      langs = [...langs, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var createdQuestionnaires = [];\r\n      [err, data, createdQuestionnaires] = await Questionnaire.getByAuthor(user._id);\r\n      questionnaires = [...questionnaires, ...data];\r\n\r\n      var assignedPublishes = [];\r\n      [err, data, assignedPublishes] = await Publish.getAssigned(profile);\r\n      publishes = [...publishes, ...data];\r\n\r\n\r\n      var createdSubmits = [];\r\n      [err, data, createdSubmits] = await Submit.getByUserAndPublishesId(user._id, assignedPublishes);\r\n      submits = [...submits, ...data];\r\n\r\n      [err, data] = await Answer.getBySubmits(data);\r\n      answers = [...answers, ...data];\r\n\r\n\r\n      [err, data] = await Questionnaire.getByPublishes(publishes);\r\n      questionnaires = [...questionnaires, ...data];\r\n\r\n      [err, data] = await Question.getByQuestionnaires(questionnaires);\r\n      questions = [...questions, ...data];\r\n\r\n\r\n\r\n      var createdPublishes = [];\r\n      [err, data, createdPublishes] = await Publish.getByAuthor(user._id);\r\n      publishes = [...publishes, ...data];\r\n\r\n      [err, data] = await School.getByPublishes(publishes);\r\n      schools = [...schools, ...data];\r\n\r\n\r\n\r\n\r\n      return res.json({\r\n        result: \"success\",\r\n        user: user,\r\n        profile: profile,\r\n        profiles: profiles,\r\n\r\n        admins: admins,\r\n        supervisingSchools: supervisingSchools,\r\n\r\n        teachingCourses: teachingCourses,\r\n        joinedCourses: profile.joinedCourses,\r\n\r\n        teachingSubjects: teachingSubjects,\r\n        joinedSubjects: joinedSubjects,\r\n\r\n        teachingProjects: teachingProjects,\r\n        joinedProjects: joinedProjects,\r\n\r\n        teachingStudentProjects: teachingStudentProjects,\r\n        joinedStudentProjects: joinedStudentProjects,\r\n\r\n        teachingCards: teachingCards,\r\n        joinedCards: joinedCards,\r\n\r\n        assignedPublishes: assignedPublishes,\r\n        createdQuestionnaires: createdQuestionnaires,\r\n        createdPublishes: createdPublishes,\r\n        createdSubmits: createdSubmits,\r\n\r\n        schools: schools,\r\n        courses: courses,\r\n        subjects: subjects,\r\n        projects: projects,\r\n        studentProjects: studentProjects,\r\n        groups: groups,\r\n        cards: cards,\r\n        langs: langs,\r\n\r\n        questionnaires: questionnaires,\r\n        questions: questions,\r\n        publishes: publishes,\r\n        submits: submits,\r\n        answers: answers\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default UserRouter;\r\n"]}