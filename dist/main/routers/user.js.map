{"version":3,"sources":["../../../src/main/routers/user.js"],"names":["ObjectId","require","Types","UserRouter","app","init","mongoose","connect","db","connection","post","req","res","next","data","body","err","existedUser","User","findOne","id","pw","console","log","json","result","_id","toString","findOneAndUpdate","$set","type","email","new","updatedUser","get","headers","resetPassword","acquireNewAccount","user","profile","othersProfile","course","project","studentProject","profiles","Profile","belongTo","push","courses","projects","joinedCourses","joinedProjects","today","Date","i","length","Course","findById","endDate","teacher","studentProjects","j","Project","StudentProject","student","teachingCourses","teachingProjects","teachingCoursesData","find","k","l","Router"],"mappings":"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","file":"user.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n\r\nimport to from '../../to';\r\n\r\nimport User from '../../models/User.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport Course from '../../models/Course.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\n\r\nclass UserRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/user/update', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      //console.log(data)\r\n      let err, existedUser;\r\n      [err, existedUser] = await to(User.findOne({id: data.id, pw: data.pw}));\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n      if(existedUser && existedUser._id.toString() !== data._id){ console.log('user id/pw already used'); return res.json({ result: 'failed'}) }\r\n\r\n      User.findOneAndUpdate({_id: data._id}, { $set:{\r\n        type: data.type,\r\n        id: data.id,\r\n        pw: data.pw,\r\n        email: data.email\r\n      }}, {new: true}, (err, updatedUser)=>{\r\n        //console.log(_updatedUser)\r\n        return res.json({\r\n          result: (err || !updatedUser)? 'failed':'success' ,\r\n          updatedUser: updatedUser\r\n        });\r\n      });\r\n    });\r\n\r\n    app.get('/user/resetPassword/', async (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.resetPassword(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccount/', (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.acquireNewAccount(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/login/', async (req, res, next)=>{\r\n      const id = req.headers.id;\r\n      const pw = req.headers.pw;\r\n      let err, user, profile, othersProfile, course, project, studentProject;\r\n      var profiles = [];\r\n\r\n      [err, user] = await to(User.findOne({id, pw}));\r\n      if(err || !user){ console.log(err); console.log(user); return res.json({ result: \"failed\" });}\r\n      \r\n      [err, profile] = await to(Profile.findOne({belongTo: user._id}));\r\n      if(err || profile === null){ return res.json({ result: \"failed\" });}\r\n      profiles.push(profile);\r\n\r\n      var courses = [];\r\n      var projects = [];\r\n\r\n      var joinedCourses = profile.joinedCourses;\r\n      var joinedProjects = [];\r\n\r\n      const today = new Date();\r\n\r\n      for(var i=0;i<joinedCourses.length;i++){\r\n        [err, course] = await to(Course.findById(joinedCourses[i]));\r\n        if(err || course === null){ return res.json({ result: \"failed\" });}\r\n        const endDate = new Date(course.endDate);\r\n        /*if(endDate < today){\r\n          joinedCourses.splice(i, 1);\r\n          i--;\r\n          continue;\r\n        }*/\r\n        courses.push(course);\r\n        joinedProjects = [...joinedProjects, ...course.projects];\r\n\r\n        [err, othersProfile] = await to(Profile.findOne({belongTo: course.teacher}));\r\n        if(err || othersProfile === null){ return res.json({ result: \"failed\" });}\r\n        profiles.push(othersProfile);\r\n      }\r\n\r\n      var studentProjects = [];\r\n      for(var j=0;j<joinedProjects.length;j++){\r\n        [err, project] = await to(Project.findById(joinedProjects[j]));\r\n        if(err || project === null){ return res.json({ result: \"failed\" });}\r\n        projects.push(project);\r\n\r\n        [err, studentProject] = await to(StudentProject.findOne({project: project._id, student: user._id}));\r\n        if(studentProject){ studentProjects.push(studentProject); }\r\n      }\r\n\r\n\r\n      var teachingCourses = [];\r\n      var teachingProjects = [];\r\n      var teachingCoursesData = [];\r\n      [err, teachingCoursesData] = await to(Course.find({teacher: user._id}));\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n      courses = [...courses, ...teachingCoursesData];\r\n\r\n      for(var i=0;i<teachingCoursesData.length;i++){\r\n        /*const endDate = new Date(teachingCoursesData[i].endDate);\r\n        if(endDate < today){\r\n          return;\r\n        }*/\r\n        teachingCourses.push(teachingCoursesData[i]._id);\r\n\r\n        [err, othersProfile] = await to(Profile.findOne({belongTo: teachingCoursesData[i].teacher}));\r\n        if(err || othersProfile === null){ return res.json({ result: \"failed\" });}\r\n        profiles.push(othersProfile);\r\n      }\r\n\r\n      for(var k=0;k<teachingCoursesData.length;k++){\r\n        const endDate = new Date(teachingCoursesData[k].endDate);\r\n        /*if(endDate < today){\r\n          continue;\r\n        }*/\r\n        teachingProjects = [...teachingProjects, ...teachingCoursesData[k].projects];\r\n      }\r\n\r\n      for(var l=0;l<teachingProjects.length;l++){\r\n        [err, project] = await to(Project.findById(teachingProjects[l]));\r\n        if(err || project === null){ return res.json({ result: \"failed\" });}\r\n        projects.push(project);\r\n      }\r\n\r\n      return res.json({\r\n        result: \"success\",\r\n        user: user,\r\n        profile: profile,\r\n        profiles: profiles,\r\n\r\n        teachingCourses: teachingCourses,\r\n        joinedCourses: joinedCourses,\r\n\r\n        teachingProjects: teachingProjects,\r\n        joinedProjects: joinedProjects,\r\n\r\n        studentProjects: studentProjects,\r\n\r\n        courses: courses,\r\n        projects: projects\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default UserRouter;\r\n"]}