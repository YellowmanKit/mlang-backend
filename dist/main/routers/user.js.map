{"version":3,"sources":["../../../src/main/routers/user.js"],"names":["UserRouter","app","mlanghku","init","post","req","res","next","userId","body","data","User","findOneAndUpdate","id","$set","type","new","err","updatedUser","console","log","json","result","profiles","admins","getProfilesByUsers","findOne","pw","existedUser","_id","toString","get","email","headers","resetPassword","code","codeType","acquireNewAccountByCode","user","acquireNewAccount","getUserAndProfile","profile","login","appUser","aquireNewAccountByAppAccount","attributes","Log","createLoginLog","schools","courses","subjects","projects","studentProjects","groups","cards","langs","questionnaires","questions","publishes","submits","answers","joinedSchools","length","joinedCourses","Course","teacher","Profile","belongTo","School","joinSchool","getJoined","teacherProfiles","Subject","getByCourses","joinedSubjects","Project","getBySubjects","joinedProjects","StudentProject","getByProjects","joinedStudentProjects","Card","getByStudentProjects","joinedCards","Group","getByUserAndProjects","joinedGroups","getTeaching","teachingCourses","slice","reverse","teachingSubjects","teachingProjects","teachingStudentProjects","teachingCards","teachingGroups","getByUser","supervisingSchools","getByType","adminUsers","profilesId","Lang","getByCards","langsId","createdQuestionnaires","Questionnaire","getByAuthor","assignedPublishes","Publish","getAssigned","createdSubmits","Submit","getByUserAndPublishesId","Answer","getBySubmits","getByPublishes","Question","getByQuestionnaires","createdPublishes","Router"],"mappings":"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","file":"user.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport to from '../../to';\r\n\r\nimport Query from '../../functions/Query.js';\r\nimport User from '../../models/User.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport School from '../../models/School.js';\r\nimport Course from '../../models/Course.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Group from '../../models/Group.js';\r\n\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nimport Questionnaire from '../../models/survey/Questionnaire.js';\r\nimport Question from '../../models/survey/Question.js';\r\nimport Publish from '../../models/survey/Publish.js';\r\nimport Submit from '../../models/survey/Submit.js';\r\nimport Answer from '../../models/survey/Answer.js';\r\n\r\nimport Log from '../../models/Log.js';\r\n\r\nclass UserRouter extends Router {\r\n\r\n  constructor(app, mlanghku){\r\n    super(app);\r\n    this.app = app;\r\n    this.mlanghku = mlanghku;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const mlanghku = this.mlanghku;\r\n\r\n    app.post('/user/addAdmin', async(req, res, next)=>{\r\n      const userId = req.body.data.userId;\r\n      //console.log(userId);\r\n      var err, updatedUser;\r\n      [err, updatedUser] = await to(User.findOneAndUpdate({id: userId},{$set:{type:'admin'}},{new: true}))\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      var profiles = [];\r\n      var admins = [];\r\n      [err, profiles, admins] = await User.getProfilesByUsers([updatedUser]);\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedUser: updatedUser,\r\n        profiles: profiles,\r\n        admins: admins\r\n      });\r\n    });\r\n\r\n    app.post('/user/update', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      var err, existedUser;\r\n      [err, existedUser] = await to(User.findOne({id: data.id, pw: data.pw}));\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n      if(existedUser && existedUser._id.toString() !== data._id){ console.log('user id/pw already used'); return res.json({ result: 'failed'}) }\r\n\r\n      User.findOneAndUpdate({_id: data._id}, { $set: data }, {new: true}, (err, updatedUser)=>{\r\n        return res.json({\r\n          result: (err || !updatedUser)? 'failed':'success' ,\r\n          updatedUser: updatedUser\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n    app.get('/user/resetPassword/', async (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.resetPassword(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccountByCode/', async (req, res, next)=>{\r\n      const code = req.headers.code;\r\n      const codeType = req.headers.type;\r\n\r\n      var err, user;\r\n\r\n      [err, user] = await User.acquireNewAccountByCode(code, codeType);\r\n      if(err){ return res.json({ result: 'failed'})}\r\n\r\n      return res.json({ result: 'success', id: user.id, pw: user.pw });\r\n    });\r\n\r\n    app.get('/user/getNewAccount/', (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.acquireNewAccount(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/login/', async (req, res, next)=>{\r\n      const id = req.headers.id;\r\n      const pw = req.headers.pw;\r\n\r\n      //console.log(id + ' ' + pw);\r\n\r\n      var err, data, user, profile, appUser;\r\n      [err, user, profile] = await User.getUserAndProfile(id, pw);\r\n      if(err){\r\n        [err, appUser] = await mlanghku.login(id, pw);\r\n        if(err){ console.log(err); return res.json({ result: \"failed\" }); }\r\n        [err, user, profile] = await User.aquireNewAccountByAppAccount(appUser.attributes, pw);\r\n      }\r\n      //console.log(user);\r\n      //console.log(profile);\r\n\r\n      Log.createLoginLog(user._id);\r\n\r\n      var profiles = [];\r\n      var schools = [];\r\n      var courses = [];\r\n      var subjects = [];\r\n      var projects = [];\r\n      var studentProjects = [];\r\n      var groups = [];\r\n      var cards = [];\r\n      var langs = [];\r\n\r\n      var questionnaires = [];\r\n      var questions = [];\r\n      var publishes = [];\r\n      var submits = [];\r\n      var answers = [];\r\n\r\n      if(profile.joinedSchools.length === 0 && profile.joinedCourses.length > 0){\r\n        [err, data] = await to(Course.findOne({ _id: profile.joinedCourses[0] }));\r\n        [err, data] = await to(User.findOne({ _id: data.teacher }));\r\n        [err, data] = await to(Profile.findOne({ belongTo: data._id }));\r\n        [err, data] = await to(School.findOne({ _id: data.joinedSchools[0] }));\r\n        schools = [...schools, data];\r\n        [err, data, profile] = await School.joinSchool({ user: user, code: data.code});\r\n      }\r\n\r\n      profiles = [profile];\r\n\r\n      var teacherProfiles;\r\n      [err, data, teacherProfiles] = await Course.getJoined(profile.joinedCourses);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      courses = [...courses, ...data];\r\n      profiles = [...profiles, ...teacherProfiles];\r\n\r\n      var joinedSubjects;\r\n      [err, data, joinedSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var joinedProjects;\r\n      [err, data, joinedProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var joinedStudentProjects;\r\n      [err, data, joinedStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var joinedCards;\r\n      [err, data, joinedCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var joinedGroups;\r\n      [err, data, joinedGroups] = await Group.getByUserAndProjects(user._id, joinedProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      groups = [...groups, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var teachingCourses;\r\n      [err, data, teachingCourses] = await Course.getTeaching(user._id);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      courses = [...courses, ...data];\r\n\r\n      var teachingSubjects;\r\n      [err, data, teachingSubjects] = await Subject.getByCourses(data.slice(0).reverse());\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var teachingProjects;\r\n      [err, data, teachingProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var teachingStudentProjects;\r\n      [err, data, teachingStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var teachingCards;\r\n      [err, data, teachingCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var teachingGroups;\r\n      [err, data, teachingGroups] = await Group.getByProjects(teachingProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      groups = [...groups, ...data];\r\n\r\n\r\n\r\n      var supervisingSchools;\r\n      [err, data, supervisingSchools] = await School.getByUser(user._id, profile);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      schools = [...schools, ...data];\r\n\r\n      var adminUsers;\r\n      [err, data, adminUsers] = await User.getByType('admin');\r\n\r\n      var admins = [];\r\n\r\n      [err, data, admins] = await User.getProfilesByUsers(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n\r\n\r\n\r\n      var profilesId;\r\n      [err, data, profilesId] = await Profile.getByStudentProjects(studentProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n      var langsId;\r\n      [err, data, langsId] = await Lang.getByCards(cards);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      langs = [...langs, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var createdQuestionnaires = [];\r\n      [err, data, createdQuestionnaires] = await Questionnaire.getByAuthor(user._id);\r\n      questionnaires = [...questionnaires, ...data];\r\n\r\n      var assignedPublishes = [];\r\n      [err, data, assignedPublishes] = await Publish.getAssigned(profile);\r\n      publishes = [...publishes, ...data];\r\n\r\n\r\n      var createdSubmits = [];\r\n      [err, data, createdSubmits] = await Submit.getByUserAndPublishesId(user._id, assignedPublishes);\r\n      submits = [...submits, ...data];\r\n\r\n      [err, data] = await Answer.getBySubmits(data);\r\n      answers = [...answers, ...data];\r\n\r\n\r\n      [err, data] = await Questionnaire.getByPublishes(publishes);\r\n      questionnaires = [...questionnaires, ...data];\r\n\r\n      [err, data] = await Question.getByQuestionnaires(questionnaires);\r\n      questions = [...questions, ...data];\r\n\r\n\r\n\r\n      var createdPublishes = [];\r\n      [err, data, createdPublishes] = await Publish.getByAuthor(user._id);\r\n      publishes = [...publishes, ...data];\r\n\r\n      [err, data] = await School.getByPublishes(publishes);\r\n      schools = [...schools, ...data];\r\n\r\n\r\n\r\n\r\n      return res.json({\r\n        result: \"success\",\r\n        user: user,\r\n        profile: profile,\r\n        profiles: profiles,\r\n\r\n        admins: admins,\r\n        supervisingSchools: supervisingSchools,\r\n\r\n        teachingCourses: teachingCourses,\r\n        joinedCourses: profile.joinedCourses,\r\n\r\n        teachingSubjects: teachingSubjects,\r\n        joinedSubjects: joinedSubjects,\r\n\r\n        teachingProjects: teachingProjects,\r\n        joinedProjects: joinedProjects,\r\n\r\n        teachingStudentProjects: teachingStudentProjects,\r\n        joinedStudentProjects: joinedStudentProjects,\r\n\r\n        teachingCards: teachingCards,\r\n        joinedCards: joinedCards,\r\n\r\n        assignedPublishes: assignedPublishes,\r\n        createdQuestionnaires: createdQuestionnaires,\r\n        createdPublishes: createdPublishes,\r\n        createdSubmits: createdSubmits,\r\n\r\n        schools: schools,\r\n        courses: courses,\r\n        subjects: subjects,\r\n        projects: projects,\r\n        studentProjects: studentProjects,\r\n        groups: groups,\r\n        cards: cards,\r\n        langs: langs,\r\n\r\n        questionnaires: questionnaires,\r\n        questions: questions,\r\n        publishes: publishes,\r\n        submits: submits,\r\n        answers: answers\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default UserRouter;\r\n"]}