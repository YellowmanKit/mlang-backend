{"version":3,"sources":["../../../src/main/routers/user.js"],"names":["ObjectId","require","Types","UserRouter","app","init","mongoose","connect","db","connection","post","req","res","next","userId","body","data","console","log","err","updatedUser","User","findOneAndUpdate","id","$set","type","new","json","result","profiles","admins","getProfilesByUsers","existedUser","findOne","pw","_id","toString","email","get","headers","resetPassword","code","codeType","acquireNewAccountByCode","user","acquireNewAccount","schools","courses","subjects","projects","studentProjects","cards","langs","profile","getUserAndProfile","teacherProfiles","Course","getJoined","joinedCourses","Subject","getByCourses","joinedSubjects","Project","getBySubjects","joinedProjects","StudentProject","getByProjects","joinedStudentProjects","Card","getByStudentProjects","joinedCards","getTeaching","teachingCourses","teachingSubjects","teachingProjects","teachingStudentProjects","teachingCards","School","getByUser","supervisingSchools","getByType","adminUsers","Profile","profilesId","Lang","getByCards","langsId","Router"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAZA,IAAIA,WAAWC,QAAQ,UAAR,EAAoBC,KAApB,CAA0BF,QAAzC;;IAcMG,U;;;AAEJ,0BAAYC,GAAZ,EAAgB;AAAA;;AAAA,gIACRA,GADQ;;AAEd,kBAAKA,GAAL,GAAWA,GAAX;AACA,kBAAKC,IAAL;AAHc;AAIf;;;;mCAEK;AAAA;;AACJ,sBAAMD,MAAM,KAAKA,GAAjB;AACAE,qCAASC,OAAT,CAAiB,2BAAjB;AACA,sBAAIC,KAAKF,mBAASG,UAAlB;;AAEAL,sBAAIM,IAAJ,CAAS,gBAAT;AAAA,2FAA2B,iBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnBC,4DADmB,GACVH,IAAII,IAAJ,CAASC,IAAT,CAAcF,MADJ;;AAEzBG,8DAAQC,GAAR,CAAYJ,MAAZ;AACIK,yDAHqB,WAGhBC,WAHgB;AAAA;AAAA,6DAIE,kBAAGC,eAAKC,gBAAL,CAAsB,EAACC,IAAIT,MAAL,EAAtB,EAAmC,EAACU,MAAK,EAACC,MAAK,OAAN,EAAN,EAAnC,EAAyD,EAACC,KAAK,IAAN,EAAzD,CAAH,CAJF;;AAAA;AAAA;AAAA;AAIxBP,yDAJwB;AAInBC,iEAJmB;;AAAA,2DAKtBD,GALsB;AAAA;AAAA;AAAA;;AAKhBF,8DAAQC,GAAR,CAAYC,GAAZ,EALgB,iCAKSP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CALT;;AAAA;AAOrBC,8DAPqB,GAOV,EAPU;AAQrBC,4DARqB,GAQZ,EARY;AAAA;AAAA,6DASOT,eAAKU,kBAAL,CAAwB,CAACX,WAAD,CAAxB,CATP;;AAAA;AAAA;AAAA;AASxBD,yDATwB;AASnBU,8DATmB;AASTC,4DATS;;AAAA,2DAUtBX,GAVsB;AAAA;AAAA;AAAA;;AAUhBF,8DAAQC,GAAR,CAAYC,GAAZ,EAVgB,iCAUSP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAVT;;AAAA;AAAA,uFAYlBhB,IAAIe,IAAJ,CAAS;AACdC,oEAAQ,SADM;AAEdR,yEAAaA,WAFC;AAGdS,sEAAUA,QAHI;AAIdC,oEAAQA;AAJM,uDAAT,CAZkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA3B;;AAAA;AAAA;AAAA;AAAA;;AAoBA1B,sBAAIM,IAAJ,CAAS,cAAT;AAAA,4FAAyB,kBAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBG,0DADiB,GACVL,IAAII,IAAJ,CAASC,IADC;AAEnBG,yDAFmB,WAEda,WAFc;AAAA;AAAA,6DAGI,kBAAGX,eAAKY,OAAL,CAAa,EAACV,IAAIP,KAAKO,EAAV,EAAcW,IAAIlB,KAAKkB,EAAvB,EAAb,CAAH,CAHJ;;AAAA;AAAA;AAAA;AAGtBf,yDAHsB;AAGjBa,iEAHiB;;AAAA,2DAIpBb,GAJoB;AAAA;AAAA;AAAA;;AAIdF,8DAAQC,GAAR,CAAYC,GAAZ,EAJc,kCAIWP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAJX;;AAAA;AAAA,4DAKpBI,eAAeA,YAAYG,GAAZ,CAAgBC,QAAhB,OAA+BpB,KAAKmB,GAL/B;AAAA;AAAA;AAAA;;AAKqClB,8DAAQC,GAAR,CAAY,yBAAZ,EALrC,kCAKoFN,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CALpF;;AAAA;;AAOvBP,qEAAKC,gBAAL,CAAsB,EAACa,KAAKnB,KAAKmB,GAAX,EAAtB,EAAuC,EAAEX,MAAK;AAC5CC,wEAAMT,KAAKS,IADiC;AAE5CF,sEAAIP,KAAKO,EAFmC;AAG5CW,sEAAIlB,KAAKkB,EAHmC;AAI5CG,yEAAOrB,KAAKqB;AAJgC,6DAAP,EAAvC,EAKI,EAACX,KAAK,IAAN,EALJ,EAKiB,UAACP,GAAD,EAAMC,WAAN,EAAoB;AACnC,mEAAOR,IAAIe,IAAJ,CAAS;AACdC,0EAAST,OAAO,CAACC,WAAT,GAAuB,QAAvB,GAAgC,SAD1B;AAEdA,+EAAaA;AAFC,6DAAT,CAAP;AAID,uDAVD;;AAPuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAzB;;AAAA;AAAA;AAAA;AAAA;;AAqBAhB,sBAAIkC,GAAJ,CAAQ,sBAAR;AAAA,4FAAgC,kBAAO3B,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBwB,2DADwB,GAChB1B,IAAI4B,OAAJ,CAAYF,KADI;;;AAG9BhB,qEAAKmB,aAAL,CAAmBH,KAAnB,EAA0B,kBAAQ;AAChC,mEAAOzB,IAAIe,IAAJ,CAAS,EAAEC,QAAQA,MAAV,EAAT,CAAP;AACD,uDAFD;;AAH8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAhC;;AAAA;AAAA;AAAA;AAAA;;AAQAxB,sBAAIkC,GAAJ,CAAQ,4BAAR,EAAsC,UAAC3B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAkB;AACtD,4BAAM4B,OAAO9B,IAAI4B,OAAJ,CAAYE,IAAzB;AACA,4BAAMC,WAAW/B,IAAI4B,OAAJ,CAAYd,IAA7B;;AAEAJ,uCAAKsB,uBAAL,CAA6BF,IAA7B,EAAmCC,QAAnC,EAA6C,UAACd,MAAD,EAASgB,IAAT,EAAgB;AAC3D3B,sCAAQC,GAAR,CAAYU,MAAZ;AACA,kCAAGA,WAAW,QAAd,EAAuB;AAAE,2CAAOhB,IAAIe,IAAJ,CAAS,EAACC,QAAQA,MAAT,EAAT,CAAP;AAAkC;AAC3D,qCAAOhB,IAAIe,IAAJ,CAAS,EAAEC,QAAQA,MAAV,EAAkBL,IAAIqB,KAAKrB,EAA3B,EAA+BW,IAAIU,KAAKV,EAAxC,EAAT,CAAP;AACD,yBAJD;AAKD,mBATD;;AAWA9B,sBAAIkC,GAAJ,CAAQ,sBAAR,EAAgC,UAAC3B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAkB;AAChD,4BAAMwB,QAAQ1B,IAAI4B,OAAJ,CAAYF,KAA1B;;AAEAhB,uCAAKwB,iBAAL,CAAuBR,KAAvB,EAA8B,kBAAQ;AACpC,qCAAOzB,IAAIe,IAAJ,CAAS,EAAEC,QAAQA,MAAV,EAAT,CAAP;AACD,yBAFD;AAGD,mBAND;;AAQAxB,sBAAIkC,GAAJ,CAAQ,cAAR;AAAA,6FAAwB,kBAAO3B,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBU,wDADgB,GACXZ,IAAI4B,OAAJ,CAAYhB,EADD;AAEhBW,wDAFgB,GAEXvB,IAAI4B,OAAJ,CAAYL,EAFD;;;AAItBjB,8DAAQC,GAAR,CAAYK,KAAK,GAAL,GAAWW,EAAvB;;AAEIL,8DANkB,GAMP,EANO;AAOlBiB,6DAPkB,GAOR,EAPQ;AAQlBC,6DARkB,GAQR,EARQ;AASlBC,8DATkB,GASP,EATO;AAUlBC,8DAVkB,GAUP,EAVO;AAWlBC,qEAXkB,GAWA,EAXA;AAYlBC,2DAZkB,GAYV,EAZU;AAalBC,2DAbkB,GAaV,EAbU;AAelBjC,yDAfkB,WAebH,IAfa,WAeP4B,IAfO,WAeDS,OAfC;AAAA;AAAA,6DAgBOhC,eAAKiC,iBAAL,CAAuB/B,EAAvB,EAA2BW,EAA3B,CAhBP;;AAAA;AAAA;AAAA;AAgBrBf,yDAhBqB;AAgBhByB,0DAhBgB;AAgBVS,6DAhBU;;AAAA,2DAiBnBlC,GAjBmB;AAAA;AAAA;AAAA;;AAAA,wFAiBNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAjBM;;AAAA;;AAmBtBC,iEAAW,CAACwB,OAAD,CAAX;;AAEIE,qEArBkB;AAAA;AAAA,6DAsBeC,iBAAOC,SAAP,CAAiBJ,QAAQK,aAAzB,CAtBf;;AAAA;AAAA;AAAA;AAsBrBvC,yDAtBqB;AAsBhBH,0DAtBgB;AAsBVuC,qEAtBU;;AAAA,2DAuBnBpC,GAvBmB;AAAA;AAAA;AAAA;;AAAA,wFAuBNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAvBM;;AAAA;;AAyBtBmB,6FAAcA,OAAd,sBAA0B/B,IAA1B;AACAa,8FAAeA,QAAf,sBAA4B0B,eAA5B;;AA1BsB;AAAA,6DA6BcI,kBAAQC,YAAR,CAAqB5C,IAArB,CA7Bd;;AAAA;AAAA;AAAA;AA6BrBG,yDA7BqB;AA6BhBH,0DA7BgB;AA6BV6C,oEA7BU;;AAAA,2DA8BnB1C,GA9BmB;AAAA;AAAA;AAAA;;AAAA,wFA8BNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA9BM;;AAAA;;AAgCtBoB,8FAAeA,QAAf,sBAA4BhC,IAA5B;;AAhCsB;AAAA,6DAmCc8C,kBAAQC,aAAR,CAAsB/C,IAAtB,CAnCd;;AAAA;AAAA;AAAA;AAmCrBG,yDAnCqB;AAmChBH,0DAnCgB;AAmCVgD,oEAnCU;;AAAA,2DAoCnB7C,GApCmB;AAAA;AAAA;AAAA;;AAAA,wFAoCNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CApCM;;AAAA;;AAsCtBqB,8FAAeA,QAAf,sBAA4BjC,IAA5B;;AAtCsB;AAAA,6DAyCqBiD,yBAAeC,aAAf,CAA6BlD,IAA7B,CAzCrB;;AAAA;AAAA;AAAA;AAyCrBG,yDAzCqB;AAyChBH,0DAzCgB;AAyCVmD,2EAzCU;;AAAA,2DA0CnBhD,GA1CmB;AAAA;AAAA;AAAA;;AAAA,wFA0CNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA1CM;;AAAA;;AA4CtBsB,qGAAsBA,eAAtB,sBAA0ClC,IAA1C;;AA5CsB;AAAA,6DA+CWoD,eAAKC,oBAAL,CAA0BrD,IAA1B,CA/CX;;AAAA;AAAA;AAAA;AA+CrBG,yDA/CqB;AA+ChBH,0DA/CgB;AA+CVsD,iEA/CU;;AAAA,2DAgDnBnD,GAhDmB;AAAA;AAAA;AAAA;;AAAA,wFAgDNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAhDM;;AAAA;;AAkDtBuB,2FAAYA,KAAZ,sBAAsBnC,IAAtB;;AAlDsB;AAAA,6DA2DewC,iBAAOe,WAAP,CAAmB3B,KAAKT,GAAxB,CA3Df;;AAAA;AAAA;AAAA;AA2DrBhB,yDA3DqB;AA2DhBH,0DA3DgB;AA2DVwD,qEA3DU;;AAAA,2DA4DnBrD,GA5DmB;AAAA;AAAA;AAAA;;AAAA,wFA4DNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA5DM;;AAAA;;AA8DtBmB,6FAAcA,OAAd,sBAA0B/B,IAA1B;;AA9DsB;AAAA,6DAiEgB2C,kBAAQC,YAAR,CAAqB5C,IAArB,CAjEhB;;AAAA;AAAA;AAAA;AAiErBG,yDAjEqB;AAiEhBH,0DAjEgB;AAiEVyD,sEAjEU;;AAAA,2DAkEnBtD,GAlEmB;AAAA;AAAA;AAAA;;AAAA,wFAkENP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAlEM;;AAAA;;AAoEtBoB,8FAAeA,QAAf,sBAA4BhC,IAA5B;;AApEsB;AAAA,6DAuEgB8C,kBAAQC,aAAR,CAAsB/C,IAAtB,CAvEhB;;AAAA;AAAA;AAAA;AAuErBG,yDAvEqB;AAuEhBH,0DAvEgB;AAuEV0D,sEAvEU;;AAAA,2DAwEnBvD,GAxEmB;AAAA;AAAA;AAAA;;AAAA,wFAwENP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAxEM;;AAAA;;AA0EtBqB,8FAAeA,QAAf,sBAA4BjC,IAA5B;;AA1EsB;AAAA,6DA6EuBiD,yBAAeC,aAAf,CAA6BlD,IAA7B,CA7EvB;;AAAA;AAAA;AAAA;AA6ErBG,yDA7EqB;AA6EhBH,0DA7EgB;AA6EV2D,6EA7EU;;AAAA,2DA8EnBxD,GA9EmB;AAAA;AAAA;AAAA;;AAAA,wFA8ENP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA9EM;;AAAA;;AAgFtBsB,qGAAsBA,eAAtB,sBAA0ClC,IAA1C;;AAhFsB;AAAA,6DAmFaoD,eAAKC,oBAAL,CAA0BrD,IAA1B,CAnFb;;AAAA;AAAA;AAAA;AAmFrBG,yDAnFqB;AAmFhBH,0DAnFgB;AAmFV4D,mEAnFU;;AAAA,2DAoFnBzD,GApFmB;AAAA;AAAA;AAAA;;AAAA,wFAoFNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CApFM;;AAAA;;AAsFtBuB,2FAAYA,KAAZ,sBAAsBnC,IAAtB;;AAtFsB;AAAA,6DAyFkB6D,iBAAOC,SAAP,CAAiBlC,KAAKT,GAAtB,EAA2BkB,OAA3B,CAzFlB;;AAAA;AAAA;AAAA;AAyFrBlC,yDAzFqB;AAyFhBH,0DAzFgB;AAyFV+D,wEAzFU;;AAAA,2DA0FnB5D,GA1FmB;AAAA;AAAA;AAAA;;AAAA,wFA0FNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA1FM;;AAAA;;AA4FtBkB,6FAAcA,OAAd,sBAA0B9B,IAA1B;;AA5FsB;AAAA,6DA+FUK,eAAK2D,SAAL,CAAe,OAAf,CA/FV;;AAAA;AAAA;AAAA;AA+FrB7D,yDA/FqB;AA+FhBH,0DA/FgB;AA+FViE,gEA/FU;AAiGlBnD,4DAjGkB,GAiGT,EAjGS;AAAA;AAAA,6DAmGMT,eAAKU,kBAAL,CAAwBf,IAAxB,CAnGN;;AAAA;AAAA;AAAA;AAmGrBG,yDAnGqB;AAmGhBH,0DAnGgB;AAmGVc,4DAnGU;;AAAA,2DAoGnBX,GApGmB;AAAA;AAAA;AAAA;;AAAA,wFAoGNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CApGM;;AAAA;;AAsGtBC,8FAAeA,QAAf,sBAA4Bb,IAA5B;;AAtGsB;AAAA,6DA6GUkE,kBAAQb,oBAAR,CAA6BnB,eAA7B,CA7GV;;AAAA;AAAA;AAAA;AA6GrB/B,yDA7GqB;AA6GhBH,0DA7GgB;AA6GVmE,gEA7GU;;AAAA,2DA8GnBhE,GA9GmB;AAAA;AAAA;AAAA;;AAAA,wFA8GNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CA9GM;;AAAA;;AAgHtBC,8FAAeA,QAAf,sBAA4Bb,IAA5B;;AAhHsB;AAAA,6DAmHOoE,eAAKC,UAAL,CAAgBlC,KAAhB,CAnHP;;AAAA;AAAA;AAAA;AAmHrBhC,yDAnHqB;AAmHhBH,0DAnHgB;AAmHVsE,6DAnHU;;AAAA,2DAoHnBnE,GApHmB;AAAA;AAAA;AAAA;;AAAA,wFAoHNP,IAAIe,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CApHM;;AAAA;;AAsHtBwB,2FAAYA,KAAZ,sBAAsBpC,IAAtB;;AAtHsB,wFAwHfJ,IAAIe,IAAJ,CAAS;AACdC,oEAAQ,SADM;AAEdgB,kEAAMA,IAFQ;AAGdS,qEAASA,OAHK;AAIdxB,sEAAUA,QAJI;;AAMdC,oEAAQA,MANM;AAOdiD,gFAAoBA,kBAPN;;AASdP,6EAAiBA,eATH;AAUdd,2EAAeL,QAAQK,aAVT;;AAYde,8EAAkBA,gBAZJ;AAadZ,4EAAgBA,cAbF;;AAeda,8EAAkBA,gBAfJ;AAgBdV,4EAAgBA,cAhBF;;AAkBdW,qFAAyBA,uBAlBX;AAmBdR,mFAAuBA,qBAnBT;;AAqBdS,2EAAeA,aArBD;AAsBdN,yEAAaA,WAtBC;;AAwBdxB,qEAASA,OAxBK;AAyBdC,qEAASA,OAzBK;AA0BdC,sEAAUA,QA1BI;AA2BdC,sEAAUA,QA3BI;AA4BdC,6EAAiBA,eA5BH;AA6BdC,mEAAOA,KA7BO;AA8BdC,mEAAOA;AA9BO,uDAAT,CAxHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAxB;;AAAA;AAAA;AAAA;AAAA;AA0JD;;;;EA3OsBmC,gB;;kBA+OVpF,U","file":"user.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\nimport to from '../../to';\r\n\r\nimport Query from '../../models/Query.js';\r\nimport User from '../../models/User.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport School from '../../models/School.js';\r\nimport Course from '../../models/Course.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nclass UserRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/user/addAdmin', async(req, res, next)=>{\r\n      const userId = req.body.data.userId;\r\n      console.log(userId);\r\n      let err, updatedUser;\r\n      [err, updatedUser] = await to(User.findOneAndUpdate({id: userId},{$set:{type:'admin'}},{new: true}))\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      let profiles = [];\r\n      let admins = [];\r\n      [err, profiles, admins] = await User.getProfilesByUsers([updatedUser]);\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedUser: updatedUser,\r\n        profiles: profiles,\r\n        admins: admins\r\n      });\r\n    });\r\n\r\n    app.post('/user/update', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      let err, existedUser;\r\n      [err, existedUser] = await to(User.findOne({id: data.id, pw: data.pw}));\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n      if(existedUser && existedUser._id.toString() !== data._id){ console.log('user id/pw already used'); return res.json({ result: 'failed'}) }\r\n\r\n      User.findOneAndUpdate({_id: data._id}, { $set:{\r\n        type: data.type,\r\n        id: data.id,\r\n        pw: data.pw,\r\n        email: data.email\r\n      }}, {new: true}, (err, updatedUser)=>{\r\n        return res.json({\r\n          result: (err || !updatedUser)? 'failed':'success' ,\r\n          updatedUser: updatedUser\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n    app.get('/user/resetPassword/', async (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.resetPassword(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccountByCode/', (req, res, next)=>{\r\n      const code = req.headers.code;\r\n      const codeType = req.headers.type;\r\n\r\n      User.acquireNewAccountByCode(code, codeType, (result, user)=>{\r\n        console.log(result);\r\n        if(result === 'failed'){ return res.json({result: result})}\r\n        return res.json({ result: result, id: user.id, pw: user.pw });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccount/', (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.acquireNewAccount(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/login/', async (req, res, next)=>{\r\n      const id = req.headers.id;\r\n      const pw = req.headers.pw;\r\n\r\n      console.log(id + ' ' + pw);\r\n\r\n      let profiles = [];\r\n      let schools = [];\r\n      let courses = [];\r\n      let subjects = [];\r\n      let projects = [];\r\n      let studentProjects = [];\r\n      let cards = [];\r\n      let langs = [];\r\n\r\n      let err, data, user, profile;\r\n      [err, user, profile] = await User.getUserAndProfile(id, pw);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      profiles = [profile];\r\n\r\n      let teacherProfiles;\r\n      [err, data, teacherProfiles] = await Course.getJoined(profile.joinedCourses);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      courses = [...courses, ...data];\r\n      profiles = [...profiles, ...teacherProfiles];\r\n\r\n      var joinedSubjects;\r\n      [err, data, joinedSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var joinedProjects;\r\n      [err, data, joinedProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var joinedStudentProjects;\r\n      [err, data, joinedStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var joinedCards;\r\n      [err, data, joinedCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      var teachingCourses;\r\n      [err, data, teachingCourses] = await Course.getTeaching(user._id);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      courses = [...courses, ...data];\r\n\r\n      var teachingSubjects;\r\n      [err, data, teachingSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var teachingProjects;\r\n      [err, data, teachingProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var teachingStudentProjects;\r\n      [err, data, teachingStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var teachingCards;\r\n      [err, data, teachingCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var supervisingSchools;\r\n      [err, data, supervisingSchools] = await School.getByUser(user._id, profile);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      schools = [...schools, ...data];\r\n\r\n      var adminUsers;\r\n      [err, data, adminUsers] = await User.getByType('admin');\r\n\r\n      var admins = [];\r\n\r\n      [err, data, admins] = await User.getProfilesByUsers(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var profilesId;\r\n      [err, data, profilesId] = await Profile.getByStudentProjects(studentProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n      var langsId;\r\n      [err, data, langsId] = await Lang.getByCards(cards);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      langs = [...langs, ...data];\r\n\r\n      return res.json({\r\n        result: \"success\",\r\n        user: user,\r\n        profile: profile,\r\n        profiles: profiles,\r\n\r\n        admins: admins,\r\n        supervisingSchools: supervisingSchools,\r\n\r\n        teachingCourses: teachingCourses,\r\n        joinedCourses: profile.joinedCourses,\r\n\r\n        teachingSubjects: teachingSubjects,\r\n        joinedSubjects: joinedSubjects,\r\n\r\n        teachingProjects: teachingProjects,\r\n        joinedProjects: joinedProjects,\r\n\r\n        teachingStudentProjects: teachingStudentProjects,\r\n        joinedStudentProjects: joinedStudentProjects,\r\n\r\n        teachingCards: teachingCards,\r\n        joinedCards: joinedCards,\r\n\r\n        schools: schools,\r\n        courses: courses,\r\n        subjects: subjects,\r\n        projects: projects,\r\n        studentProjects: studentProjects,\r\n        cards: cards,\r\n        langs: langs\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default UserRouter;\r\n"]}