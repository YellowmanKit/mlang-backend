{"version":3,"sources":["../../../src/main/routers/user.js"],"names":["ObjectId","require","Types","UserRouter","app","mlanghku","init","mongoose","connect","db","connection","post","req","res","next","userId","body","data","err","updatedUser","User","findOneAndUpdate","id","$set","type","new","console","log","json","result","profiles","admins","getProfilesByUsers","existedUser","findOne","pw","_id","toString","get","email","headers","resetPassword","code","codeType","acquireNewAccountByCode","user","acquireNewAccount","profile","appUser","getUserAndProfile","login","aquireNewAccountByAppAccount","attributes","schools","courses","subjects","projects","studentProjects","groups","cards","langs","teacherProfiles","Course","getJoined","joinedCourses","Subject","getByCourses","joinedSubjects","Project","getBySubjects","joinedProjects","StudentProject","getByProjects","joinedStudentProjects","Card","getByStudentProjects","joinedCards","Group","getByUserAndProjects","joinedGroups","getTeaching","teachingCourses","slice","reverse","teachingSubjects","teachingProjects","teachingStudentProjects","teachingCards","teachingGroups","School","getByUser","supervisingSchools","getByType","adminUsers","Profile","profilesId","Lang","getByCards","langsId","Router"],"mappings":"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","file":"user.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\nimport to from '../../to';\r\n\r\nimport Query from '../../models/Query.js';\r\nimport User from '../../models/User.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport School from '../../models/School.js';\r\nimport Course from '../../models/Course.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Group from '../../models/Group.js';\r\n\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nclass UserRouter extends Router {\r\n\r\n  constructor(app, mlanghku){\r\n    super(app);\r\n    this.app = app;\r\n    this.mlanghku = mlanghku;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const mlanghku = this.mlanghku;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/user/addAdmin', async(req, res, next)=>{\r\n      const userId = req.body.data.userId;\r\n      //console.log(userId);\r\n      let err, updatedUser;\r\n      [err, updatedUser] = await to(User.findOneAndUpdate({id: userId},{$set:{type:'admin'}},{new: true}))\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      let profiles = [];\r\n      let admins = [];\r\n      [err, profiles, admins] = await User.getProfilesByUsers([updatedUser]);\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedUser: updatedUser,\r\n        profiles: profiles,\r\n        admins: admins\r\n      });\r\n    });\r\n\r\n    app.post('/user/update', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      let err, existedUser;\r\n      [err, existedUser] = await to(User.findOne({id: data.id, pw: data.pw}));\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n      if(existedUser && existedUser._id.toString() !== data._id){ console.log('user id/pw already used'); return res.json({ result: 'failed'}) }\r\n\r\n      User.findOneAndUpdate({_id: data._id}, { $set: data }, {new: true}, (err, updatedUser)=>{\r\n        return res.json({\r\n          result: (err || !updatedUser)? 'failed':'success' ,\r\n          updatedUser: updatedUser\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n    app.get('/user/resetPassword/', async (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.resetPassword(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccountByCode/', (req, res, next)=>{\r\n      const code = req.headers.code;\r\n      const codeType = req.headers.type;\r\n\r\n      User.acquireNewAccountByCode(code, codeType, (result, user)=>{\r\n        console.log(result);\r\n        if(result === 'failed'){ return res.json({result: result})}\r\n        return res.json({ result: result, id: user.id, pw: user.pw });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccount/', (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.acquireNewAccount(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/login/', async (req, res, next)=>{\r\n      const id = req.headers.id;\r\n      const pw = req.headers.pw;\r\n\r\n      //console.log(id + ' ' + pw);\r\n\r\n      let err, data, user, profile, appUser;\r\n      [err, user, profile] = await User.getUserAndProfile(id, pw);\r\n      if(err){\r\n        [err, appUser] = await mlanghku.login(id, pw);\r\n        if(err){ console.log(err); return res.json({ result: \"failed\" }); }\r\n\r\n        [err, user, profile] = await User.aquireNewAccountByAppAccount(appUser.attributes, pw);\r\n      }\r\n      //console.log(user);\r\n      //console.log(profile);\r\n\r\n      profiles = [profile];\r\n\r\n      let profiles = [];\r\n      let schools = [];\r\n      let courses = [];\r\n      let subjects = [];\r\n      let projects = [];\r\n      let studentProjects = [];\r\n      let groups = [];\r\n      let cards = [];\r\n      let langs = [];\r\n\r\n      let teacherProfiles;\r\n      [err, data, teacherProfiles] = await Course.getJoined(profile.joinedCourses);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      courses = [...courses, ...data];\r\n      profiles = [...profiles, ...teacherProfiles];\r\n\r\n      var joinedSubjects;\r\n      [err, data, joinedSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var joinedProjects;\r\n      [err, data, joinedProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var joinedStudentProjects;\r\n      [err, data, joinedStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var joinedCards;\r\n      [err, data, joinedCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var joinedGroups;\r\n      [err, data, joinedGroups] = await Group.getByUserAndProjects(user._id, joinedProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      groups = [...groups, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var teachingCourses;\r\n      [err, data, teachingCourses] = await Course.getTeaching(user._id);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      courses = [...courses, ...data];\r\n\r\n      var teachingSubjects;\r\n      [err, data, teachingSubjects] = await Subject.getByCourses(data.slice(0).reverse());\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      var teachingProjects;\r\n      [err, data, teachingProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var teachingStudentProjects;\r\n      [err, data, teachingStudentProjects] = await StudentProject.getByProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      studentProjects = [...studentProjects, ...data];\r\n\r\n      var teachingCards;\r\n      [err, data, teachingCards] = await Card.getByStudentProjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      cards = [...cards, ...data];\r\n\r\n      var teachingGroups;\r\n      [err, data, teachingGroups] = await Group.getByProjects(teachingProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      groups = [...groups, ...data];\r\n\r\n\r\n\r\n      var supervisingSchools;\r\n      [err, data, supervisingSchools] = await School.getByUser(user._id, profile);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      schools = [...schools, ...data];\r\n\r\n      var adminUsers;\r\n      [err, data, adminUsers] = await User.getByType('admin');\r\n\r\n      var admins = [];\r\n\r\n      [err, data, admins] = await User.getProfilesByUsers(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n\r\n\r\n\r\n\r\n      var profilesId;\r\n      [err, data, profilesId] = await Profile.getByStudentProjects(studentProjects);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n      var langsId;\r\n      [err, data, langsId] = await Lang.getByCards(cards);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      langs = [...langs, ...data];\r\n\r\n      return res.json({\r\n        result: \"success\",\r\n        user: user,\r\n        profile: profile,\r\n        profiles: profiles,\r\n\r\n        admins: admins,\r\n        supervisingSchools: supervisingSchools,\r\n\r\n        teachingCourses: teachingCourses,\r\n        joinedCourses: profile.joinedCourses,\r\n\r\n        teachingSubjects: teachingSubjects,\r\n        joinedSubjects: joinedSubjects,\r\n\r\n        teachingProjects: teachingProjects,\r\n        joinedProjects: joinedProjects,\r\n\r\n        teachingStudentProjects: teachingStudentProjects,\r\n        joinedStudentProjects: joinedStudentProjects,\r\n\r\n        teachingCards: teachingCards,\r\n        joinedCards: joinedCards,\r\n\r\n        schools: schools,\r\n        courses: courses,\r\n        subjects: subjects,\r\n        projects: projects,\r\n        studentProjects: studentProjects,\r\n        groups: groups,\r\n        cards: cards,\r\n        langs: langs\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default UserRouter;\r\n"]}