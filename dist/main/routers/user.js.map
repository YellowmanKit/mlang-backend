{"version":3,"sources":["../../../src/main/routers/user.js"],"names":["ObjectId","require","Types","UserRouter","app","init","mongoose","connect","db","connection","post","req","res","next","userId","body","data","console","log","err","updatedUser","User","findOneAndUpdate","id","$set","type","new","json","result","profiles","admins","getProfilesByUsers","existedUser","findOne","pw","_id","toString","email","get","headers","resetPassword","acquireNewAccount","schools","courses","subjects","projects","studentProhects","user","profile","getUserAndProfile","teacherProfiles","Course","getJoined","joinedCourses","joinedSubjects","Subject","getByCourses","joinedProjects","Project","getBySubjects","teachingCourses","getTeaching","teachingSubjects","teachingProjects","studentProjects","StudentProject","find","student","supervisingSchools","School","getByUser","adminUsers","getByType","Router"],"mappings":"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","file":"user.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n\r\nimport to from '../../to';\r\n\r\nimport User from '../../models/User.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport School from '../../models/School.js';\r\nimport Course from '../../models/Course.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\n\r\nclass UserRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/user/addAdmin', async(req, res, next)=>{\r\n      const userId = req.body.data.userId;\r\n      console.log(userId);\r\n      let err, updatedUser;\r\n      [err, updatedUser] = await to(User.findOneAndUpdate({id: userId},{$set:{type:'admin'}},{new: true}))\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      let profiles = [];\r\n      let admins = [];\r\n      [err, profiles, admins] = await User.getProfilesByUsers([updatedUser]);\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedUser: updatedUser,\r\n        profiles: profiles,\r\n        admins: admins\r\n      });\r\n    });\r\n\r\n    app.post('/user/update', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      let err, existedUser;\r\n      [err, existedUser] = await to(User.findOne({id: data.id, pw: data.pw}));\r\n      if(err){ console.log(err); return res.json({ result: 'failed'})}\r\n      if(existedUser && existedUser._id.toString() !== data._id){ console.log('user id/pw already used'); return res.json({ result: 'failed'}) }\r\n\r\n      User.findOneAndUpdate({_id: data._id}, { $set:{\r\n        type: data.type,\r\n        id: data.id,\r\n        pw: data.pw,\r\n        email: data.email\r\n      }}, {new: true}, (err, updatedUser)=>{\r\n        return res.json({\r\n          result: (err || !updatedUser)? 'failed':'success' ,\r\n          updatedUser: updatedUser\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n    app.get('/user/resetPassword/', async (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.resetPassword(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/getNewAccount/', (req, res, next)=>{\r\n      const email = req.headers.email;\r\n\r\n      User.acquireNewAccount(email, result=>{\r\n        return res.json({ result: result });\r\n      });\r\n    });\r\n\r\n    app.get('/user/login/', async (req, res, next)=>{\r\n      const id = req.headers.id;\r\n      const pw = req.headers.pw;\r\n\r\n      let profiles = [];\r\n      let schools = [];\r\n      let courses = [];\r\n      let subjects = [];\r\n      let projects = [];\r\n      let studentProhects = [];\r\n\r\n      let err, data, user, profile;\r\n      [err, user, profile] = await User.getUserAndProfile(id, pw);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      profiles = [profile];\r\n\r\n      let teacherProfiles;\r\n      [err, data, teacherProfiles] = await Course.getJoined(profile.joinedCourses);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      courses = [...courses, ...data];\r\n      profiles = [...profiles, ...teacherProfiles];\r\n\r\n      let joinedSubjects;\r\n      [err, data, joinedSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      let joinedProjects;\r\n      [err, data, joinedProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var teachingCourses = [];\r\n      [err, data, teachingCourses] = await Course.getTeaching(user._id);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      courses = [...courses, ...data];\r\n\r\n      var teachingSubjects = [];\r\n      [err, data, teachingSubjects] = await Subject.getByCourses(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      subjects = [...subjects, ...data];\r\n\r\n      let teachingProjects;\r\n      [err, data, teachingProjects] = await Project.getBySubjects(data);\r\n      if(err){ return res.json({ result: \"failed\" }); }\r\n\r\n      projects = [...projects, ...data];\r\n\r\n      var studentProjects = [];\r\n      [err, studentProjects] = await to(StudentProject.find({student: user._id}));\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      var supervisingSchools = [];\r\n      [err, data, supervisingSchools] = await School.getByUser(user._id, profile);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      schools = [...schools, ...data];\r\n\r\n      var adminUsers = [];\r\n      [err, data, adminUsers] = await User.getByType('admin');\r\n\r\n      var admins = [];\r\n\r\n      [err, data, admins] = await User.getProfilesByUsers(data);\r\n      if(err){ return res.json({ result: \"failed\" });}\r\n\r\n      profiles = [...profiles, ...data];\r\n\r\n      return res.json({\r\n        result: \"success\",\r\n        user: user,\r\n        profile: profile,\r\n        profiles: profiles,\r\n\r\n        admins: admins,\r\n        supervisingSchools: supervisingSchools,\r\n\r\n        teachingCourses: teachingCourses,\r\n        joinedCourses: profile.joinedCourses,\r\n\r\n        teachingSubjects: teachingSubjects,\r\n        joinedSubjects: joinedSubjects,\r\n\r\n        teachingProjects: teachingProjects,\r\n        joinedProjects: joinedProjects,\r\n\r\n        schools: schools,\r\n        courses: courses,\r\n        subjects: subjects,\r\n        projects: projects,\r\n        studentProjects: studentProjects\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default UserRouter;\r\n"]}