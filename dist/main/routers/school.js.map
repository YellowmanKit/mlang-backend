{"version":3,"sources":["../../../src/main/routers/school.js"],"names":["SchoolRouter","app","init","post","req","res","next","schoolId","body","data","err","statistics","card","Query","getStatisticsBySchool","json","result","cards","i","length","timestamp","_id","getTimestamp","Card","findOneAndUpdate","$set","createdAt","Date","new","list","school","schools","School","findById","splice","joinedSchool","updatedProfile","joinSchool","editedSchool","addSchool","newSchool","Router"],"mappings":"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","file":"school.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport to from '../../to';\r\n\r\nimport User from '../../models/User.js';\r\nimport Card from '../../models/Card.js';\r\n\r\nimport School from '../../models/School.js';\r\nimport Query from '../../functions/Query.js';\r\n\r\nclass SchoolRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n\r\n    app.post('/school/getStatistics', async(req, res, next)=>{\r\n      const schoolId = req.body.data;\r\n      //console.log(schoolId)\r\n\r\n      let err, statistics, card;\r\n      [err, statistics] = await Query.getStatisticsBySchool(schoolId);\r\n      if(err){ return res.json({result: 'failed'})}\r\n\r\n      var cards = statistics.cards;\r\n      for(var i=0;i<cards.length;i++){\r\n        const timestamp = cards[i]._id.getTimestamp();\r\n        [err, card] = await to(Card.findOneAndUpdate({ _id:cards[i]._id }, {$set:{ createdAt: new Date(timestamp) } },{ new: true }));\r\n      }\r\n      if(err){ return res.json({result: 'failed'}) }\r\n\r\n      return res.json({result: 'success', statistics: statistics})\r\n    });\r\n\r\n    app.post('/school/getMultiple', async(req, res)=>{\r\n      const list = req.body.data;\r\n      //console.log(list);\r\n      let err, school;\r\n      var schools = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, school] = await to(School.findById(list[i]));\r\n        if(err){ return res.json({ result: 'failed' })}\r\n        schools.splice(0,0,school);\r\n      }\r\n      return res.json({\r\n        result:'success',\r\n        schools: schools\r\n      })\r\n    });\r\n\r\n    /*app.post('/school/leave', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      //console.log(data)\r\n\r\n      School.leaveSchool(data, (result, leavedSchool, updatedProfile, updatedUser)=>{\r\n        return res.json({\r\n          result: result,\r\n          leavedSchool: leavedSchool,\r\n          updatedProfile: updatedProfile,\r\n          updatedUser: updatedUser\r\n        })\r\n      })\r\n    });*/\r\n\r\n    app.post('/school/join', async (req, res, next)=>{\r\n      const data = req.body.data;\r\n      //console.log(data)\r\n      let err, joinedSchool, updatedProfile;\r\n\r\n      [err, joinedSchool, updatedProfile] = await School.joinSchool(data);\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        joinedSchool: joinedSchool,\r\n        updatedProfile: updatedProfile\r\n      });\r\n\r\n    });\r\n\r\n    app.post('/school/edit', async(req, res, next)=>{\r\n      const school = req.body.data;\r\n      //console.log(data)\r\n      let err, editedSchool;\r\n      [err, editedSchool] = await to(School.findOneAndUpdate({_id: school._id},{ $set: school}, { new: true }));\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        editedSchool: editedSchool\r\n      })\r\n    });\r\n\r\n    app.post('/school/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      //console.log(data)\r\n\r\n      School.addSchool(data, (result, newSchool)=>{\r\n        return res.json({\r\n          result: result,\r\n          newSchool: newSchool\r\n        })\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default SchoolRouter;\r\n"]}