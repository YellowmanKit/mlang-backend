{"version":3,"sources":["../../../src/main/routers/subject.js"],"names":["SubjectRouter","app","init","mongoose","connect","db","connection","post","req","res","profile","body","data","err","studentProjects","project","subject","projects","subjects","StudentProject","find","student","belongTo","console","log","json","result","studentProjectsList","subjectsList","i","length","push","_id","Project","findById","Subject","indexOf","updatedProfile","list","splice","next","editedSubject","findOneAndUpdate","$set","new","newSubject","updatedCourse","create","Course","course","$push","cb","Router"],"mappings":"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","file":"subject.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nimport to from '../../to';\r\n\r\nimport User from '../../models/User.js';\r\nimport Course from '../../models/Course.js';\r\nimport Project from '../../models/Project.js';\r\nimport Subject from '../../models/Subject.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\n\r\nclass SubjectRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/subject/getAllOfUser', async(req, res)=>{\r\n      const profile = req.body.data;\r\n      //console.log(profile);\r\n      let err, studentProjects, project, subject;\r\n      var projects = [];\r\n      var subjects = [];\r\n\r\n      [err, studentProjects] = await to(StudentProject.find({student: profile.belongTo}));\r\n      if(err || studentProjects === null){ console.log('failed to get student project'); return res.json({ result: 'failed' })}\r\n      //console.log(studentProjects);\r\n      var studentProjectsList = [];\r\n      var subjectsList = [];\r\n      for(var i=0;i<studentProjects.length;i++){\r\n        studentProjectsList.push(studentProjects[i]._id);\r\n\r\n        [err, project] = await to(Project.findById(studentProjects[i].project));\r\n        if(err || project === null){ console.log('failed to get project'); return res.json({ result: 'failed' })}\r\n        projects.push(project);\r\n\r\n        [err, subject] = await to(Subject.findById(project.subject));\r\n        if(err || subject === null){\r\n          console.log('failed to get subject');\r\n          continue;\r\n        }\r\n        subjects.push(subject);\r\n        if(!(subjectsList.indexOf('' + subject._id) > -1)){\r\n          subjectsList.push('' + subject._id);\r\n        }\r\n      }\r\n\r\n      var updatedProfile = profile;\r\n      updatedProfile.subjects = subjectsList;\r\n      updatedProfile.studentProjects = studentProjectsList;\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        subjects: subjects,\r\n        projects: projects,\r\n        studentProjects: studentProjects,\r\n        profile: updatedProfile\r\n      })\r\n    });\r\n\r\n    app.post('/subject/getMultiple', async(req, res)=>{\r\n      const list = req.body.data;\r\n      //console.log(list);\r\n      let err, subject;\r\n      var subjects = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, subject] = await to(Subject.findById(list[i]));\r\n        if(err){ return res.json({ result: 'failed' })}\r\n        subjects.splice(0,0,subject);\r\n      }\r\n      return res.json({\r\n        result:'success',\r\n        subjects: subjects\r\n      })\r\n    });\r\n\r\n    app.post('/subject/edit', async(req, res, next)=>{\r\n      const subject = req.body.data;\r\n      //console.log(data)\r\n      let err, editedSubject;\r\n      [err, editedSubject] = await to(Subject.findOneAndUpdate({_id: project._id},{ $set: subject }, { new: true }));\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        editedSubject: editedSubject\r\n      })\r\n    });\r\n\r\n    app.post('/subject/add', async(req, res)=>{\r\n      const subject = req.body.data;\r\n      console.log(subject);\r\n      let err, newSubject, updatedCourse;\r\n      [err, newSubject] = await to(Subject.create(subject))\r\n      if(err){ return res.json({ result: 'failed' })}\r\n\r\n      [err, updatedCourse] = await to(Course.findOneAndUpdate({_id: subject.course}, { $push: {\r\n        subjects: newSubject._id\r\n      }}, {new: true}))\r\n      if(err || updatedCourse === null){ cb('failed'); };\r\n\r\n      return res.json({\r\n        result:'success',\r\n        newSubject: newSubject,\r\n        updatedCourse: updatedCourse\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default SubjectRouter;\r\n"]}