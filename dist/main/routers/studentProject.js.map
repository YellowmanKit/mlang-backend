{"version":3,"sources":["../../../src/main/routers/studentProject.js"],"names":["ObjectId","require","Types","StudentProjectRouter","app","init","mongoose","connect","db","connection","post","req","res","list","body","data","err","studentProject","profile","card","lang","_studentProjects","_studentProfiles","_cards","_langs","i","length","StudentProject","findById","json","result","splice","Profile","findOne","belongTo","student","cardsId","cards","j","Card","langsId","langs","k","Lang","studentProjects","students","get","next","studentId","headers","projectId","project","_studentProject","_project","findOneAndUpdate","upsert","new","Project","some","sp","equals","_id","$push","updatedProject","Router"],"mappings":"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","file":"studentProject.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n\r\nimport to from '../../to';\r\n\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Project from '../../models/Project.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nclass StudentProjectRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/studentProject/getMultiple', async(req, res)=>{\r\n      const list = req.body.data;\r\n      //console.log(list);\r\n      let err, studentProject, profile, card, lang;\r\n      var _studentProjects = [];\r\n      var _studentProfiles = [];\r\n      var _cards = [];\r\n      var _langs = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, studentProject] = await to(StudentProject.findById(list[i]));\r\n        if(err){ return res.json({ result: 'failed' })}\r\n        _studentProjects.splice(0,0, studentProject);\r\n\r\n        [err, profile] = await to(Profile.findOne({belongTo: studentProject.student}));\r\n        if(err || profile === null){ return res.json({ result: 'failed' })}\r\n        _studentProfiles.splice(0,0, profile);\r\n\r\n        const cardsId = studentProject.cards;\r\n        for(var j=0;j<cardsId.length;j++){\r\n          [err, card] = await to(Card.findById(cardsId[j]));\r\n          if(err || card === null){ return res.json({ result: 'failed' })}\r\n          _cards.splice(0,0,card);\r\n\r\n          const langsId = card.langs;\r\n          for(var k=0;k<langsId.length;k++){\r\n            [err, lang] = await to(Lang.findById(langsId[k]));\r\n            if(err || lang === null){ return res.json({ result: 'failed' })}\r\n            _langs.splice(0,0,lang);\r\n          }\r\n\r\n        }\r\n      }\r\n      return res.json({\r\n        result:'success',\r\n        studentProjects: _studentProjects,\r\n        students: _studentProfiles,\r\n        cards: _cards,\r\n        langs: _langs\r\n      })\r\n    });\r\n\r\n    app.get('/studentProject/get/', async (req, res, next)=>{\r\n      const studentId = req.headers.student;\r\n      const projectId = req.headers.project;\r\n      //console.log(studentId)\r\n      //console.log(projectId)\r\n\r\n      let err, _studentProject, _project;\r\n      [err, _studentProject] = await to(StudentProject.findOneAndUpdate({student: studentId, project: projectId },{}, {upsert: true, new: true}))\r\n      if(err || _studentProject === null){ return res.json({ result: \"failed\" });}\r\n\r\n      [err, _project] = await to(Project.findById(projectId));\r\n      if(err || _project === null){ return res.json({ result: \"failed\" });}\r\n\r\n      if(!_project.studentProjects.some(sp=>{return sp.equals(_studentProject._id)}) ){\r\n        [err, _project] = await to(Project.findOneAndUpdate({_id: projectId}, { $push:{\r\n          studentProjects: _studentProject._id\r\n        }}, {new: true}));\r\n        if(err || _project === null){ return res.json({ result: \"failed\" });}\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedProject: _project,\r\n        studentProject: _studentProject\r\n      })\r\n\r\n    });\r\n\r\n    /*app.post('/studentProject/add', async(req, res, next)=>{\r\n      console.log('studentProject/add')\r\n      const data = req.body.data;\r\n      let err, _studentProject;\r\n      [err, _studentProject] = await to(StudentProject.create({project: data.project, student: data.student}));\r\n      if(err || _studentProject === null){ return res.json({ result: \"failed\" });}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        studentProject: _studentProject\r\n      })\r\n\r\n    })*/\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default StudentProjectRouter;\r\n"]}