{"version":3,"sources":["../../../src/main/routers/studentProject.js"],"names":["ObjectId","require","Types","StudentProjectRouter","app","init","mongoose","connect","db","connection","post","req","res","profile","body","data","err","studentProjects","project","projects","StudentProject","find","student","belongTo","console","log","json","result","list","i","length","Project","findById","push","_id","updatedProfile","studentProject","findOneAndUpdate","$set","new","updatedStudentProject","studentProjectId","studentAlert","card","lang","_studentProjects","_studentProfiles","_cards","_langs","splice","Profile","findOne","cardsId","cards","j","Card","langsId","langs","k","Lang","profiles","get","next","studentId","headers","projectId","_studentProject","_project","upsert","some","sp","equals","$push","updatedProject","Router"],"mappings":"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","file":"studentProject.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n\r\nimport to from '../../to';\r\n\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Project from '../../models/Project.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nclass StudentProjectRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/studentProject/getByStudent', async (req,res)=>{\r\n      const profile = req.body.data;\r\n      //console.log(profile);\r\n      let err, studentProjects, project;\r\n      var projects = [];\r\n      [err, studentProjects] = await to(StudentProject.find({student: profile.belongTo}));\r\n      if(err || studentProjects === null){ console.log('failed to get student project'); return res.json({ result: 'failed' })}\r\n      //console.log(studentProjects);\r\n\r\n      var list = [];\r\n      for(var i=0;i<studentProjects.length;i++){\r\n        [err, project] = await to(Project.findById(studentProjects[i].project));\r\n        if(err || project === null){ console.log('failed to get project'); return res.json({ result: 'failed' })}\r\n        projects.push(project);\r\n        list.push(studentProjects[i]._id);\r\n      }\r\n\r\n      var updatedProfile = profile;\r\n      profile.studentProjects = list;\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        projects: projects,\r\n        studentProjects: studentProjects,\r\n        updatedProfile: updatedProfile\r\n      })\r\n    });\r\n\r\n    app.post('/studentProject/update', async(req, res)=>{\r\n      const data = req.body.data;\r\n      //console.log(data);\r\n      let err, studentProject;\r\n      [err, studentProject] = await to(StudentProject.findOneAndUpdate({_id: data._id}, {$set: data }, {new: true}));\r\n      if(err || studentProject === null){ return res.json({ result: 'failed' })}\r\n      //console.log(studentProject);\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedStudentProject: studentProject\r\n      })\r\n    });\r\n\r\n    app.post('/studentProject/clearAlert', async(req, res)=>{\r\n      const data = req.body.data;\r\n      //console.log(data);\r\n      let err, studentProject;\r\n      [err, studentProject] = await to(StudentProject.findOneAndUpdate({_id: data.studentProjectId}, {$set:{\r\n        studentAlert: false\r\n      }}, {new: true}));\r\n      if(err || studentProject === null){ return res.json({ result: 'failed' })}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedStudentProject: studentProject\r\n      })\r\n    });\r\n\r\n    app.post('/studentProject/getMultiple', async(req, res)=>{\r\n      const list = req.body.data;\r\n      //console.log(list);\r\n      let err, studentProject, profile, card, lang;\r\n      var _studentProjects = [];\r\n      var _studentProfiles = [];\r\n      var _cards = [];\r\n      var _langs = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, studentProject] = await to(StudentProject.findById(list[i]));\r\n        if(err){ return res.json({ result: 'failed' })}\r\n        _studentProjects.splice(0,0, studentProject);\r\n\r\n        [err, profile] = await to(Profile.findOne({belongTo: studentProject.student}));\r\n        if(err || profile === null){ return res.json({ result: 'failed' })}\r\n        _studentProfiles.splice(0,0, profile);\r\n\r\n        const cardsId = studentProject.cards;\r\n        for(var j=0;j<cardsId.length;j++){\r\n          [err, card] = await to(Card.findById(cardsId[j]));\r\n          if(err || card === null){ return res.json({ result: 'failed' })}\r\n          _cards.splice(0,0,card);\r\n\r\n          const langsId = card.langs;\r\n          for(var k=0;k<langsId.length;k++){\r\n            [err, lang] = await to(Lang.findById(langsId[k]));\r\n            if(err || lang === null){ return res.json({ result: 'failed' })}\r\n            _langs.splice(0,0,lang);\r\n          }\r\n\r\n        }\r\n      }\r\n      return res.json({\r\n        result:'success',\r\n        studentProjects: _studentProjects,\r\n        profiles: _studentProfiles,\r\n        cards: _cards,\r\n        langs: _langs\r\n      })\r\n    });\r\n\r\n    app.get('/studentProject/get/', async (req, res, next)=>{\r\n      const studentId = req.headers.student;\r\n      const projectId = req.headers.project;\r\n      //console.log(studentId)\r\n      //console.log(projectId)\r\n\r\n      let err, _studentProject, _project;\r\n      [err, _studentProject] = await to(StudentProject.findOneAndUpdate({student: studentId, project: projectId },{}, {upsert: true, new: true}))\r\n      if(err || _studentProject === null){ return res.json({ result: \"failed\" });}\r\n\r\n      [err, _project] = await to(Project.findById(projectId));\r\n      if(err || _project === null){ return res.json({ result: \"failed\" });}\r\n\r\n      if(!_project.studentProjects.some(sp=>{return sp.equals(_studentProject._id)}) ){\r\n        [err, _project] = await to(Project.findOneAndUpdate({_id: projectId}, { $push:{\r\n          studentProjects: _studentProject._id\r\n        }}, {new: true}));\r\n        if(err || _project === null){ return res.json({ result: \"failed\" });}\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedProject: _project,\r\n        studentProject: _studentProject\r\n      })\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default StudentProjectRouter;\r\n"]}