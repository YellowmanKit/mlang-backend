{"version":3,"sources":["../../../src/main/routers/studentProject.js"],"names":["ObjectId","require","Types","StudentProjectRouter","app","init","mongoose","connect","db","connection","post","req","res","data","body","err","studentProject","StudentProject","findOneAndUpdate","_id","$set","new","json","result","updatedStudentProject","studentProjectId","studentAlert","list","profile","card","lang","_studentProjects","_studentProfiles","_cards","_langs","i","length","findById","splice","Profile","findOne","belongTo","student","cardsId","cards","j","Card","langsId","langs","k","Lang","studentProjects","profiles","get","next","studentId","headers","projectId","project","_studentProject","_project","upsert","Project","some","sp","equals","$push","updatedProject","Router"],"mappings":"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","file":"studentProject.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n\r\nimport to from '../../to';\r\n\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Project from '../../models/Project.js';\r\nimport Profile from '../../models/Profile.js';\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\n\r\nclass StudentProjectRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/studentProject/update', async(req, res)=>{\r\n      const data = req.body.data;\r\n      //console.log(data);\r\n      let err, studentProject;\r\n      [err, studentProject] = await to(StudentProject.findOneAndUpdate({_id: data._id}, {$set: data }, {new: true}));\r\n      if(err || studentProject === null){ return res.json({ result: 'failed' })}\r\n      //console.log(studentProject);\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedStudentProject: studentProject\r\n      })\r\n    });\r\n\r\n    app.post('/studentProject/clearAlert', async(req, res)=>{\r\n      const data = req.body.data;\r\n      //console.log(data);\r\n      let err, studentProject;\r\n      [err, studentProject] = await to(StudentProject.findOneAndUpdate({_id: data.studentProjectId}, {$set:{\r\n        studentAlert: false\r\n      }}, {new: true}));\r\n      if(err || studentProject === null){ return res.json({ result: 'failed' })}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedStudentProject: studentProject\r\n      })\r\n    });\r\n\r\n    app.post('/studentProject/getMultiple', async(req, res)=>{\r\n      const list = req.body.data;\r\n      //console.log(list);\r\n      let err, studentProject, profile, card, lang;\r\n      var _studentProjects = [];\r\n      var _studentProfiles = [];\r\n      var _cards = [];\r\n      var _langs = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, studentProject] = await to(StudentProject.findById(list[i]));\r\n        if(err){ return res.json({ result: 'failed' })}\r\n        _studentProjects.splice(0,0, studentProject);\r\n\r\n        [err, profile] = await to(Profile.findOne({belongTo: studentProject.student}));\r\n        if(err || profile === null){ return res.json({ result: 'failed' })}\r\n        _studentProfiles.splice(0,0, profile);\r\n\r\n        const cardsId = studentProject.cards;\r\n        for(var j=0;j<cardsId.length;j++){\r\n          [err, card] = await to(Card.findById(cardsId[j]));\r\n          if(err || card === null){ return res.json({ result: 'failed' })}\r\n          _cards.splice(0,0,card);\r\n\r\n          const langsId = card.langs;\r\n          for(var k=0;k<langsId.length;k++){\r\n            [err, lang] = await to(Lang.findById(langsId[k]));\r\n            if(err || lang === null){ return res.json({ result: 'failed' })}\r\n            _langs.splice(0,0,lang);\r\n          }\r\n\r\n        }\r\n      }\r\n      return res.json({\r\n        result:'success',\r\n        studentProjects: _studentProjects,\r\n        profiles: _studentProfiles,\r\n        cards: _cards,\r\n        langs: _langs\r\n      })\r\n    });\r\n\r\n    app.get('/studentProject/get/', async (req, res, next)=>{\r\n      const studentId = req.headers.student;\r\n      const projectId = req.headers.project;\r\n      //console.log(studentId)\r\n      //console.log(projectId)\r\n\r\n      let err, _studentProject, _project;\r\n      [err, _studentProject] = await to(StudentProject.findOneAndUpdate({student: studentId, project: projectId },{}, {upsert: true, new: true}))\r\n      if(err || _studentProject === null){ return res.json({ result: \"failed\" });}\r\n\r\n      [err, _project] = await to(Project.findById(projectId));\r\n      if(err || _project === null){ return res.json({ result: \"failed\" });}\r\n\r\n      if(!_project.studentProjects.some(sp=>{return sp.equals(_studentProject._id)}) ){\r\n        [err, _project] = await to(Project.findOneAndUpdate({_id: projectId}, { $push:{\r\n          studentProjects: _studentProject._id\r\n        }}, {new: true}));\r\n        if(err || _project === null){ return res.json({ result: \"failed\" });}\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedProject: _project,\r\n        studentProject: _studentProject\r\n      })\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default StudentProjectRouter;\r\n"]}