{"version":3,"sources":["../../../src/main/routers/survey.js"],"names":["SurveyRouter","app","init","post","req","res","next","data","body","Submit","edit","err","submit","answers","json","result","updatedSubmit","updatedAnswers","add","publish","getMultiple","submits","profiles","publishId","Query","getStatisticsByPublish","statistics","Publish","updatedPublish","school","Questionnaire","findOneAndUpdate","_id","questionnaire","$set","published","new","updatedQuestionnaire","questions","updatedQuestions","Router"],"mappings":"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","file":"survey.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport to from '../../to';\r\n\r\nimport Questionnaire from '../../models/survey/Questionnaire.js';\r\nimport Publish from '../../models/survey/Publish.js';\r\nimport Submit from '../../models/survey/Submit.js';\r\n\r\nimport Query from '../../functions/Query.js';\r\n\r\nclass SurveyRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n\r\n    app.post('/survey/submit/edit', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n\r\n      var err, submit, answers;\r\n      [err, submit, answers] = await Submit.edit(data);\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        updatedSubmit: submit,\r\n        updatedAnswers: answers\r\n      })\r\n    });\r\n\r\n    app.post('/survey/submit/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n\r\n      var err, submit, answers;\r\n      [err, submit, answers] = await Submit.add(data);\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        updatedSubmit: submit,\r\n        updatedAnswers: answers\r\n      })\r\n    });\r\n\r\n    app.post('/survey/publish/getSubmitted', async(req, res, next)=>{\r\n      const publish = req.body.data;\r\n      //console.log(schoolId)\r\n\r\n      var err, submits, answers, profiles;\r\n      [err, submits, answers, profiles] = await Submit.getMultiple(publish.submits);\r\n      if(err){ return res.json({result: 'failed'})}\r\n      return res.json({ result: 'success', submits: submits, answers: answers, profiles: profiles })\r\n\r\n    });\r\n\r\n    app.post('/survey/publish/getStatistics', async(req, res, next)=>{\r\n      const publishId = req.body.data;\r\n      //console.log(schoolId)\r\n\r\n      var err, statistics;\r\n      [err, statistics] = await Query.getStatisticsByPublish(publishId);\r\n      if(err){ return res.json({result: 'failed'})}\r\n      return res.json({ result: 'success', statistics: statistics })\r\n\r\n    });\r\n\r\n    app.post('/survey/publish/edit', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n\r\n      var err, publish;\r\n      [err, publish] = await Publish.edit(data);\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        updatedPublish: publish\r\n      })\r\n    });\r\n\r\n    app.post('/survey/publish/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n\r\n      var err, publish, school, questionnaire;\r\n      [err, publish, school] = await Publish.add(data);\r\n\r\n      if(publish){\r\n        [err, questionnaire] = await to(Questionnaire.findOneAndUpdate(\r\n          { _id: publish.questionnaire },\r\n          { $set: { published: true } },\r\n          { new: true }\r\n        ));\r\n      }\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        updatedPublish: publish,\r\n        updatedQuestionnaire: questionnaire,\r\n        school: school\r\n      })\r\n    });\r\n\r\n    app.post('/survey/questionnaire/edit', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n\r\n      var err, questionnaire, questions;\r\n      [err, questionnaire, questions] = await Questionnaire.edit(data);\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        updatedQuestions: questions,\r\n        updatedQuestionnaire: questionnaire\r\n      })\r\n    });\r\n\r\n    app.post('/survey/questionnaire/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n\r\n      var err, questionnaire, questions;\r\n      [err, questionnaire, questions] = await Questionnaire.add(data);\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        updatedQuestions: questions,\r\n        updatedQuestionnaire: questionnaire\r\n      })\r\n    });\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default SurveyRouter;\r\n"]}