{"version":3,"sources":["../../../src/main/routers/course.js"],"names":["CourseRouter","app","init","post","req","res","next","courseId","body","data","err","statistics","Query","getStatisticsByCourse","json","result","profile","course","subject","project","studentProject","courses","teachingCourses","Course","find","teacher","belongTo","sort","createdAt","console","log","i","length","push","_id","leaveCourse","leavedCourse","updatedProfile","joinCourse","joinedCourse","editedCourse","findOneAndUpdate","$set","icon","title","endDate","new","addCourse","newCourse","Router"],"mappings":"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","file":"course.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport to from '../../to';\r\n\r\nimport User from '../../models/User.js';\r\nimport Course from '../../models/Course.js';\r\nimport Query from '../../functions/Query.js';\r\n\r\nclass CourseRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n\r\n    app.post('/course/getStatistics', async(req, res, next)=>{\r\n      const courseId = req.body.data;\r\n      //console.log(schoolId)\r\n\r\n      let err, statistics;\r\n      [err, statistics] = await Query.getStatisticsByCourse(courseId);\r\n      if(err){ return res.json({result: 'failed'})}\r\n      return res.json({result: 'success', statistics: statistics})\r\n\r\n    });\r\n\r\n    app.post('/course/getAllOfTeacher', async(req, res, next)=>{\r\n      const profile = req.body.data;\r\n      //console.log(data)\r\n\r\n      let err, course, subject, project, studentProject;\r\n      var courses = [];\r\n      var teachingCourses = [];\r\n\r\n      [err, courses] = await to(Course.find({teacher: profile.belongTo}, null, {sort: {createdAt: 'descending'}}));\r\n      if(err || courses === null){ console.log('failed to getcourses'); return res.json({ result: 'failed' })}\r\n      //console.log(courses);\r\n      for(var i=0;i<courses.length;i++){\r\n        teachingCourses.push(courses[i]._id);\r\n      }\r\n      profile['teachingCourses'] = teachingCourses;\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        courses: courses,\r\n        profile: profile\r\n      })\r\n\r\n    });\r\n\r\n    app.post('/course/leave', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      //console.log(data)\r\n\r\n      Course.leaveCourse(data, (result, leavedCourse, updatedProfile)=>{\r\n        return res.json({\r\n          result: result,\r\n          leavedCourse: leavedCourse,\r\n          updatedProfile: updatedProfile\r\n        })\r\n      })\r\n    });\r\n\r\n    app.post('/course/join', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      //console.log(data)\r\n      var err, joinedCourse, updatedProfile;\r\n\r\n      [err, joinedCourse, updatedProfile] = await Course.joinCourse(data);\r\n      if(err){ res.json({ result: 'failed' })}\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        joinedCourse: joinedCourse,\r\n        updatedProfile: updatedProfile\r\n      })\r\n\r\n    });\r\n\r\n    app.post('/course/edit', async(req, res, next)=>{\r\n      const course = req.body.data;\r\n      //console.log(data)\r\n      let err, editedCourse;\r\n      [err, editedCourse] = await to(Course.findOneAndUpdate({_id: course._id},{ $set: {\r\n        icon: course.icon,\r\n        title: course.title,\r\n        endDate: course.endDate\r\n      }}, { new: true }));\r\n\r\n      return res.json({\r\n        result: err? 'failed': 'success',\r\n        editedCourse: editedCourse\r\n      })\r\n    });\r\n\r\n    app.post('/course/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      //console.log(data)\r\n\r\n      Course.addCourse(data, (result, newCourse)=>{\r\n        return res.json({\r\n          result: result,\r\n          newCourse: newCourse\r\n        })\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default CourseRouter;\r\n"]}