{"version":3,"sources":["../../../src/main/routers/mlanghku.js"],"names":["mlanghkuRouter","app","init","mongoose","connect","db","connection","Parse","initialize","process","env","PARSE_APP_ID","DOTNET_KEY","serverURL","PARSE_SERVER","post","req","res","next","data","body","err","dataRes","query","Query","className","equalTo","field","value","find","json","result","user","User","logIn","id","pw","console","log","timestamp","runParseCloudFunction","attributes","sessionToken","jsonBody","JSON","parse","message","Math","floor","Date","getTime","urlPath","token","params","cb","indexOf","substring","url","headers","method","qs","Router"],"mappings":"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","file":"mlanghku.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nimport to from '../../to';\r\nimport Parse from 'parse/node';\r\nimport request from 'request';\r\n\r\nclass mlanghkuRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    Parse.initialize(process.env.PARSE_APP_ID, process.env.DOTNET_KEY);\r\n    Parse.serverURL = process.env.PARSE_SERVER;\r\n\r\n    app.post('/mlanghku/fetch', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n\r\n      let err, dataRes;\r\n      const query = new Parse.Query(data.className);\r\n      //query.equalTo('project', { __type: 'Pointer', className: 'Project', objectId: req.body.data.projectId });\r\n      query.equalTo(data.field, data.value);\r\n      [err, dataRes] = await to(query.find());\r\n      if(err){ res.json({ result: 'failed' }) }\r\n\r\n      res.json({\r\n        result: 'success',\r\n        data: dataRes\r\n      })\r\n    })\r\n\r\n    app.post('/mlanghku/login', async(req, res, next)=>{\r\n\r\n      const data = req.body.data;\r\n      //console.log(data);\r\n      let err, dataRes, user;\r\n      [err, user] = await to(Parse.User.logIn(data.id, data.pw));\r\n      if(err){ console.log(err); res.json({ result: 'failed to login'}); return; }\r\n      //console.log(user);\r\n\r\n      const timestamp =  this.timestamp();\r\n      //[err, dataRes] = await to(Parse.Cloud.run('RenewUser', { timestamp: timestamp }));\r\n      this.runParseCloudFunction(\"RenewUser\", user.attributes.sessionToken, { timestamp: timestamp },\r\n      (err, dataRes, body)=>{\r\n\r\n        if(err){ console.log(err); res.json({ result: 'failed to RenewUser'}); return;}\r\n\r\n        //console.log(body);\r\n        const jsonBody = JSON.parse(body);\r\n        //console.log(jsonBody);\r\n\r\n        res.json({\r\n          result: 'success',\r\n          user: user,\r\n          body: jsonBody.result\r\n        })\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  async login(id, pw){\r\n    let err, user;\r\n    [err, user] = await to(Parse.User.logIn(id, pw));\r\n    if(err){ console.log(err.message); return ['error']; }\r\n    //console.log(user.attributes);\r\n    return [null, user];\r\n  }\r\n\r\n  timestamp(){\r\n    //return '000000000';\r\n    return Math.floor(new Date().getTime() / 1000);\r\n  }\r\n\r\n  async runParseCloudFunction(urlPath, token, params, cb) {\r\n    if (!params) {\r\n        params = {};\r\n    }\r\n\r\n    //var buildVariables = config.buildVariables(buildEnvironment);\r\n    //var publicServerURL = buildVariables.publicServerURL;\r\n\r\n    urlPath = urlPath.indexOf('/') == 0 ? urlPath.substring(1) : urlPath;\r\n    var url = process.env.PARSE_SERVER + \"/functions/\" + urlPath;\r\n\r\n    var headers = {\r\n        'X-Parse-Application-Id': process.env.PARSE_APP_ID,\r\n        'X-Parse-REST-API-Key': process.env.DOTNET_KEY,\r\n        'X-Parse-Client-Key': process.env.DOTNET_KEY,\r\n        'X-Parse-Javascript-Key': process.env.DOTNET_KEY,\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n    };\r\n\r\n    if (token) {\r\n        headers['X-Parse-Session-Token'] = token;\r\n    }\r\n\r\n    //let err, res;\r\n    request({\r\n        url: url,\r\n        method: \"POST\",\r\n        headers: headers,\r\n        qs: params\r\n    }, (err, res, body)=>{\r\n      cb(err, res, body);\r\n    });\r\n  };\r\n\r\n}\r\n\r\nexport default mlanghkuRouter;\r\n"]}