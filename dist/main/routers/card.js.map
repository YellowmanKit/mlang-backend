{"version":3,"sources":["../../../src/main/routers/card.js"],"names":["ObjectId","require","Types","CardRouter","app","init","upload","get","temp","storage","mongoose","connect","db","connection","post","req","res","cardToUpdate","body","data","card","langs","err","lang","langsId","i","length","Lang","findOneAndUpdate","_id","$set","key","text","audio","new","upsert","console","log","json","result","splice","Card","icon","updatedLangs","updatedCard","list","cards","_updatedCards","grade","comment","audioComment","updatedCards","profile","_cards","_studentProfiles","findById","Profile","findOne","belongTo","author","_langs","j","find","students","next","_studentProject","_project","createdCard","createdLang","create","createdLangs","createdLangsId","StudentProject","studentProject","$push","updatedStudentProject","Router"],"mappings":"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","file":"card.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n//import multer from 'multer';\r\n\r\nimport fs from 'fs-extra';\r\nimport to from '../../to';\r\n\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Profile from '../../models/Profile.js';\r\n\r\nclass CardRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const upload = app.get('upload');\r\n    //const config = app.get('config');\r\n    //var upload = multer({ storage: config }).single('avatar')\r\n\r\n    const temp = app.get('temp');\r\n    const storage = app.get('storage');\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/card/edit', async(req, res)=>{\r\n      const cardToUpdate = req.body.data.card;\r\n      var langs = req.body.data.langs;\r\n      //console.log(cardToUpdate);\r\n      //console.log(langs);\r\n      let err, lang, card;\r\n      var langsId = [];\r\n      for(var i=0;i<langs.length;i++){\r\n        [err, lang] = await(to(Lang.findOneAndUpdate({_id: new ObjectId(langs[i]._id)},{$set:{\r\n          key: langs[i].key,\r\n          text: langs[i].text,\r\n          audio: langs[i].audio,\r\n          card: cardToUpdate._id\r\n        }}, {new: true, upsert: true})));\r\n        if(err || lang === null){ console.log('failed to update lang'); return res.json({ result: 'failed to update lang'}) }\r\n        //console.log(lang);\r\n        langs[i]._id = lang._id;\r\n        langsId.splice(0,0,langs[i]._id);\r\n      }\r\n\r\n      [err, card] = await(to(Card.findOneAndUpdate({_id: cardToUpdate._id},{$set:{\r\n        langs: langsId,\r\n        icon: cardToUpdate.icon\r\n      }}, {new: true})));\r\n      if(err || card === null){ console.log('failed to update card'); return res.json({ result: 'failed to update card'}) }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedLangs: langs,\r\n        updatedCard: card\r\n      })\r\n    });\r\n\r\n    app.post('/card/grade', async(req, res)=>{\r\n      const list = req.body.data.cards;\r\n      console.log(list);\r\n      let err, card;\r\n      var _updatedCards = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, card] = await to(Card.findOneAndUpdate({_id: list[i]}, { $set: {\r\n          grade: list[i].grade,\r\n          comment: list[i].comment,\r\n          audioComment: list[i].audioComment\r\n        }}, {new: true}));\r\n        if(err || card === null){ console.log('no such card!'); return res.json({ result: 'failed' })}\r\n        _updatedCards.splice(0,0,card);\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedCards: _updatedCards\r\n      })\r\n    });\r\n\r\n    app.post('/card/getMultiple', async(req, res)=>{\r\n      const list = req.body.data.cards;\r\n      //console.log(list);\r\n      let err, card, langs, profile;\r\n      var _cards = [];\r\n      var _studentProfiles = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, card] = await to(Card.findById(list[i]));\r\n        if(err || card === null){ console.log('no such card!'); return res.json({ result: 'failed' })}\r\n        _cards.splice(0,0,card);\r\n\r\n        [err, profile] = await to(Profile.findOne({belongTo: card.author}));\r\n        if(err || profile === null){ return res.json({ result: 'failed' })}\r\n        _studentProfiles.splice(0,0, profile);\r\n      }\r\n\r\n      var _langs = [];\r\n      for(var j=0;j<_cards.length;j++){\r\n        [err, langs] = await to(Lang.find({card: list[j]}));\r\n        if(err || langs === null || langs.length === 0){ console.log('card hv no lang!'); return res.json({ result: 'failed' })}\r\n        _langs = [..._langs, ...langs]\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        cards: _cards,\r\n        langs: _langs,\r\n        students: _studentProfiles\r\n      })\r\n    });\r\n\r\n    app.post('/card/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      var card = data.card;\r\n      var langs = data.langs;\r\n\r\n      let err, _studentProject, _project, createdCard, createdLang;\r\n\r\n      /*if(card.studentProject.project === undefined){\r\n        console.log('new student project')\r\n        [err, _studentProject] = await to(StudentProject.create({project: data.project, student: card.author}));\r\n        if(err || _studentProject === null){ return res.json({ result: \"failed\" });}\r\n        card.studentProject = _studentProject;\r\n\r\n        [err, _project] = await to(Project.findOneAndUpdate({_id: data.project._id}, { $push:{\r\n          studentProjects: _studentProject._id\r\n        }}, {new: true}));\r\n        if(err || _project === null){ return res.json({ result: \"failed\" });}\r\n        console.log(_project)\r\n      }*/\r\n\r\n      [err, createdCard] = await to(Card.create(card))\r\n      if(err || createdCard === null){ return res.json({ result: \"failed\" });}\r\n\r\n      var createdLangs = []\r\n      var createdLangsId = [];\r\n      for(var i=0;i<langs.length;i++){\r\n        langs[i].card = createdCard._id;\r\n        [err, createdLang] = await to(Lang.create(langs[i]));\r\n        if(err || createdLang === null){ return res.json({ result: \"failed\" });}\r\n        createdLangs.splice(0,0,createdLang);\r\n        createdLangsId.splice(0,0,createdLang._id);\r\n      }\r\n\r\n      [err, createdCard] = await to(Card.findOneAndUpdate({_id: createdCard._id}, { $set: {\r\n        langs: createdLangsId\r\n      }}, {new: true}))\r\n      if(err || createdCard === null){ return res.json({ result: \"failed\" });}\r\n\r\n      [err, _studentProject] = await to(StudentProject.findOneAndUpdate({_id: card.studentProject._id}, { $push: {\r\n        cards: createdCard._id\r\n      }}, {new: true}))\r\n      if(err || createdCard === null){ return res.json({ result: \"failed\" });}\r\n\r\n      res.json({\r\n        result: 'success',\r\n        card: createdCard,\r\n        langs: createdLangs,\r\n        updatedStudentProject: _studentProject\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nexport default CardRouter;\r\n"]}