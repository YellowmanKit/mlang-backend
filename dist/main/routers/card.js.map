{"version":3,"sources":["../../../src/main/routers/card.js"],"names":["ObjectId","require","Types","CardRouter","app","init","upload","get","temp","storage","mongoose","connect","db","connection","post","req","res","list","body","data","cards","console","log","err","card","_updatedCards","i","length","Card","findOneAndUpdate","_id","$set","grade","comment","audioComment","new","json","result","splice","updatedCards","langs","profile","_cards","_studentProfiles","findById","Profile","findOne","belongTo","author","_langs","j","Lang","find","students","next","_studentProject","_project","createdCard","createdLang","create","createdLangs","createdLangsId","StudentProject","studentProject","$push","updatedStudentProject","Router"],"mappings":"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","file":"card.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n//import multer from 'multer';\r\n\r\nimport fs from 'fs-extra';\r\nimport to from '../../to';\r\n\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Profile from '../../models/Profile.js';\r\n\r\nclass CardRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const upload = app.get('upload');\r\n    //const config = app.get('config');\r\n    //var upload = multer({ storage: config }).single('avatar')\r\n\r\n    const temp = app.get('temp');\r\n    const storage = app.get('storage');\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/card/update', async(req, res)=>{\r\n      const list = req.body.data.cards;\r\n      console.log(list);\r\n      let err, card;\r\n      var _updatedCards = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, card] = await to(Card.findOneAndUpdate({_id: list[i]}, { $set: {\r\n          grade: list[i].grade,\r\n          comment: list[i].comment,\r\n          audioComment: list[i].audioComment\r\n        }}, {new: true}));\r\n        if(err || card === null){ console.log('no such card!'); return res.json({ result: 'failed' })}\r\n        _updatedCards.splice(0,0,card);\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedCards: _updatedCards\r\n      })\r\n    });\r\n\r\n    app.post('/card/getMultiple', async(req, res)=>{\r\n      const list = req.body.data.cards;\r\n      //console.log(list);\r\n      let err, card, langs, profile;\r\n      var _cards = [];\r\n      var _studentProfiles = [];\r\n      for(var i=0;i<list.length;i++){\r\n        [err, card] = await to(Card.findById(list[i]));\r\n        if(err || card === null){ console.log('no such card!'); return res.json({ result: 'failed' })}\r\n        _cards.splice(0,0,card);\r\n\r\n        [err, profile] = await to(Profile.findOne({belongTo: card.author}));\r\n        if(err || profile === null){ return res.json({ result: 'failed' })}\r\n        _studentProfiles.splice(0,0, profile);\r\n      }\r\n\r\n      var _langs = [];\r\n      for(var j=0;j<_cards.length;j++){\r\n        [err, langs] = await to(Lang.find({card: list[j]}));\r\n        if(err || langs === null || langs.length === 0){ console.log('card hv no lang!'); return res.json({ result: 'failed' })}\r\n        _langs = [..._langs, ...langs]\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        cards: _cards,\r\n        langs: _langs,\r\n        students: _studentProfiles\r\n      })\r\n    });\r\n\r\n    app.post('/card/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      var card = data.card;\r\n      var langs = data.langs;\r\n\r\n      let err, _studentProject, _project, createdCard, createdLang;\r\n\r\n      /*if(card.studentProject.project === undefined){\r\n        console.log('new student project')\r\n        [err, _studentProject] = await to(StudentProject.create({project: data.project, student: card.author}));\r\n        if(err || _studentProject === null){ return res.json({ result: \"failed\" });}\r\n        card.studentProject = _studentProject;\r\n\r\n        [err, _project] = await to(Project.findOneAndUpdate({_id: data.project._id}, { $push:{\r\n          studentProjects: _studentProject._id\r\n        }}, {new: true}));\r\n        if(err || _project === null){ return res.json({ result: \"failed\" });}\r\n        console.log(_project)\r\n      }*/\r\n\r\n      [err, createdCard] = await to(Card.create(card))\r\n      if(err || createdCard === null){ return res.json({ result: \"failed\" });}\r\n\r\n      var createdLangs = []\r\n      var createdLangsId = [];\r\n      for(var i=0;i<langs.length;i++){\r\n        langs[i].card = createdCard._id;\r\n        [err, createdLang] = await to(Lang.create(langs[i]));\r\n        if(err || createdLang === null){ return res.json({ result: \"failed\" });}\r\n        createdLangs.splice(0,0,createdLang);\r\n        createdLangsId.splice(0,0,createdLang._id);\r\n      }\r\n\r\n      [err, createdCard] = await to(Card.findOneAndUpdate({_id: createdCard._id}, { $set: {\r\n        langs: createdLangsId\r\n      }}, {new: true}))\r\n      if(err || createdCard === null){ return res.json({ result: \"failed\" });}\r\n\r\n      [err, _studentProject] = await to(StudentProject.findOneAndUpdate({_id: card.studentProject._id}, { $push: {\r\n        cards: createdCard._id\r\n      }}, {new: true}))\r\n      if(err || createdCard === null){ return res.json({ result: \"failed\" });}\r\n\r\n      res.json({\r\n        result: 'success',\r\n        card: createdCard,\r\n        langs: createdLangs,\r\n        updatedStudentProject: _studentProject\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nexport default CardRouter;\r\n"]}