{"version":3,"sources":["../../../src/main/routers/card.js"],"names":["ObjectId","require","Types","CardRouter","app","init","upload","get","temp","storage","mongoose","connect","db","connection","post","req","res","cardId","body","data","err","card","Card","findOneAndUpdate","_id","$set","studentRead","new","console","log","json","result","updatedCard","cardToUpdate","langs","lang","langsId","i","length","Lang","key","text","audio","upsert","splice","icon","updatedLangs","cards","featuredCount","profile","studentProject","updatedCards","grade","comment","audioComment","resubmitted","count","author","Profile","belongTo","updatedProfile","_cards","_profiles","findById","findOne","_langs","j","find","profiles","next","project","createdCard","createdLang","cardCount","create","createdLangs","createdLangsId","isTeacher","StudentProject","student","$push","Project","studentProjects","some","sp","equals","resubmitCard","updatedStudentProject","updatedProject","Router"],"mappings":"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","file":"card.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n//import multer from 'multer';\r\n\r\nimport fs from 'fs-extra';\r\nimport to from '../../to';\r\n\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Profile from '../../models/Profile.js';\r\n\r\nclass CardRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const upload = app.get('upload');\r\n    //const config = app.get('config');\r\n    //var upload = multer({ storage: config }).single('avatar')\r\n\r\n    const temp = app.get('temp');\r\n    const storage = app.get('storage');\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/card/studentRead', async(req,res)=>{\r\n      const cardId = req.body.data.cardId;\r\n      let err, card;\r\n      [err, card] = await(to(Card.findOneAndUpdate({_id: cardId},{$set:{\r\n        studentRead: true\r\n      }}, {new: true})));\r\n      if(err || card === null){ console.log('failed to update card'); return res.json({ result: 'failed to update card'}) }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedCard: card\r\n      })\r\n    })\r\n\r\n    app.post('/card/edit', async(req, res)=>{\r\n      const cardToUpdate = req.body.data.card;\r\n      var langs = req.body.data.langs;\r\n      //console.log(cardToUpdate);\r\n      //console.log(langs);\r\n      let err, lang, card;\r\n      var langsId = [];\r\n      for(var i=0;i<langs.length;i++){\r\n        [err, lang] = await(to(Lang.findOneAndUpdate({_id: langs[i]._id},{$set:{\r\n          key: langs[i].key,\r\n          text: langs[i].text,\r\n          audio: langs[i].audio,\r\n          card: cardToUpdate._id\r\n        }}, {new: true, upsert: true})));\r\n        if(err || lang === null){ console.log('failed to update lang'); return res.json({ result: 'failed to update lang'}) }\r\n        //console.log(lang);\r\n        langs[i]._id = lang._id;\r\n        langsId.splice(0,0,langs[i]._id);\r\n      }\r\n\r\n      [err, card] = await(to(Card.findOneAndUpdate({_id: cardToUpdate._id},{$set:{\r\n        langs: langsId,\r\n        icon: cardToUpdate.icon\r\n      }}, {new: true})));\r\n      if(err || card === null){ console.log('failed to update card'); return res.json({ result: 'failed to update card'}) }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedLangs: langs,\r\n        updatedCard: card\r\n      })\r\n    });\r\n\r\n    app.post('/card/grade', async(req, res)=>{\r\n      const data = req.body.data;\r\n      const cards = data.cards;\r\n      //console.log(cards);\r\n      let err, card, featuredCount, profile, studentProject;\r\n      var updatedCards = [];\r\n      for(var i=0;i<cards.length;i++){\r\n        [err, card] = await to(Card.findOneAndUpdate({_id: cards[i]}, { $set: {\r\n          grade: cards[i].grade,\r\n          comment: cards[i].comment,\r\n          audioComment: cards[i].audioComment,\r\n          resubmitted: false,\r\n          studentRead: false\r\n        }}, {new: true}));\r\n        if(err || card === null){ console.log('no such card!'); return res.json({ result: 'failed' })}\r\n        updatedCards.splice(0,0,card);\r\n      }\r\n\r\n      if(cards.length > 0){\r\n        [err, featuredCount] = await to(Card.count({author: cards[0].author, grade: 'featured'}));\r\n        if(err || featuredCount === null){ console.log('err on getting featuredCount!'); }\r\n\r\n        [err, profile] = await to(Profile.findOneAndUpdate({belongTo: cards[0].author}, { $set:{\r\n          featuredCount: featuredCount\r\n        }}, {new: true}))\r\n        if(err || profile === null){ console.log('err on updating featuredCount!'); }\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedCards: updatedCards,\r\n        updatedProfile: profile\r\n      })\r\n    });\r\n\r\n    app.post('/card/getMultiple', async(req, res)=>{\r\n      const cards = req.body.data.cards;\r\n      //console.log(cards);\r\n      let err, card, langs, profile;\r\n      var _cards = [];\r\n      var _profiles = [];\r\n      for(var i=0;i<cards.length;i++){\r\n        [err, card] = await to(Card.findById(cards[i]));\r\n        if(err || card === null){ console.log('no such card!'); return res.json({ result: 'failed' })}\r\n        _cards.splice(0,0,card);\r\n\r\n        [err, profile] = await to(Profile.findOne({belongTo: card.author}));\r\n        if(err || profile === null){ return res.json({ result: 'failed' })}\r\n        _profiles.splice(0,0, profile);\r\n      }\r\n\r\n      var _langs = [];\r\n      for(var j=0;j<_cards.length;j++){\r\n        [err, langs] = await to(Lang.find({card: cards[j]}));\r\n        if(err || langs === null || langs.length === 0){ console.log('card hv no lang!'); return res.json({ result: 'failed' })}\r\n        _langs = [..._langs, ...langs]\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        cards: _cards,\r\n        langs: _langs,\r\n        profiles: _profiles\r\n      })\r\n    });\r\n\r\n    app.post('/card/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      var card = data.card;\r\n      var langs = data.langs;\r\n\r\n      let err, project, studentProject, createdCard, createdLang, cardCount, profile;\r\n\r\n      //console.log(card);\r\n\r\n      [err, createdCard] = await to(Card.create(card))\r\n      if(err || createdCard === null){ console.log(err); return res.json({ result: \"failed to create card\" });}\r\n\r\n      var createdLangs = []\r\n      var createdLangsId = [];\r\n      for(var i=0;i<langs.length;i++){\r\n        langs[i].card = createdCard._id;\r\n        [err, createdLang] = await to(Lang.create(langs[i]));\r\n        if(err || createdLang === null){ return res.json({ result: \"failed to create lang\" });}\r\n        createdLangs.splice(0,0,createdLang);\r\n        createdLangsId.splice(0,0,createdLang._id);\r\n      }\r\n\r\n      [err, createdCard] = await to(Card.findOneAndUpdate({_id: createdCard._id}, { $set: {\r\n        langs: createdLangsId\r\n      }}, {new: true}))\r\n      if(err || createdCard === null){ return res.json({ result: \"failed to update langs in card\" });}\r\n\r\n      if(data.isTeacher){\r\n        [err, studentProject] = await to(StudentProject.findOneAndUpdate({student: card.author, project: data.project }, {$push: {\r\n          cards: createdCard._id\r\n        }}, {upsert: true, new: true}))\r\n        if(err || studentProject === null){ return res.json({ result: \"failed to create student project\" });}\r\n\r\n        [err, project] = await to(Project.findById(studentProject.project));\r\n        if(err || project === null){ return res.json({ result: \"failed to find project\" });}\r\n\r\n        if(!project.studentProjects.some(sp=>{return sp.equals(studentProject._id)}) ){\r\n          [err, project] = await to(Project.findOneAndUpdate({_id: studentProject.project}, { $push:{\r\n            studentProjects: studentProject._id\r\n          }}, {new: true}));\r\n          if(err || project === null){ return res.json({ result: \"failed to update project\" });}\r\n        }\r\n      }else{\r\n        [err, studentProject] = await to(StudentProject.findOneAndUpdate({_id: card.studentProject._id}, { $push: {\r\n          cards: createdCard._id\r\n        }}, {new: true}))\r\n        if((err || createdCard === null) && !data.isTeacher){ return res.json({ result: \"failed to find student project\" });}\r\n      }\r\n\r\n      [err, cardCount] = await to(Card.count({author: card.author}));\r\n      if(!err && cardCount){\r\n        [err, profile] = await to(Profile.findOneAndUpdate({belongTo: card.author}, { $set:{\r\n          cardCount: cardCount\r\n        }}, {new: true}))\r\n      }\r\n\r\n      let resubmitCard;\r\n      if(data.resubmitCard){\r\n        [err, resubmitCard] = await to(Card.findOneAndUpdate({_id: data.resubmitCard}, {$set:{resubmitted: true}}));\r\n        if(err || !resubmitCard){ return res.json({ result: \"failed to update resubmitCard!\" });}\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        card: createdCard,\r\n        langs: createdLangs,\r\n        updatedStudentProject: studentProject,\r\n        updatedProject: project,\r\n        updatedProfile: profile,\r\n        updatedCard: resubmitCard,\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default CardRouter;\r\n"]}