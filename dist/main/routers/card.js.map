{"version":3,"sources":["../../../src/main/routers/card.js"],"names":["ObjectId","require","Types","CardRouter","app","init","upload","get","temp","storage","mongoose","connect","db","connection","post","req","res","cardToUpdate","body","data","card","langs","err","lang","langsId","i","length","Lang","findOneAndUpdate","_id","$set","key","text","audio","new","upsert","console","log","json","result","splice","Card","icon","updatedLangs","updatedCard","cards","featuredCount","profile","project","studentProject","_updatedCards","grade","comment","audioComment","count","author","Profile","belongTo","Project","projectId","teacherAlert","StudentProject","studentProjectId","studentAlert","updatedCards","updatedProfile","updatedProject","_cards","_profiles","findById","findOne","_langs","j","find","profiles","next","createdCard","createdLang","cardCount","create","createdLangs","createdLangsId","isTeacher","student","$push","studentProjects","some","sp","equals","updatedStudentProject","Router"],"mappings":"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","file":"card.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n//import multer from 'multer';\r\n\r\nimport fs from 'fs-extra';\r\nimport to from '../../to';\r\n\r\nimport Card from '../../models/Card.js';\r\nimport Lang from '../../models/Lang.js';\r\nimport Project from '../../models/Project.js';\r\nimport StudentProject from '../../models/StudentProject.js';\r\nimport Profile from '../../models/Profile.js';\r\n\r\nclass CardRouter extends Router {\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const upload = app.get('upload');\r\n    //const config = app.get('config');\r\n    //var upload = multer({ storage: config }).single('avatar')\r\n\r\n    const temp = app.get('temp');\r\n    const storage = app.get('storage');\r\n    mongoose.connect('mongodb://localhost/mlang');\r\n    var db = mongoose.connection;\r\n\r\n    app.post('/card/edit', async(req, res)=>{\r\n      const cardToUpdate = req.body.data.card;\r\n      var langs = req.body.data.langs;\r\n      //console.log(cardToUpdate);\r\n      //console.log(langs);\r\n      let err, lang, card;\r\n      var langsId = [];\r\n      for(var i=0;i<langs.length;i++){\r\n        [err, lang] = await(to(Lang.findOneAndUpdate({_id: new ObjectId(langs[i]._id)},{$set:{\r\n          key: langs[i].key,\r\n          text: langs[i].text,\r\n          audio: langs[i].audio,\r\n          card: cardToUpdate._id\r\n        }}, {new: true, upsert: true})));\r\n        if(err || lang === null){ console.log('failed to update lang'); return res.json({ result: 'failed to update lang'}) }\r\n        //console.log(lang);\r\n        langs[i]._id = lang._id;\r\n        langsId.splice(0,0,langs[i]._id);\r\n      }\r\n\r\n      [err, card] = await(to(Card.findOneAndUpdate({_id: cardToUpdate._id},{$set:{\r\n        langs: langsId,\r\n        icon: cardToUpdate.icon\r\n      }}, {new: true})));\r\n      if(err || card === null){ console.log('failed to update card'); return res.json({ result: 'failed to update card'}) }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedLangs: langs,\r\n        updatedCard: card\r\n      })\r\n    });\r\n\r\n    app.post('/card/grade', async(req, res)=>{\r\n      const data = req.body.data;\r\n      const cards = data.cards;\r\n      //console.log(cards);\r\n      let err, card, featuredCount, profile, project, studentProject;\r\n      var _updatedCards = [];\r\n      for(var i=0;i<cards.length;i++){\r\n        [err, card] = await to(Card.findOneAndUpdate({_id: cards[i]}, { $set: {\r\n          grade: cards[i].grade,\r\n          comment: cards[i].comment,\r\n          audioComment: cards[i].audioComment\r\n        }}, {new: true}));\r\n        if(err || card === null){ console.log('no such card!'); return res.json({ result: 'failed' })}\r\n        _updatedCards.splice(0,0,card);\r\n      }\r\n\r\n      if(cards.length > 0){\r\n        [err, featuredCount] = await to(Card.count({author: cards[0].author, grade: 'featured'}));\r\n        if(err || featuredCount === null){ console.log('err on getting featuredCount!'); }\r\n\r\n        [err, profile] = await to(Profile.findOneAndUpdate({belongTo: cards[0].author}, { $set:{\r\n          featuredCount: featuredCount\r\n        }}, {new: true}))\r\n        if(err || profile === null){ console.log('err on updating featuredCount!'); }\r\n      }\r\n\r\n      [err, project] = await to(Project.findOneAndUpdate({_id: data.projectId}, {$set: {\r\n        teacherAlert: false\r\n      }}, {new: true}))\r\n      if(err || project === null){ console.log('err on updating teacherAlert!'); }\r\n\r\n      [err, studentProject] = await to(StudentProject.findOneAndUpdate({_id: data.studentProjectId}, {$set: {\r\n        studentAlert: true\r\n      }}, {new: true}))\r\n      if(err || studentProject === null){ console.log('err on updating teacherAlert!'); }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        updatedCards: _updatedCards,\r\n        updatedProfile: profile,\r\n        updatedProject: project\r\n      })\r\n    });\r\n\r\n    app.post('/card/getMultiple', async(req, res)=>{\r\n      const cards = req.body.data.cards;\r\n      //console.log(cards);\r\n      let err, card, langs, profile;\r\n      var _cards = [];\r\n      var _profiles = [];\r\n      for(var i=0;i<cards.length;i++){\r\n        [err, card] = await to(Card.findById(cards[i]));\r\n        if(err || card === null){ console.log('no such card!'); return res.json({ result: 'failed' })}\r\n        _cards.splice(0,0,card);\r\n\r\n        [err, profile] = await to(Profile.findOne({belongTo: card.author}));\r\n        if(err || profile === null){ return res.json({ result: 'failed' })}\r\n        _profiles.splice(0,0, profile);\r\n      }\r\n\r\n      var _langs = [];\r\n      for(var j=0;j<_cards.length;j++){\r\n        [err, langs] = await to(Lang.find({card: cards[j]}));\r\n        if(err || langs === null || langs.length === 0){ console.log('card hv no lang!'); return res.json({ result: 'failed' })}\r\n        _langs = [..._langs, ...langs]\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        cards: _cards,\r\n        langs: _langs,\r\n        profiles: _profiles\r\n      })\r\n    });\r\n\r\n    app.post('/card/add', async(req, res, next)=>{\r\n      const data = req.body.data;\r\n      var card = data.card;\r\n      var langs = data.langs;\r\n\r\n      let err, project, studentProject, createdCard, createdLang, cardCount, profile;\r\n\r\n      //console.log(card);\r\n\r\n      [err, createdCard] = await to(Card.create(card))\r\n      if(err || createdCard === null){ console.log(err); return res.json({ result: \"failed to create card\" });}\r\n\r\n      var createdLangs = []\r\n      var createdLangsId = [];\r\n      for(var i=0;i<langs.length;i++){\r\n        langs[i].card = createdCard._id;\r\n        [err, createdLang] = await to(Lang.create(langs[i]));\r\n        if(err || createdLang === null){ return res.json({ result: \"failed to create lang\" });}\r\n        createdLangs.splice(0,0,createdLang);\r\n        createdLangsId.splice(0,0,createdLang._id);\r\n      }\r\n\r\n      [err, createdCard] = await to(Card.findOneAndUpdate({_id: createdCard._id}, { $set: {\r\n        langs: createdLangsId\r\n      }}, {new: true}))\r\n      if(err || createdCard === null){ return res.json({ result: \"failed to update langs in card\" });}\r\n\r\n      if(data.isTeacher){\r\n        [err, studentProject] = await to(StudentProject.findOneAndUpdate({student: card.author, project: data.project }, {$push: {\r\n          cards: createdCard._id\r\n        }}, {upsert: true, new: true}))\r\n        if(err || studentProject === null){ return res.json({ result: \"failed to create student project\" });}\r\n\r\n        [err, project] = await to(Project.findById(studentProject.project));\r\n        if(err || project === null){ return res.json({ result: \"failed to find project\" });}\r\n\r\n        if(!project.studentProjects.some(sp=>{return sp.equals(studentProject._id)}) ){\r\n          [err, project] = await to(Project.findOneAndUpdate({_id: studentProject.project}, { $push:{\r\n            studentProjects: studentProject._id\r\n          }}, {new: true}));\r\n          if(err || project === null){ return res.json({ result: \"failed to update project\" });}\r\n        }\r\n\r\n      }else{\r\n        [err, studentProject] = await to(StudentProject.findOneAndUpdate({_id: card.studentProject._id}, { $push: {\r\n          cards: createdCard._id\r\n        }}, {new: true}))\r\n        if((err || createdCard === null) && !data.isTeacher){ return res.json({ result: \"failed to find student project\" });}\r\n\r\n        [err, project] = await to(Project.findOneAndUpdate({_id: studentProject.project}, {$set:{\r\n          teacherAlert: true\r\n        }}))\r\n        if(err || project === null){ console.log('Error when updating project alert!') }\r\n      }\r\n\r\n      [err, cardCount] = await to(Card.count({author: card.author}));\r\n      if(!err && cardCount){\r\n        [err, profile] = await to(Profile.findOneAndUpdate({belongTo: card.author}, { $set:{\r\n          cardCount: cardCount\r\n        }}, {new: true}))\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        card: createdCard,\r\n        langs: createdLangs,\r\n        updatedStudentProject: studentProject,\r\n        updatedProject: project,\r\n        updatedProfile: profile\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default CardRouter;\r\n"]}