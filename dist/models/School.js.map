{"version":3,"sources":["../../src/models/School.js"],"names":["ObjectId","mongoose","Schema","Types","schoolSchema","admin","type","required","icon","String","name","description","default","createdAt","Date","code","joinedTeachers","joinedStudents","School","module","exports","model","getByPublishes","publishes","err","school","schools","i","length","findOne","_id","getByUser","userId","profile","supervisingSchools","joinedSchools","find","res","json","result","push","findById","joinSchool","data","schoolToJoin","updatedProfile","toPush","user","findOneAndUpdate","$push","new","Profile","belongTo","addSchool","newSchool","cb","newCode","randomString","generate","charset","create","console","log","codeExist"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;AAEA,IAAIA,WAAWC,mBAASC,MAAT,CAAgBC,KAAhB,CAAsBH,QAArC;AACA,IAAII,eAAeH,mBAASC,MAAT,CAAgB;AACjCG,SAAO;AACLC,UAAMN,QADD;AAELO,cAAU;AAFL,GAD0B;AAKjCC,QAAM;AACJF,UAAMG;AADF,GAL2B;AAQjCC,QAAM;AACJJ,UAAMG,MADF;AAEJF,cAAU;AAFN,GAR2B;AAYjCI,eAAa;AACXL,UAAMG,MADK;AAEXG,aAAS;AAFE,GAZoB;AAgBjCC,aAAW;AACTP,UAAMQ;AADG,GAhBsB;AAmBjCC,QAAM;AACJT,UAAMG,MADF;AAEJF,cAAU;AAFN,GAnB2B;AAuBjCS,kBAAgB,CAAChB,QAAD,CAvBiB;AAwBjCiB,kBAAgB,CAACjB,QAAD;AAxBiB,CAAhB,CAAnB;;AA2BA,IAAIkB,SAASC,OAAOC,OAAP,GAAiBnB,mBAASoB,KAAT,CAAe,QAAf,EAAwBjB,YAAxB,CAA9B;;AAEAe,OAAOC,OAAP,CAAeE,cAAf;AAAA,qEAAgC,iBAAOC,SAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC1BC,eAD0B,WACrBC,MADqB;AAE1BC,mBAF0B,GAEhB,EAFgB;AAItBC,aAJsB,GAIpB,CAJoB;;AAAA;AAAA,kBAIlBA,IAAEJ,UAAUK,MAJM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKN,kBAAGV,OAAOW,OAAP,CAAe,EAAEC,KAAKP,UAAUI,CAAV,EAAaF,MAApB,EAAf,CAAH,CALM;;AAAA;AAAA;AAAA;AAK3BD,eAL2B;AAKtBC,kBALsB;;AAM5BC,mDAAcA,OAAd,IAAuBD,MAAvB;;AAN4B;AAICE,eAJD;AAAA;AAAA;;AAAA;AAAA,6CAQvB,CAACH,GAAD,EAAME,OAAN,CARuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;AAWAP,OAAOC,OAAP,CAAeW,SAAf;AAAA,sEAA2B,kBAAOC,MAAP,EAAeC,OAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBT,eADqB,WAChBC,MADgB;AAErBC,mBAFqB,GAEX,EAFW;AAGrBQ,8BAHqB,GAGA,EAHA;AAIrBC,yBAJqB,GAILF,QAAQE,aAJH;AAAA;AAAA,mBAMF,kBAAGjB,OAAOkB,IAAP,CAAY,EAAC/B,OAAO2B,MAAR,EAAZ,CAAH,CANE;;AAAA;AAAA;AAAA;AAMxBR,eANwB;AAMnBE,mBANmB;;AAAA,kBAOtBF,OAAOE,YAAY,IAPG;AAAA;AAAA;AAAA;;AAAA,8CAOWW,IAAIC,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAPX;;AAAA;AAQzB,iBAAQZ,CAAR,GAAU,CAAV,EAAYA,IAAED,QAAQE,MAAtB,EAA6BD,GAA7B,EAAiC;AAC/BO,iCAAmBM,IAAnB,CAAwBd,QAAQC,CAAR,EAAWG,GAAnC;AACD;;AAEOH,aAZiB,GAYf,CAZe;;AAAA;AAAA,kBAYbA,IAAEQ,cAAcP,MAZH;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaD,kBAAGV,OAAOuB,QAAP,CAAgBN,cAAcR,CAAd,CAAhB,CAAH,CAbC;;AAAA;AAAA;AAAA;AAatBH,eAbsB;AAajBC,kBAbiB;;AAcvBC,mDAAcA,OAAd,IAAuBD,MAAvB;;AAduB;AAYUE,eAZV;AAAA;AAAA;;AAAA;AAAA,8CAiBlB,CAACH,GAAD,EAAME,OAAN,EAAeQ,kBAAf,CAjBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;AAuBAf,OAAOC,OAAP,CAAesB,UAAf;AAAA,sEAA4B,kBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBnB,eADsB,WACjBoB,YADiB,WACHC,cADG;AAGpBC,kBAHoB,GAI1BH,KAAKI,IAAL,CAAUzC,IAAV,KAAmB,SAAnB,GAA8B,EAAEU,gBAAgB2B,KAAKI,IAAL,CAAUjB,GAA5B,EAA9B,GACAa,KAAKI,IAAL,CAAUzC,IAAV,KAAmB,SAAnB,GAA8B,EAAEW,gBAAgB0B,KAAKI,IAAL,CAAUjB,GAA5B,EAA9B,GACA,EAN0B;AAAA;AAAA,mBAQE,kBAAGZ,OAAO8B,gBAAP,CAAwB,EAACjC,MAAM4B,KAAK5B,IAAZ,EAAxB,EAA2C,EAAEkC,OAAOH,MAAT,EAA3C,EAA8D,EAACI,KAAK,IAAN,EAA9D,CAAH,CARF;;AAAA;AAAA;AAAA;AAQzB1B,eARyB;AAQpBoB,wBARoB;AAAA;AAAA,mBAUI,kBAAGO,kBAAQH,gBAAR,CAAyB,EAACI,UAAUT,KAAKI,IAAL,CAAUjB,GAArB,EAAzB,EAAoD,EAAEmB,OAAO;AAC5Fd,+BAAeS,aAAad;AADgE,eAAT,EAApD,EAE7B,EAACoB,KAAK,IAAN,EAF6B,CAAH,CAVJ;;AAAA;AAAA;AAAA;AAUzB1B,eAVyB;AAUpBqB,0BAVoB;AAAA,8CAcnB,CAACrB,GAAD,EAAMoB,YAAN,EAAoBC,cAApB,CAdmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AAiBA1B,OAAOC,OAAP,CAAeiC,SAAf;AAAA,uEAA2B,kBAAOC,SAAP,EAAkBC,EAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrB/B,eADqB,WAChBC,MADgB;AAGrB+B,mBAHqB,GAGX,EAHW;AAIjB7B,aAJiB,GAIf,CAJe;;AAAA;AAAA,kBAIbA,IAAE,EAJW;AAAA;AAAA;AAAA;;AAKvB6B,sBAAUC,uBAAaC,QAAb,CAAsB;AAC9B9B,sBAAQ,CADsB;AAE9B+B,uBAAS;AAFqB,aAAtB,CAAV;;AALuB;AAAA,mBAUD,kBAAGzC,OAAOW,OAAP,CAAe,EAACd,MAAMyC,OAAP,EAAf,CAAH,CAVC;;AAAA;AAAA;AAAA;AAUtBhC,eAVsB;AAUjBC,kBAViB;;AAAA,kBAWpB,CAACD,GAAD,IAAQC,WAAW,IAXC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAWc;;AAXd;AAIRE,eAJQ;AAAA;AAAA;;AAAA;;AAczB2B,sBAAU,MAAV,IAAoBE,OAApB;AACAF,sBAAU,WAAV,IAAyB,IAAIxC,IAAJ,EAAzB;;AAfyB;AAAA,mBAiBH,kBAAGI,OAAO0C,MAAP,CAAcN,SAAd,CAAH,CAjBG;;AAAA;AAAA;AAAA;AAiBxB9B,eAjBwB;AAiBnBC,kBAjBmB;;AAAA,iBAkBtBD,GAlBsB;AAAA;AAAA;AAAA;;AAkBhB+B,eAAG,QAAH,EAAcM,QAAQC,GAAR,CAAYtC,GAAZ,EAlBE;;AAAA;;AAoBzB+B,eAAG,SAAH,EAAc9B,MAAd;;AApByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAuBAN,OAAOC,OAAP,CAAe2C,SAAf;AAAA,uEAA2B,kBAAOhD,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBS,eADqB,WAChBC,MADgB;AAAA;AAAA,mBAEH,kBAAGP,OAAOW,OAAP,CAAe,EAACd,MAAMA,IAAP,EAAf,CAAH,CAFG;;AAAA;AAAA;AAAA;AAExBS,eAFwB;AAEnBC,kBAFmB;;AAAA,kBAGtBD,OAAO,CAACC,MAHc;AAAA;AAAA;AAAA;;AAAA,8CAGE,KAHF;;AAAA;AAAA,8CAIlB,IAJkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA","file":"School.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport to from'../to';\r\n\r\nimport Profile from './Profile';\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar schoolSchema = mongoose.Schema({\r\n  admin: {\r\n    type: ObjectId,\r\n    required: true\r\n  },\r\n  icon: {\r\n    type: String\r\n  },\r\n  name: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  description: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  createdAt: {\r\n    type: Date\r\n  },\r\n  code: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  joinedTeachers: [ObjectId],\r\n  joinedStudents: [ObjectId]\r\n})\r\n\r\nvar School = module.exports = mongoose.model('school',schoolSchema);\r\n\r\nmodule.exports.getByPublishes = async (publishes) =>{\r\n  let err, school;\r\n  let schools = [];\r\n\r\n  for(var i=0;i<publishes.length;i++){\r\n    [err, school] = await to(School.findOne({ _id: publishes[i].school }));\r\n    schools = [...schools, school];\r\n  }\r\n  return [err, schools];\r\n}\r\n\r\nmodule.exports.getByUser = async (userId, profile) =>{\r\n  let err, school;\r\n  let schools = [];\r\n  let supervisingSchools = [];\r\n  let joinedSchools = profile.joinedSchools;\r\n\r\n  [err, schools] = await(to(School.find({admin: userId})));\r\n  if(err || schools === null){ return res.json({ result: \"failed\" });}\r\n  for(var i=0;i<schools.length;i++){\r\n    supervisingSchools.push(schools[i]._id);\r\n  }\r\n\r\n  for(var i=0;i<joinedSchools.length;i++){\r\n    [err, school] = await to(School.findById(joinedSchools[i]));\r\n    schools = [...schools, school];\r\n  }\r\n\r\n  return [err, schools, supervisingSchools];\r\n}\r\n\r\n/*module.exports.leaveSchool = async (data, cb)=>{\r\n  let err, schoolToLeave, updatedProfile, updatedUser;\r\n\r\n  [err, schoolToLeave] = await to(School.findOneAndUpdate({code: data.code}, { $pull: {\r\n    joinedTeachers: data.userId\r\n  }}, {new: true}))\r\n  if(err || schoolToLeave === null){ cb('failed'); };\r\n\r\n  [err, updatedProfile] = await to(Profile.findOneAndUpdate({belongTo: data.userId}, { $pull: {\r\n    joinedSchools: schoolToLeave._id\r\n  }}, {new: true}))\r\n  if(err || updatedProfile === null){ cb('failed'); };\r\n\r\n  if(updatedProfile.joinedSchools.length === 0){\r\n    [err, updatedUser] = await to(User.findOneAndUpdate({_id: data.userId}, { $set: {\r\n      type: 'student'\r\n    }}, {new: true}))\r\n    if(err || updatedUser === null){ cb('failed'); };\r\n  }\r\n\r\n  cb('success', schoolToLeave, updatedProfile, updatedUser)\r\n}*/\r\n\r\nmodule.exports.joinSchool = async (data)=>{\r\n  let err, schoolToJoin, updatedProfile;\r\n\r\n  const toPush =\r\n  data.user.type === 'teacher'? { joinedTeachers: data.user._id }:\r\n  data.user.type === 'student'? { joinedStudents: data.user._id }:\r\n  {};\r\n\r\n  [err, schoolToJoin] = await to(School.findOneAndUpdate({code: data.code}, { $push: toPush }, {new: true}));\r\n\r\n  [err, updatedProfile] = await to(Profile.findOneAndUpdate({belongTo: data.user._id}, { $push: {\r\n    joinedSchools: schoolToJoin._id\r\n  }}, {new: true}));\r\n\r\n  return [err, schoolToJoin, updatedProfile]\r\n}\r\n\r\nmodule.exports.addSchool = async (newSchool, cb)=>{\r\n  let err, school;\r\n\r\n  var newCode = '';\r\n  for(var i=0;i<99;i++){\r\n    newCode = randomString.generate({\r\n      length: 5,\r\n      charset: 'ABCDEFGHJKMNOPQRSTUVWXYZ1234567890'\r\n    });\r\n\r\n    [err, school] = await to(School.findOne({code: newCode}));\r\n    if(!err && school === null){ break; };\r\n  }\r\n\r\n  newSchool['code'] = newCode;\r\n  newSchool['createdAt'] = new Date();\r\n\r\n  [err, school] = await to(School.create(newSchool));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  cb('success', school)\r\n}\r\n\r\nmodule.exports.codeExist = async (code)=>{\r\n  let err, school;\r\n  [err, school] = await to(School.findOne({code: code}));\r\n  if(err || !school){ return false; }\r\n  return true;\r\n}\r\n"]}