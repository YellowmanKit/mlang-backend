{"version":3,"sources":["../../src/models/User.js"],"names":["dotenv","config","schema","mongoose","Schema","id","type","String","pw","email","default","createdAt","Date","User","module","exports","model","resetPassword","_email","cb","err","user","info","findOne","randomPassword","randomString","generate","mailOptions","from","process","env","EMAIL_ID","to","subject","html","transporter","sendMail","console","log","set","save","acquireNewAccount","existUser","defaultId","substring","lastIndexOf","newUser","profile","create","newProfile","belongTo","_id","Profile","nodemailer","createTransport","host","HOST","port","secure","auth","pass","EMAIL_PW"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;;;AAFAA,iBAAOC,MAAP;;AAIA,IAAIC,SAASC,mBAASC,MAAT,CAAgB;AAC3BC,MAAI;AACFC,UAAMC;AADJ,GADuB;AAI3BC,MAAI;AACFF,UAAMC;AADJ,GAJuB;AAO3BE,SAAO;AACLH,UAAMC;AADD,GAPoB;AAU3BD,QAAM;AACJA,UAAMC,MADF;AAEJG,aAAS;AAFL,GAVqB;AAc3BC,aAAW;AACTL,UAAMM,IADG;AAETF,aAAS,IAAIE,IAAJ;AAFA;AAdgB,CAAhB,CAAb;;AAoBA,IAAIC,OAAOC,OAAOC,OAAP,GAAiBZ,mBAASa,KAAT,CAAe,MAAf,EAAsBd,MAAtB,CAA5B;;AAGAY,OAAOC,OAAP,CAAeE,aAAf;AAAA,qEAA+B,iBAAOC,MAAP,EAAeC,EAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBC,eADyB,WACpBC,IADoB,WACdC,IADc;AAAA;AAAA,mBAGV,kBAAGT,KAAKU,OAAL,CAAa,EAACd,OAAOS,MAAR,EAAb,CAAH,CAHU;;AAAA;AAAA;AAAA;AAG5BE,eAH4B;AAGxBC,gBAHwB;;AAAA,kBAI1BD,OAAOC,SAAS,IAJU;AAAA;AAAA;AAAA;;AAIHF,eAAG,QAAH,EAJG;;AAAA;AAIoB;;AAE3CK,0BANuB,GAMNC,uBAAaC,QAAb,CAAsB,CAAtB,CANM;AAOvBC,uBAPuB,GAOT;AAChBC,oBAAMC,QAAQC,GAAR,CAAYC,QADF;AAEhBC,kBAAId,MAFY;AAGhBe,uBAAS,6CAHO;AAIhBC,oBACA,sBACA,gCADA,GAEA,wBAFA,GAE4Bb,KAAKhB,EAFjC,GAEsC,MAFtC,GAGA,iCAHA,GAGoCmB,cAHpC,GAGqD,UAHrD,GAIA,kBAJA,GAKA,gBALA,GAMA;AAXgB,aAPS;AAAA;AAAA,mBAqBT,kBAAGW,YAAYC,QAAZ,CAAqBT,WAArB,CAAH,CArBS;;AAAA;AAAA;AAAA;AAqB5BP,eArB4B;AAqBvBE,gBArBuB;;AAAA,iBAsB1BF,GAtB0B;AAAA;AAAA;AAAA;;AAsBpBD,eAAG,QAAH,EAAckB,QAAQC,GAAR,CAAY,0BAAZ,EAtBM;;AAAA;;AAwB7BjB,iBAAKkB,GAAL,CAAS,EAAE/B,IAAIgB,cAAN,EAAT;AACAH,iBAAKmB,IAAL;AACArB,eAAG,SAAH;;AA1B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AA6BAL,OAAOC,OAAP,CAAe0B,iBAAf;AAAA,sEAAmC,kBAAOvB,MAAP,EAAeC,EAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTN,KAAKU,OAAL,CAAa,EAACd,OAAOS,MAAR,EAAb,CADS;;AAAA;AAC3BwB,qBAD2B;;AAAA,kBAE9BA,cAAc,IAFgB;AAAA;AAAA;AAAA;;AAETvB,eAAG,QAAH,EAFS;;AAAA;AAI3BK,0BAJ2B,GAIVC,uBAAaC,QAAb,CAAsB,CAAtB,CAJU;AAK7BiB,qBAL6B,GAKjBzB,OAAO0B,SAAP,CAAiB,CAAjB,EAAoB1B,OAAO2B,WAAP,CAAmB,GAAnB,CAApB,CALiB;AAM3BC,mBAN2B,GAMjB;AACdzC,kBAAIsC,SADU;AAEdnC,kBAAIgB,cAFU;AAGdf,qBAAOS;AAHO,aANiB;AAY3BS,uBAZ2B,GAYb;AAChBC,oBAAMC,QAAQC,GAAR,CAAYC,QADF;AAEhBC,kBAAId,MAFY;AAGhBe,uBAAS,8BAHO;AAIhBC,oBACA,sBACA,gCADA,GAEA,wBAFA,GAE4BY,QAAQzC,EAFpC,GAEyC,MAFzC,GAGA,6BAHA,GAGgCmB,cAHhC,GAGiD,UAHjD,GAIA,kBAJA,GAKA,gBALA,GAMA;AAXgB,aAZa;AA0B7BJ,eA1B6B,WA0BxBE,IA1BwB,WA0BlBD,IA1BkB,WA0BZ0B,OA1BY;AAAA;AAAA,mBA4Bb,kBAAGZ,YAAYC,QAAZ,CAAqBT,WAArB,CAAH,CA5Ba;;AAAA;AAAA;AAAA;AA4BhCP,eA5BgC;AA4B3BE,gBA5B2B;;AAAA,iBA6B9BF,GA7B8B;AAAA;AAAA;AAAA;;AA6BxBD,eAAG,QAAH,EAAckB,QAAQC,GAAR,CAAY,0BAAZ,EA7BU;;AAAA;AAAA;AAAA,mBA+Bb,kBAAGzB,KAAKmC,MAAL,CAAYF,OAAZ,CAAH,CA/Ba;;AAAA;AAAA;AAAA;AA+BhC1B,eA/BgC;AA+B3BC,gBA/B2B;;AAAA,iBAgC9BD,GAhC8B;AAAA;AAAA;AAAA;;AAgCxBD,eAAG,QAAH,EAAckB,QAAQC,GAAR,CAAYlB,GAAZ,EAhCU;;AAAA;AAkC7B6B,sBAlC6B,GAkChB;AACfC,wBAAU7B,KAAK8B;AADA,aAlCgB;AAAA;AAAA,mBAsCV,kBAAGC,kBAAQJ,MAAR,CAAeC,UAAf,CAAH,CAtCU;;AAAA;AAAA;AAAA;AAsChC7B,eAtCgC;AAsC3B2B,mBAtC2B;;AAAA,iBAuC9B3B,GAvC8B;AAAA;AAAA;AAAA;;AAuCxBD,eAAG,QAAH,EAAckB,QAAQC,GAAR,CAAYlB,GAAZ,EAvCU;;AAAA;AAwCjCD,eAAG,SAAH;;AAxCiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AA2CA;AACA;AACA;;AAEA,IAAMgB,cAAckB,qBAAWC,eAAX,CAA2B;AAC3CC,QAAM1B,QAAQC,GAAR,CAAY0B,IADyB;AAE3CC,QAAM,GAFqC;AAG3CC,UAAQ,IAHmC;AAI3C;AACAC,QAAM;AACFtC,UAAMQ,QAAQC,GAAR,CAAYC,QADhB;AAEF6B,UAAM/B,QAAQC,GAAR,CAAY+B;AAFhB;AALqC,CAA3B,CAApB","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport nodemailer from 'nodemailer';\r\nimport to from'../to';\r\nimport dotenv from'dotenv';\r\ndotenv.config();\r\n\r\nimport Profile from './Profile';\r\n\r\nvar schema = mongoose.Schema({\r\n  id: {\r\n    type: String\r\n  },\r\n  pw: {\r\n    type: String\r\n  },\r\n  email: {\r\n    type: String\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'student'\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: new Date()\r\n  }\r\n})\r\n\r\nvar User = module.exports = mongoose.model('user',schema);\r\n\r\n\r\nmodule.exports.resetPassword = async (_email, cb)=>{\r\n  let err, user, info;\r\n\r\n  [err,user] = await to(User.findOne({email: _email}));\r\n  if(err || user === null){ cb('failed'); return; };\r\n\r\n  const randomPassword = randomString.generate(6);\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: _email,\r\n      subject: 'Your mlang account password has been reset!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  user.id + '</p>' +\r\n      '<p>and your new password is <b>' + randomPassword + '</b></p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>'\r\n  };\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log('err: mail cannot be sent'); return; }\r\n\r\n  user.set({ pw: randomPassword });\r\n  user.save();\r\n  cb('success');\r\n}\r\n\r\nmodule.exports.acquireNewAccount = async (_email, cb)=>{\r\n  const existUser = await User.findOne({email: _email});\r\n  if(existUser !== null){ cb('failed'); return; }\r\n\r\n  const randomPassword = randomString.generate(6);\r\n  var defaultId = _email.substring(0, _email.lastIndexOf(\"@\"));\r\n  const newUser = {\r\n    id: defaultId,\r\n    pw: randomPassword,\r\n    email: _email\r\n  }\r\n\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: _email,\r\n      subject: 'Your mlang account is ready!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  newUser.id + '</p>' +\r\n      '<p>and your password is <b>' + randomPassword + '</b></p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>'\r\n  };\r\n\r\n  let err, info, user, profile;\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log('err: mail cannot be sent'); return; }\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n  cb('success');\r\n}\r\n\r\n//console.log(process.env.EMAIL_ID);\r\n//console.log(process.env.EMAIL_PW);\r\n//console.log(process.env.HOST);\r\n\r\nconst transporter = nodemailer.createTransport({\r\n    host: process.env.HOST,\r\n    port: 465,\r\n    secure: true,\r\n    //requireTLS: true,\r\n    auth: {\r\n        user: process.env.EMAIL_ID,\r\n        pass: process.env.EMAIL_PW\r\n    }\r\n});\r\n"]}