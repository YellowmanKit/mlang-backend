{"version":3,"sources":["../../src/models/User.js"],"names":["dotenv","config","schema","mongoose","Schema","id","type","String","pw","email","default","createdAt","Date","User","module","exports","model","getProfilesByUsers","users","err","data","profile","profiles","profilesId","i","length","Profile","findOne","belongTo","_id","supervisingSchools","School","getByUser","_doc","getByType","usersId","find","console","log","getUserAndProfile","user","resetPassword","_email","cb","info","randomPassword","randomString","generate","mailOptions","from","process","env","EMAIL_ID","to","subject","html","transporter","sendMail","set","save","acquireNewAccountByCode","code","codeType","result","exist","Course","codeExist","newUser","create","newProfile","joinCourse","userId","joinSchool","acquireNewAccount","existUser","defaultId","substring","lastIndexOf","nodemailer","createTransport","service","auth","GMAIL_ID","pass","GMAIL_PW","charset"],"mappings":"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","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport nodemailer from 'nodemailer';\r\nimport to from'../to';\r\nimport dotenv from'dotenv';\r\ndotenv.config();\r\n\r\nimport School from './School';\r\nimport Course from './Course';\r\nimport Profile from './Profile';\r\n\r\nvar schema = mongoose.Schema({\r\n  id: {\r\n    type: String\r\n  },\r\n  pw: {\r\n    type: String\r\n  },\r\n  email: {\r\n    type: String\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'student'\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: new Date()\r\n  }\r\n})\r\n\r\nvar User = module.exports = mongoose.model('user',schema);\r\n\r\nmodule.exports.getProfilesByUsers = async (users)=>{\r\n  let err,data;\r\n\r\n  let profile = [];\r\n  let profiles = [];\r\n  let profilesId = [];\r\n\r\n  for(var i=0;i<users.length;i++){\r\n    [err, profile] = await to(Profile.findOne({ belongTo: users[i]._id }) );\r\n\r\n    if(users[i].type === 'admin'){\r\n      let supervisingSchools = [];\r\n      [err, data, supervisingSchools] = await School.getByUser(users[i], profile);\r\n      profile = {...profile._doc, supervisingSchools: supervisingSchools};\r\n    }\r\n    profiles = [...profiles, profile];\r\n    profilesId = [...profilesId, profile._id];\r\n  }\r\n  return [err, profiles, profilesId];\r\n}\r\n\r\nmodule.exports.getByType = async (type)=>{\r\n  let err, users;\r\n  let usersId = [];\r\n\r\n  [err, users] = await to(User.find({type: type}));\r\n  if(err || !users){ console.log(err); return ['error']; }\r\n  for(var i=0;i<users.length;i++){\r\n    usersId = [...usersId, users[i]._id];\r\n  }\r\n  return [null , users, usersId]\r\n}\r\n\r\nmodule.exports.getUserAndProfile = async (id, pw) =>{\r\n  let err, user, profile;\r\n\r\n  [err, user] = await to(User.findOne({id, pw}));\r\n  if(err || !user){ console.log(err); return ['error']; }\r\n\r\n  [err, profile] = await to(Profile.findOne({belongTo: user._id}));\r\n  if(err || !profile){ console.log(err); return ['error']; }\r\n\r\n  return [null , user, profile]\r\n}\r\n\r\nmodule.exports.resetPassword = async (_email, cb)=>{\r\n  let err, user, info;\r\n\r\n  [err,user] = await to(User.findOne({email: _email}));\r\n  if(err || user === null){ cb('failed'); return; };\r\n\r\n  const randomPassword = randomString.generate(6);\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: _email,\r\n      subject: 'Your mlang account password has been reset!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  user.id + '</p>' +\r\n      '<p>and your new password is <b>' + randomPassword + '</b>.</p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>'+\r\n      '<p>For any suggestions or bug report please send email to mlang.socail@gmail.com</p>'\r\n  };\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log('err: mail cannot be sent'); return; }\r\n\r\n  user.set({ pw: randomPassword });\r\n  user.save();\r\n  cb('success');\r\n}\r\n\r\nmodule.exports.acquireNewAccountByCode = async (code, codeType, cb)=>{\r\n  let err, result, exist, user, profile;\r\n\r\n  if(codeType === 'course'){\r\n    [err, exist] = await to(Course.codeExist(code));\r\n  }else{\r\n    [err, exist] = await to(School.codeExist(code));\r\n  }\r\n\r\n  if(err || !exist){ console.log('no such course'); cb('failed'); return; }\r\n\r\n\r\n  const newUser = {\r\n    id: 'DefaultId',\r\n    pw: randomPassword(),\r\n    email: '@',\r\n    type: codeType === 'course'? 'student': 'teacher'\r\n  };\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ console.log('cant create user'); cb('failed'); console.log(err); return; }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ console.log('cant create profile'); cb('failed'); console.log(err); return; }\r\n\r\n  if(codeType === 'course'){\r\n    Course.joinCourse({ userId: user._id, code: code}, (result)=>{\r\n      cb(result, user);\r\n    });\r\n  }else if(codeType === 'school'){\r\n    School.joinSchool({ userId: user._id, code: code}, (result)=>{\r\n      cb(result, user);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports.acquireNewAccount = async (_email, cb)=>{\r\n  const existUser = await User.findOne({email: _email});\r\n  if(existUser !== null){ cb('failed'); return; }\r\n\r\n  var defaultId = _email.substring(0, _email.lastIndexOf(\"@\"));\r\n  const newUser = {\r\n    id: defaultId,\r\n    pw: randomPassword(),\r\n    email: _email\r\n  }\r\n\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: _email,\r\n      subject: 'Your mlang account is ready!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  newUser.id + '</p>' +\r\n      '<p>and your password is <b>' + randomPassword + '</b></p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>' +\r\n      '<p>For any suggestions or bug report please send email to mlang.socail@gmail.com</p>'\r\n  };\r\n\r\n  let err, info, user, profile;\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log(err); console.log('err: mail cannot be sent'); return; }\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n  cb('success');\r\n}\r\n\r\n//console.log(process.env.GMAIL_ID);\r\n//console.log(process.env.GMAIL_PW);\r\n\r\nvar transporter = nodemailer.createTransport({\r\n service: 'gmail',\r\n auth: {\r\n     user: process.env.GMAIL_ID,\r\n     pass: process.env.GMAIL_PW\r\n    }\r\n});\r\n\r\nfunction randomPassword(){\r\n  return randomString.generate({\r\n    length: 6,\r\n    charset: 'abcdefghjkmnopqrstuvwxyz1234567890'\r\n  });\r\n}\r\n\r\n/*const transporter = nodemailer.createTransport({\r\n    host: process.env.HOST,\r\n    port: 465,\r\n    secure: true,\r\n    //requireTLS: true,\r\n    auth: {\r\n        user: process.env.EMAIL_ID,\r\n        pass: process.env.EMAIL_PW\r\n    }\r\n});*/\r\n"]}