{"version":3,"sources":["../../src/models/User.js"],"names":["dotenv","config","schema","mongoose","Schema","id","type","String","pw","mlanghkuId","mlanghkuPw","email","default","createdAt","Date","User","module","exports","model","getProfilesByUsers","users","err","data","profile","profiles","profilesId","i","length","Profile","findOne","belongTo","_id","supervisingSchools","School","getByUser","_doc","getByType","usersId","find","console","log","getUserAndProfile","user","findOneAndUpdate","$set","lastLogin","resetPassword","cb","info","randomPassword","randomString","generate","mailOptions","from","process","env","EMAIL_ID","to","subject","html","transporter","sendMail","set","save","aquireNewAccountByAppAccount","appUser","appPw","username","existUser","newUser","identity","create","newProfile","acquireNewAccountByCode","code","codeType","exist","course","teacher","school","Course","codeExist","joinCourse","userId","joinedSchools","joinSchool","acquireNewAccount","defaultId","substring","lastIndexOf","nodemailer","createTransport","service","auth","GMAIL_ID","pass","GMAIL_PW","charset"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;;;;;;;AAJAA,iBAAOC,MAAP;;AAMA,IAAIC,SAASC,mBAASC,MAAT,CAAgB;AAC3BC,MAAI;AACFC,UAAMC;AADJ,GADuB;AAI3BC,MAAI;AACFF,UAAMC;AADJ,GAJuB;AAO3BE,cAAY;AACVH,UAAMC;AADI,GAPe;AAU3BG,cAAY;AACVJ,UAAMC;AADI,GAVe;AAa3BI,SAAO;AACLL,UAAMC;AADD,GAboB;AAgB3BD,QAAM;AACJA,UAAMC,MADF;AAEJK,aAAS;AAFL,GAhBqB;AAoB3BC,aAAW;AACTP,UAAMQ;AADG;AApBgB,CAAhB,CAAb;;AAyBA,IAAIC,OAAOC,OAAOC,OAAP,GAAiBd,mBAASe,KAAT,CAAe,MAAf,EAAsBhB,MAAtB,CAA5B;;AAEAc,OAAOC,OAAP,CAAeE,kBAAf;AAAA,qEAAoC,iBAAOC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC9BC,eAD8B,WAC1BC,IAD0B;AAG9BC,mBAH8B,GAGpB,EAHoB;AAI9BC,oBAJ8B,GAInB,EAJmB;AAK9BC,sBAL8B,GAKjB,EALiB;AAO1BC,aAP0B,GAOxB,CAPwB;;AAAA;AAAA,kBAOtBA,IAAEN,MAAMO,MAPc;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQT,kBAAGC,kBAAQC,OAAR,CAAgB,EAAEC,UAAUV,MAAMM,CAAN,EAASK,GAArB,EAAhB,CAAH,CARS;;AAAA;AAAA;AAAA;AAQ/BV,eAR+B;AAQ1BE,mBAR0B;;AAAA,kBAU7BH,MAAMM,CAAN,EAASpB,IAAT,KAAkB,OAVW;AAAA;AAAA;AAAA;;AAW1B0B,8BAX0B,GAWL,EAXK;AAAA;AAAA,mBAYUC,iBAAOC,SAAP,CAAiBd,MAAMM,CAAN,CAAjB,EAA2BH,OAA3B,CAZV;;AAAA;AAAA;AAAA;AAY7BF,eAZ6B;AAYxBC,gBAZwB;AAYlBU,8BAZkB;;AAa9BT,mCAAcA,QAAQY,IAAtB,IAA4BH,oBAAoBA,kBAAhD;;AAb8B;AAehCR,oDAAeA,QAAf,IAAyBD,OAAzB;AACAE,sDAAiBA,UAAjB,IAA6BF,QAAQQ,GAArC;;AAhBgC;AAOPL,eAPO;AAAA;AAAA;;AAAA;AAAA,6CAkB3B,CAACL,GAAD,EAAMG,QAAN,EAAgBC,UAAhB,CAlB2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AAqBAT,OAAOC,OAAP,CAAemB,SAAf;AAAA,sEAA2B,kBAAO9B,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBe,eADqB,WAChBD,KADgB;AAErBiB,mBAFqB,GAEX,EAFW;AAAA;AAAA,mBAIJ,kBAAGtB,KAAKuB,IAAL,CAAU,EAAChC,MAAMA,IAAP,EAAV,CAAH,CAJI;;AAAA;AAAA;AAAA;AAIxBe,eAJwB;AAInBD,iBAJmB;;AAAA,kBAKtBC,OAAO,CAACD,KALc;AAAA;AAAA;AAAA;;AAKNmB,oBAAQC,GAAR,CAAYnB,GAAZ,EALM,kCAKmB,CAAC,OAAD,CALnB;;AAAA;AAMzB,iBAAQK,CAAR,GAAU,CAAV,EAAYA,IAAEN,MAAMO,MAApB,EAA2BD,GAA3B,EAA+B;AAC7BW,qDAAcA,OAAd,IAAuBjB,MAAMM,CAAN,EAASK,GAAhC;AACD;AARwB,8CASlB,CAAC,IAAD,EAAQX,KAAR,EAAeiB,OAAf,CATkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAYArB,OAAOC,OAAP,CAAewB,iBAAf;AAAA,sEAAmC,kBAAOpC,EAAP,EAAWG,EAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7Ba,eAD6B,WACxBqB,IADwB,WAClBnB,OADkB;AAAA;AAAA,mBAGb,kBAAGR,KAAKc,OAAL,CAAa,EAACxB,MAAD,EAAKG,MAAL,EAAb,CAAH,CAHa;;AAAA;AAAA;AAAA;AAGhCa,eAHgC;AAG3BqB,gBAH2B;;AAAA,kBAI9BrB,OAAO,CAACqB,IAJsB;AAAA;AAAA;AAAA;;AAAA,8CAIR,CAAC,OAAD,CAJQ;;AAAA;AAAA;AAAA,mBAMV,kBAAGd,kBAAQe,gBAAR,CAAyB,EAACb,UAAUY,KAAKX,GAAhB,EAAzB,EAA8C,EAAEa,MAAK,EAAEC,WAAW,IAAI/B,IAAJ,EAAb,EAAP,EAA9C,CAAH,CANU;;AAAA;AAAA;AAAA;AAMhCO,eANgC;AAM3BE,mBAN2B;;AAAA,kBAO9BF,OAAO,CAACE,OAPsB;AAAA;AAAA;AAAA;;AAAA,8CAOL,CAAC,OAAD,CAPK;;AAAA;AAAA,8CAS1B,CAAC,IAAD,EAAQmB,IAAR,EAAcnB,OAAd,CAT0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAYAP,OAAOC,OAAP,CAAe6B,aAAf;AAAA,uEAA+B,kBAAOnC,KAAP,EAAcoC,EAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzB1B,eADyB,WACpBqB,IADoB,WACdM,IADc;AAAA;AAAA,mBAGV,kBAAGjC,KAAKc,OAAL,CAAa,EAAClB,OAAOA,KAAR,EAAb,CAAH,CAHU;;AAAA;AAAA;AAAA;AAG5BU,eAH4B;AAGxBqB,gBAHwB;;AAAA,kBAI1BrB,OAAOqB,SAAS,IAJU;AAAA;AAAA;AAAA;;AAIHK,eAAG,QAAH,EAJG;;AAAA;AAIoB;;AAE3CE,0BANuB,GAMNC,uBAAaC,QAAb,CAAsB,CAAtB,CANM;AAOvBC,uBAPuB,GAOT;AAChBC,oBAAMC,QAAQC,GAAR,CAAYC,QADF;AAEhBC,kBAAI9C,KAFY;AAGhB+C,uBAAS,6CAHO;AAIhBC,oBACA,sBACA,gCADA,GAEA,wBAFA,GAE4BjB,KAAKrC,EAFjC,GAEsC,MAFtC,GAGA,iCAHA,GAGoC4C,cAHpC,GAGqD,WAHrD,GAIA,kBAJA,GAKA,gBALA,GAMA,6BANA,GAOA;AAZgB,aAPS;AAAA;AAAA,mBAsBT,kBAAGW,YAAYC,QAAZ,CAAqBT,WAArB,CAAH,CAtBS;;AAAA;AAAA;AAAA;AAsB5B/B,eAtB4B;AAsBvB2B,gBAtBuB;;AAAA,iBAuB1B3B,GAvB0B;AAAA;AAAA;AAAA;;AAuBpB0B,eAAG,QAAH,EAAcR,QAAQC,GAAR,CAAY,0BAAZ,EAvBM;;AAAA;;AAyB7BE,iBAAKoB,GAAL,CAAS,EAAEtD,IAAIyC,cAAN,EAAT;AACAP,iBAAKqB,IAAL;AACAhB,eAAG,SAAH;;AA3B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AA8BA/B,OAAOC,OAAP,CAAe+C,4BAAf;AAAA,uEAA8C,kBAAOC,OAAP,EAAgBC,KAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEpBnD,KAAKc,OAAL,CAAa,EAACxB,IAAI4D,QAAQE,QAAb,EAAuB3D,IAAI0D,KAA3B,EAAb,CAFoB;;AAAA;AAEtCE,qBAFsC;;AAAA,kBAGzCA,cAAc,IAH2B;AAAA;AAAA;AAAA;;AAAA,8CAGb,CAAC,OAAD,CAHa;;AAAA;AAKxC/C,eALwC,WAKnCqB,IALmC,WAK7BnB,OAL6B;AAOtC8C,mBAPsC,GAO5B;AACdhE,kBAAI4D,QAAQE,QADE;AAEd3D,kBAAI0D,KAFU;AAGdzD,0BAAYwD,QAAQE,QAHN;AAIdzD,0BAAYwD,KAJE;AAKdvD,qBAAOsD,QAAQtD,KALD;AAMdL,oBAAM2D,QAAQK,QAAR,KAAqB,CAArB,GAAwB,SAAxB,GAAmC,SAN3B;AAOdzD,yBAAW,IAAIC,IAAJ;AAPG,aAP4B;AAAA;AAAA,mBAiBxB,kBAAGC,KAAKwD,MAAL,CAAYF,OAAZ,CAAH,CAjBwB;;AAAA;AAAA;AAAA;AAiB3ChD,eAjB2C;AAiBtCqB,gBAjBsC;;AAAA,iBAkBzCrB,GAlByC;AAAA;AAAA;AAAA;;AAkBnCkB,oBAAQC,GAAR,CAAY,kBAAZ,EAlBmC,kCAkBK,CAAC,OAAD,CAlBL;;AAAA;AAoBxCgC,sBApBwC,GAoB3B;AACf1C,wBAAUY,KAAKX;AADA,aApB2B;AAAA;AAAA,mBAwBrB,kBAAGH,kBAAQ2C,MAAR,CAAeC,UAAf,CAAH,CAxBqB;;AAAA;AAAA;AAAA;AAwB3CnD,eAxB2C;AAwBtCE,mBAxBsC;;AAAA,iBAyBzCF,GAzByC;AAAA;AAAA;AAAA;;AAyBnCkB,oBAAQC,GAAR,CAAY,qBAAZ,EAzBmC,kCAyBQ,CAAC,OAAD,CAzBR;;AAAA;AAAA,8CA2BrC,CAAC,IAAD,EAAOE,IAAP,EAAanB,OAAb,CA3BqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;AA8BAP,OAAOC,OAAP,CAAewD,uBAAf;AAAA,uEAAyC,kBAAOC,IAAP,EAAaC,QAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnCtD,eADmC,WAC9BuD,KAD8B,WACvBlC,IADuB,WACjBnB,OADiB,WACRsD,MADQ,WACAC,OADA,WACSC,MADT;;AAAA,kBAGpCJ,aAAa,QAHuB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIhB,kBAAGK,iBAAOC,SAAP,CAAiBP,IAAjB,CAAH,CAJgB;;AAAA;AAAA;AAAA;AAIpCrD,eAJoC;AAI/BuD,iBAJ+B;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAMhB,kBAAG3C,iBAAOgD,SAAP,CAAiBP,IAAjB,CAAH,CANgB;;AAAA;AAAA;AAAA;AAMpCrD,eANoC;AAM/BuD,iBAN+B;;AAAA;AAAA,kBASpCvD,OAAO,CAACuD,KAT4B;AAAA;AAAA;AAAA;;AAAA,8CASb,CAAC,uBAAD,CATa;;AAAA;AAWjCP,mBAXiC,GAWvB;AACdhE,kBAAI,WADU;AAEdG,kBAAIyC,gBAFU;AAGdtC,qBAAO,GAHO;AAIdL,oBAAMqE,aAAa,QAAb,GAAuB,SAAvB,GAAkC,SAJ1B;AAKd9D,yBAAW,IAAIC,IAAJ;AALG,aAXuB;AAAA;AAAA,mBAkBnB,kBAAGC,KAAKwD,MAAL,CAAYF,OAAZ,CAAH,CAlBmB;;AAAA;AAAA;AAAA;AAkBtChD,eAlBsC;AAkBjCqB,gBAlBiC;AAoBnC8B,sBApBmC,GAoBtB,EAAE1C,UAAUY,KAAKX,GAAjB,EApBsB;AAAA;AAAA,mBAqBhB,kBAAGH,kBAAQ2C,MAAR,CAAeC,UAAf,CAAH,CArBgB;;AAAA;AAAA;AAAA;AAqBtCnD,eArBsC;AAqBjCE,mBArBiC;;AAAA,kBAuBpCoD,aAAa,QAvBuB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAwBfK,iBAAOE,UAAP,CAAkB,EAAEC,QAAQzC,KAAKX,GAAf,EAAoB2C,MAAMA,IAA1B,EAAlB,CAxBe;;AAAA;AAAA;AAAA;AAwBpCrD,eAxBoC;AAwB/BwD,kBAxB+B;AAAA;AAAA,mBAyBd,kBAAG9D,KAAKc,OAAL,CAAa,EAAEE,KAAK8C,OAAOC,OAAd,EAAb,CAAH,CAzBc;;AAAA;AAAA;AAAA;AAyBpCzD,eAzBoC;AAyB/ByD,mBAzB+B;AAAA;AAAA,mBA0Bd,kBAAGlD,kBAAQC,OAAR,CAAgB,EAAEC,UAAUgD,QAAQ/C,GAApB,EAAhB,CAAH,CA1Bc;;AAAA;AAAA;AAAA;AA0BpCV,eA1BoC;AA0B/BE,mBA1B+B;AAAA;AAAA,mBA2Bf,kBAAGU,iBAAOJ,OAAP,CAAe,EAAEE,KAAKR,QAAQ6D,aAAR,CAAsB,CAAtB,CAAP,EAAf,CAAH,CA3Be;;AAAA;AAAA;AAAA;AA2BpC/D,eA3BoC;AA2B/B0D,kBA3B+B;AAAA;AAAA,mBA4BvB9C,iBAAOoD,UAAP,CAAkB,EAAE3C,MAAMA,IAAR,EAAcgC,MAAMK,OAAOL,IAA3B,EAAlB,CA5BuB;;AAAA;AAAA;AAAA;AA4BpCrD,eA5BoC;AAAA,8CA6B9B,CAACA,GAAD,EAAMqB,IAAN,CA7B8B;;AAAA;AAAA,kBA8B9BiC,aAAa,QA9BiB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA+BvB1C,iBAAOoD,UAAP,CAAkB,EAAE3C,MAAMA,IAAR,EAAcgC,MAAMA,IAApB,EAAlB,CA/BuB;;AAAA;AAAA;AAAA;AA+BpCrD,eA/BoC;AAAA,8CAgC9B,CAACA,GAAD,EAAMqB,IAAN,CAhC8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzC;;AAAA;AAAA;AAAA;AAAA;;AAoCA1B,OAAOC,OAAP,CAAeqE,iBAAf;AAAA,uEAAmC,kBAAO3E,KAAP,EAAcoC,EAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACThC,KAAKc,OAAL,CAAa,EAAClB,OAAOA,KAAR,EAAb,CADS;;AAAA;AAC3ByD,qBAD2B;;AAAA,kBAE9BA,cAAc,IAFgB;AAAA;AAAA;AAAA;;AAETrB,eAAG,QAAH,EAFS;;AAAA;AAI7BwC,qBAJ6B,GAIjB5E,MAAM6E,SAAN,CAAgB,CAAhB,EAAmB7E,MAAM8E,WAAN,CAAkB,GAAlB,CAAnB,CAJiB;AAK3BpB,mBAL2B,GAKjB;AACdhE,kBAAIkF,SADU;AAEd/E,kBAAIyC,gBAFU;AAGdtC,qBAAOA;AAHO,aALiB;AAW3ByC,uBAX2B,GAWb;AAChBC,oBAAMC,QAAQC,GAAR,CAAYC,QADF;AAEhBC,kBAAI9C,KAFY;AAGhB+C,uBAAS,8BAHO;AAIhBC,oBACA,sBACA,gCADA,GAEA,wBAFA,GAE4BU,QAAQhE,EAFpC,GAEyC,MAFzC,GAGA,6BAHA,GAGgC4C,cAHhC,GAGiD,UAHjD,GAIA,kBAJA,GAKA,gBALA,GAMA,6BANA,GAOA;AAZgB,aAXa;AA0B7B5B,eA1B6B,WA0BxB2B,IA1BwB,WA0BlBN,IA1BkB,WA0BZnB,OA1BY;AAAA;AAAA,mBA4Bb,kBAAGqC,YAAYC,QAAZ,CAAqBT,WAArB,CAAH,CA5Ba;;AAAA;AAAA;AAAA;AA4BhC/B,eA5BgC;AA4B3B2B,gBA5B2B;;AAAA,iBA6B9B3B,GA7B8B;AAAA;AAAA;AAAA;;AA6BxB0B,eAAG,QAAH,EAAcR,QAAQC,GAAR,CAAYnB,GAAZ,EAAkBkB,QAAQC,GAAR,CAAY,0BAAZ,EA7BR;;AAAA;AAAA;AAAA,mBA+Bb,kBAAGzB,KAAKwD,MAAL,CAAYF,OAAZ,CAAH,CA/Ba;;AAAA;AAAA;AAAA;AA+BhChD,eA/BgC;AA+B3BqB,gBA/B2B;;AAAA,iBAgC9BrB,GAhC8B;AAAA;AAAA;AAAA;;AAgCxB0B,eAAG,QAAH,EAAcR,QAAQC,GAAR,CAAYnB,GAAZ,EAhCU;;AAAA;AAkC7BmD,sBAlC6B,GAkChB;AACf1C,wBAAUY,KAAKX;AADA,aAlCgB;AAAA;AAAA,mBAsCV,kBAAGH,kBAAQ2C,MAAR,CAAeC,UAAf,CAAH,CAtCU;;AAAA;AAAA;AAAA;AAsChCnD,eAtCgC;AAsC3BE,mBAtC2B;;AAAA,iBAuC9BF,GAvC8B;AAAA;AAAA;AAAA;;AAuCxB0B,eAAG,QAAH,EAAcR,QAAQC,GAAR,CAAYnB,GAAZ,EAvCU;;AAAA;AAwCjC0B,eAAG,SAAH;;AAxCiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AA2CA;AACA;;AAEA,IAAIa,cAAc8B,qBAAWC,eAAX,CAA2B;AAC5CC,WAAS,OADmC;AAE5CC,QAAM;AACFnD,UAAMY,QAAQC,GAAR,CAAYuC,QADhB;AAEFC,UAAMzC,QAAQC,GAAR,CAAYyC;AAFhB;AAFsC,CAA3B,CAAlB;;AAQA,SAAS/C,cAAT,GAAyB;AACvB,SAAOC,uBAAaC,QAAb,CAAsB;AAC3BxB,YAAQ,CADmB;AAE3BsE,aAAS;AAFkB,GAAtB,CAAP;AAID;;AAED","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport nodemailer from 'nodemailer';\r\nimport to from'../to';\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nimport School from './School';\r\nimport Course from './Course';\r\nimport Profile from './Profile';\r\n\r\nvar schema = mongoose.Schema({\r\n  id: {\r\n    type: String\r\n  },\r\n  pw: {\r\n    type: String\r\n  },\r\n  mlanghkuId: {\r\n    type: String\r\n  },\r\n  mlanghkuPw: {\r\n    type: String\r\n  },\r\n  email: {\r\n    type: String\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'student'\r\n  },\r\n  createdAt: {\r\n    type: Date\r\n  }\r\n})\r\n\r\nvar User = module.exports = mongoose.model('user',schema);\r\n\r\nmodule.exports.getProfilesByUsers = async (users)=>{\r\n  let err,data;\r\n\r\n  let profile = [];\r\n  let profiles = [];\r\n  let profilesId = [];\r\n\r\n  for(var i=0;i<users.length;i++){\r\n    [err, profile] = await to(Profile.findOne({ belongTo: users[i]._id }));\r\n\r\n    if(users[i].type === 'admin'){\r\n      let supervisingSchools = [];\r\n      [err, data, supervisingSchools] = await School.getByUser(users[i], profile);\r\n      profile = {...profile._doc, supervisingSchools: supervisingSchools};\r\n    }\r\n    profiles = [...profiles, profile];\r\n    profilesId = [...profilesId, profile._id];\r\n  }\r\n  return [err, profiles, profilesId];\r\n}\r\n\r\nmodule.exports.getByType = async (type)=>{\r\n  let err, users;\r\n  let usersId = [];\r\n\r\n  [err, users] = await to(User.find({type: type}));\r\n  if(err || !users){ console.log(err); return ['error']; }\r\n  for(var i=0;i<users.length;i++){\r\n    usersId = [...usersId, users[i]._id];\r\n  }\r\n  return [null , users, usersId]\r\n}\r\n\r\nmodule.exports.getUserAndProfile = async (id, pw) =>{\r\n  let err, user, profile;\r\n\r\n  [err, user] = await to(User.findOne({id, pw}));\r\n  if(err || !user){ return ['error']; }\r\n\r\n  [err, profile] = await to(Profile.findOneAndUpdate({belongTo: user._id},{ $set:{ lastLogin: new Date() }}));\r\n  if(err || !profile){ return ['error']; }\r\n\r\n  return [null , user, profile]\r\n}\r\n\r\nmodule.exports.resetPassword = async (email, cb)=>{\r\n  let err, user, info;\r\n\r\n  [err,user] = await to(User.findOne({email: email}));\r\n  if(err || user === null){ cb('failed'); return; };\r\n\r\n  const randomPassword = randomString.generate(6);\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: email,\r\n      subject: 'Your mlang account password has been reset!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  user.id + '</p>' +\r\n      '<p>and your new password is <b>' + randomPassword + '</b>.</p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>'+\r\n      '<p>For any suggestions or bug report please send email to mlang.socail@gmail.com</p>'\r\n  };\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log('err: mail cannot be sent'); return; }\r\n\r\n  user.set({ pw: randomPassword });\r\n  user.save();\r\n  cb('success');\r\n}\r\n\r\nmodule.exports.aquireNewAccountByAppAccount = async (appUser, appPw)=>{\r\n\r\n  const existUser = await User.findOne({id: appUser.username, pw: appPw});\r\n  if(existUser !== null){ return ['error'] }\r\n\r\n  let err, user, profile;\r\n\r\n  const newUser = {\r\n    id: appUser.username,\r\n    pw: appPw,\r\n    mlanghkuId: appUser.username,\r\n    mlanghkuPw: appPw,\r\n    email: appUser.email,\r\n    type: appUser.identity === 2? 'teacher': 'student',\r\n    createdAt: new Date()\r\n  };\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ console.log('cant create user'); return ['error'] }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ console.log('cant create profile'); return ['error'] }\r\n\r\n  return [null, user, profile];\r\n}\r\n\r\nmodule.exports.acquireNewAccountByCode = async (code, codeType)=>{\r\n  let err, exist, user, profile, course, teacher, school;\r\n\r\n  if(codeType === 'course'){\r\n    [err, exist] = await to(Course.codeExist(code));\r\n  }else{\r\n    [err, exist] = await to(School.codeExist(code));\r\n  }\r\n\r\n  if(err || !exist){ return ['failed - invalid code'] }\r\n\r\n  const newUser = {\r\n    id: 'DefaultId',\r\n    pw: randomPassword(),\r\n    email: '@',\r\n    type: codeType === 'course'? 'student': 'teacher',\r\n    createdAt: new Date()\r\n  };\r\n  [err, user] = await to(User.create(newUser));\r\n\r\n  var newProfile = { belongTo: user._id };\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n\r\n  if(codeType === 'course'){\r\n    [err, course] = await Course.joinCourse({ userId: user._id, code: code});\r\n    [err, teacher] = await to(User.findOne({ _id: course.teacher }));\r\n    [err, profile] = await to(Profile.findOne({ belongTo: teacher._id }));\r\n    [err, school] = await to(School.findOne({ _id: profile.joinedSchools[0] }));\r\n    [err] = await School.joinSchool({ user: user, code: school.code});\r\n    return [err, user];\r\n  }else if(codeType === 'school'){\r\n    [err] = await School.joinSchool({ user: user, code: code});\r\n    return [err, user];\r\n  }\r\n}\r\n\r\nmodule.exports.acquireNewAccount = async (email, cb)=>{\r\n  const existUser = await User.findOne({email: email});\r\n  if(existUser !== null){ cb('failed'); return; }\r\n\r\n  var defaultId = email.substring(0, email.lastIndexOf(\"@\"));\r\n  const newUser = {\r\n    id: defaultId,\r\n    pw: randomPassword(),\r\n    email: email\r\n  }\r\n\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: email,\r\n      subject: 'Your mlang account is ready!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  newUser.id + '</p>' +\r\n      '<p>and your password is <b>' + randomPassword + '</b></p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>' +\r\n      '<p>For any suggestions or bug report please send email to mlang.socail@gmail.com</p>'\r\n  };\r\n\r\n  let err, info, user, profile;\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log(err); console.log('err: mail cannot be sent'); return; }\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n  cb('success');\r\n}\r\n\r\n//console.log(process.env.GMAIL_ID);\r\n//console.log(process.env.GMAIL_PW);\r\n\r\nvar transporter = nodemailer.createTransport({\r\n service: 'gmail',\r\n auth: {\r\n     user: process.env.GMAIL_ID,\r\n     pass: process.env.GMAIL_PW\r\n    }\r\n});\r\n\r\nfunction randomPassword(){\r\n  return randomString.generate({\r\n    length: 6,\r\n    charset: 'abcdefghjkmnopqrstuvwxyz234567890'\r\n  });\r\n}\r\n\r\n/*const transporter = nodemailer.createTransport({\r\n    host: process.env.HOST,\r\n    port: 465,\r\n    secure: true,\r\n    //requireTLS: true,\r\n    auth: {\r\n        user: process.env.EMAIL_ID,\r\n        pass: process.env.EMAIL_PW\r\n    }\r\n});*/\r\n"]}