{"version":3,"sources":["../../src/models/User.js"],"names":["dotenv","config","schema","mongoose","Schema","id","type","String","pw","email","default","createdAt","Date","User","module","exports","model","resetPassword","_email","cb","err","user","info","findOne","randomPassword","randomString","generate","mailOptions","from","process","env","EMAIL_ID","to","subject","html","transporter","sendMail","console","log","set","save","acquireNewAccount","existUser","length","charset","defaultId","substring","lastIndexOf","newUser","profile","create","newProfile","belongTo","_id","Profile","nodemailer","createTransport","service","auth","GMAIL_ID","pass","GMAIL_PW"],"mappings":"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","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport nodemailer from 'nodemailer';\r\nimport to from'../to';\r\nimport dotenv from'dotenv';\r\ndotenv.config();\r\n\r\nimport Profile from './Profile';\r\n\r\nvar schema = mongoose.Schema({\r\n  id: {\r\n    type: String\r\n  },\r\n  pw: {\r\n    type: String\r\n  },\r\n  email: {\r\n    type: String\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'student'\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: new Date()\r\n  }\r\n})\r\n\r\nvar User = module.exports = mongoose.model('user',schema);\r\n\r\nmodule.exports.resetPassword = async (_email, cb)=>{\r\n  let err, user, info;\r\n\r\n  [err,user] = await to(User.findOne({email: _email}));\r\n  if(err || user === null){ cb('failed'); return; };\r\n\r\n  const randomPassword = randomString.generate(6);\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: _email,\r\n      subject: 'Your mlang account password has been reset!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  user.id + '</p>' +\r\n      '<p>and your new password is <b>' + randomPassword + '</b>.</p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>'+\r\n      '<p>For any suggestions or bug report please send email to mlang.socail@gmail.com</p>'\r\n  };\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log('err: mail cannot be sent'); return; }\r\n\r\n  user.set({ pw: randomPassword });\r\n  user.save();\r\n  cb('success');\r\n}\r\n\r\nmodule.exports.acquireNewAccount = async (_email, cb)=>{\r\n  const existUser = await User.findOne({email: _email});\r\n  if(existUser !== null){ cb('failed'); return; }\r\n\r\n  const randomPassword = randomString.generate({\r\n    length: 6,\r\n    charset: 'abcdefghjkmnopqrstuvwxyz1234567890'\r\n  });\r\n  var defaultId = _email.substring(0, _email.lastIndexOf(\"@\"));\r\n  const newUser = {\r\n    id: defaultId,\r\n    pw: randomPassword,\r\n    email: _email\r\n  }\r\n\r\n  const mailOptions = {\r\n      from: process.env.EMAIL_ID,\r\n      to: _email,\r\n      subject: 'Your mlang account is ready!',\r\n      html:\r\n      '<p>Dear user,</p>' +\r\n      '<p>Thanks for using mlang!</p>' +\r\n      '<p>Your account id is ' +  newUser.id + '</p>' +\r\n      '<p>and your password is <b>' + randomPassword + '</b></p>'+\r\n      '<p>Have fun!</p>' +\r\n      '<p>Regard,</p>' +\r\n      '<p>mlang developer team</p>' +\r\n      '<p>For any suggestions or bug report please send email to mlang.socail@gmail.com</p>'\r\n  };\r\n\r\n  let err, info, user, profile;\r\n\r\n  [err, info] = await to(transporter.sendMail(mailOptions));\r\n  if(err){ cb('failed'); console.log(err); console.log('err: mail cannot be sent'); return; }\r\n\r\n  [err, user] = await to(User.create(newUser));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  var newProfile = {\r\n    belongTo: user._id\r\n  };\r\n\r\n  [err, profile] = await to(Profile.create(newProfile));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n  cb('success');\r\n}\r\n\r\n//console.log(process.env.GMAIL_ID);\r\n//console.log(process.env.GMAIL_PW);\r\n\r\nvar transporter = nodemailer.createTransport({\r\n service: 'gmail',\r\n auth: {\r\n     user: process.env.GMAIL_ID,\r\n     pass: process.env.GMAIL_PW\r\n    }\r\n});\r\n\r\n/*const transporter = nodemailer.createTransport({\r\n    host: process.env.HOST,\r\n    port: 465,\r\n    secure: true,\r\n    //requireTLS: true,\r\n    auth: {\r\n        user: process.env.EMAIL_ID,\r\n        pass: process.env.EMAIL_PW\r\n    }\r\n});*/\r\n"]}