{"version":3,"sources":["../../src/models/Course.js"],"names":["ObjectId","mongoose","Schema","Types","courseSchema","teacher","type","required","icon","String","title","createdAt","Date","default","endDate","code","joinedStudents","subjects","Course","module","exports","model","getBySubjects","err","course","coursesId","courses","i","length","push","j","findById","getBySchool","school","data","teachers","joinedTeachers","find","_id","getTeaching","teacherId","teachingCourses","sort","getJoined","joinedCourses","profile","profiles","Profile","findOne","belongTo","leaveCourse","cb","courseToLeave","updatedProfile","findOneAndUpdate","$pull","userId","new","joinCourse","courseToJoin","indexOf","$push","addCourse","newCourse","newCode","randomString","generate","charset","create","console","log","codeExist"],"mappings":"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","file":"Course.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport Model from './Model';\r\nimport to from '../to';\r\n\r\nimport Profile from './Profile';\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar courseSchema = mongoose.Schema({\r\n  teacher: {\r\n    type: ObjectId,\r\n    required: true\r\n  },\r\n  icon: {\r\n    type: String\r\n  },\r\n  title: {\r\n    type: String\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: new Date()\r\n  },\r\n  endDate: {\r\n    type: Date,\r\n    default: new Date()\r\n  },\r\n  code: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  joinedStudents: [ObjectId],\r\n  subjects: [ObjectId]\r\n})\r\n\r\nvar Course = module.exports = mongoose.model('course',courseSchema);\r\n\r\nmodule.exports.getBySubjects = async (subjects)=>{\r\n  let err, course;\r\n  let coursesId = [];\r\n  let courses = [];\r\n\r\n  for(var i=0;i<subjects.length;i++){\r\n    if(coursesId.length === 0){ coursesId.push(subjects[i].course) }\r\n    for(var j=0;j<coursesId.length;j++){\r\n      if(coursesId[j] === subjects[i].course){ break; }\r\n      if(j === coursesId.length){ coursesId.push(subjects[i].course) }\r\n    }\r\n  }\r\n\r\n  for(var i=0;i<coursesId.length;i++){\r\n    [err, course] = await to(Course.findById(coursesId[i]));\r\n    courses.push(course)\r\n  }\r\n\r\n  return [err, courses, coursesId];\r\n}\r\n\r\nmodule.exports.getBySchool = async (school)=>{\r\n  let err, data;\r\n  let coursesId = [];\r\n  let courses = [];\r\n\r\n  const teachers = school.joinedTeachers;\r\n  for(var i=0;i<teachers.length;i++){\r\n    [err, data] = await to(Course.find({teacher: teachers[i]}));\r\n    courses = [...courses, ...data];\r\n  }\r\n  for(var i=0;i<courses.length;i++){\r\n    coursesId = [...coursesId, courses[i]._id];\r\n  }\r\n  return [err, courses, coursesId];\r\n}\r\n\r\nmodule.exports.getTeaching = async (teacherId)=>{\r\n  let err, course;\r\n  let courses = [];\r\n  let teachingCourses = [];\r\n\r\n  [err, courses] = await to(Course.find({teacher: teacherId}, null, {sort: {endDate: 'descending'}}));\r\n  for(var i=0;i<courses.length;i++){\r\n    teachingCourses.push(courses[i]._id);\r\n  }\r\n\r\n  return [err, courses, teachingCourses];\r\n}\r\n\r\nmodule.exports.getJoined = async (joinedCourses)=>{\r\n  let err, course, profile;\r\n  let courses = [];\r\n  let profiles = [];\r\n\r\n  for(var i=0;i<joinedCourses.length;i++){\r\n    [err, course] = await to(Course.findById(joinedCourses[i]));\r\n    if(err || course === null){ return ['error']; }\r\n\r\n    courses.push(course);\r\n\r\n    [err, profile] = await to(Profile.findOne({belongTo: course.teacher}));\r\n    if(err || profile === null){ return ['error']; }\r\n    profiles.push(profile);\r\n  }\r\n\r\n  return [err, courses, profiles];\r\n}\r\n\r\nmodule.exports.leaveCourse = async (data, cb)=>{\r\n  let err, courseToLeave, updatedProfile;\r\n\r\n  [err, courseToLeave] = await to(Course.findOneAndUpdate({code: data.code}, { $pull: {\r\n    joinedStudents: data.userId\r\n  }}, {new: true}))\r\n  if(err || courseToLeave === null){ cb('failed'); };\r\n\r\n  [err, updatedProfile] = await to(Profile.findOneAndUpdate({belongTo: data.userId}, { $pull: {\r\n    joinedCourses: courseToLeave._id\r\n  }}, {new: true}))\r\n  if(err || updatedProfile === null){ cb('failed'); };\r\n\r\n  cb('success', courseToLeave, updatedProfile)\r\n}\r\n\r\nmodule.exports.joinCourse = async (data, cb)=>{\r\n  let err, courseToJoin, updatedProfile;\r\n\r\n  [err, courseToJoin] = await to(Course.findOne({code: data.code}));\r\n  if(err || courseToJoin === null){ cb('failed'); };\r\n\r\n  if(courseToJoin.joinedStudents.indexOf(data.userId) > -1){ cb('failed - course already joined'); return; }\r\n\r\n  [err, courseToJoin] = await to(Course.findOneAndUpdate({code: data.code}, { $push: {\r\n    joinedStudents: data.userId\r\n  }}, {new: true}))\r\n  if(err || courseToJoin === null){ cb('failed'); };\r\n\r\n  [err, updatedProfile] = await to(Profile.findOneAndUpdate({belongTo: data.userId}, { $push: {\r\n    joinedCourses: courseToJoin._id\r\n  }}, {new: true}))\r\n  if(err || updatedProfile === null){ cb('failed'); };\r\n\r\n  cb('success', courseToJoin, updatedProfile);\r\n}\r\n\r\nmodule.exports.addCourse = async (newCourse, cb)=>{\r\n  let err, course;\r\n\r\n  var newCode = '';\r\n  for(var i=0;i<99;i++){\r\n    newCode = randomString.generate({\r\n      length: 5,\r\n      charset: 'ABCDEFGHJKMNOPQRSTUVWXYZ1234567890'\r\n    });\r\n\r\n    [err,course] = await to(Course.findOne({code: newCode}));\r\n    if(!err && course === null){ break; };\r\n  }\r\n\r\n  newCourse['code'] = newCode;\r\n\r\n  [err, course] = await to(Course.create(newCourse));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  //console.log(course)\r\n  cb('success', course)\r\n}\r\n\r\nmodule.exports.codeExist = async (code)=>{\r\n  let err, course;\r\n  [err, course] = await to(Course.findOne({code: code}));\r\n  if(err || !course){ return false; }\r\n  return true;\r\n}\r\n"]}