{"version":3,"sources":["../../src/models/Course.js"],"names":["ObjectId","mongoose","Schema","Types","courseSchema","teacher","type","required","icon","String","title","endDate","Date","default","code","joinedStudents","projects","Course","module","exports","model","joinCourse","data","cb","err","courseToJoin","updatedProfile","findOneAndUpdate","$push","userId","new","Profile","belongTo","joinedCourses","_id","addCourse","newCourse","course","newCode","i","randomString","generate","length","charset","findOne","create","console","log"],"mappings":"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","file":"Course.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport randomString from'randomstring';\r\nimport to from'../to';\r\n\r\nimport Profile from './Profile';\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar courseSchema = mongoose.Schema({\r\n  teacher: {\r\n    type: ObjectId,\r\n    required: true\r\n  },\r\n  icon: {\r\n    type: String\r\n  },\r\n  title: {\r\n    type: String\r\n  },\r\n  endDate: {\r\n    type: Date,\r\n    default: new Date()\r\n  },\r\n  code: {\r\n    type: String\r\n  },\r\n  joinedStudents: [ObjectId],\r\n  projects: [ObjectId]\r\n})\r\n\r\nvar Course = module.exports = mongoose.model('course',courseSchema);\r\n\r\nmodule.exports.joinCourse = async (data, cb)=>{\r\n  let err, courseToJoin, updatedProfile;\r\n\r\n  [err, courseToJoin] = await to(Course.findOneAndUpdate({code: data.code}, { $push: {\r\n    joinedStudents: data.userId\r\n  }}, {new: true}))\r\n  if(err || courseToJoin === null){ cb('failed'); };\r\n\r\n  [err, updatedProfile] = await to(Profile.findOneAndUpdate({belongTo: data.userId}, { $push: {\r\n    joinedCourses: courseToJoin._id\r\n  }}, {new: true}))\r\n  if(err || updatedProfile === null){ cb('failed'); };\r\n\r\n  cb('success', courseToJoin, updatedProfile)\r\n}\r\n\r\nmodule.exports.addCourse = async (newCourse, cb)=>{\r\n  let err, course;\r\n\r\n  var newCode = '';\r\n  for(var i=0;i<99;i++){\r\n    newCode = randomString.generate({\r\n      length: 5,\r\n      charset: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\r\n    });\r\n\r\n    [err,course] = await to(Course.findOne({code: newCode}));\r\n    if(!err && course === null){ break; };\r\n  }\r\n\r\n  newCourse['code'] = newCode;\r\n\r\n  [err, course] = await to(Course.create(newCourse));\r\n  if(err){ cb('failed'); console.log(err); return; }\r\n\r\n  //console.log(course)\r\n  cb('success', course)\r\n}\r\n"]}