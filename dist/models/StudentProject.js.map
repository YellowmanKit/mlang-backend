{"version":3,"sources":["../../src/models/StudentProject.js"],"names":["ObjectId","mongoose","Schema","Types","studentProjectSchema","project","type","required","student","createdAt","Date","default","cards","StudentProject","module","exports","model","getByUser","userId","err","studentProject","studentProjectsId","studentProjects","find","i","length","push","_id","getByProjects","projects","findById"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;AAEA,IAAIA,WAAWC,mBAASC,MAAT,CAAgBC,KAAhB,CAAsBH,QAArC;AACA,IAAII,uBAAuBH,mBAASC,MAAT,CAAgB;AACzCG,WAAS;AACPC,UAAMN,QADC;AAEPO,cAAU;AAFH,GADgC;AAKzCC,WAAS;AACPF,UAAMN,QADC;AAEPO,cAAU;AAFH,GALgC;AASzCE,aAAW;AACTH,UAAMI,IADG;AAETC,aAAS,IAAID,IAAJ;AAFA,GAT8B;AAazCE,SAAO,CAACZ,QAAD;AAbkC,CAAhB,CAA3B;;AAgBA,IAAIa,iBAAiBC,OAAOC,OAAP,GAAiBd,mBAASe,KAAT,CAAe,gBAAf,EAAiCZ,oBAAjC,CAAtC;;AAEAU,OAAOC,OAAP,CAAeE,SAAf;AAAA,qEAA2B,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBC,eADqB,WAChBC,cADgB;AAErBC,6BAFqB,GAED,EAFC;AAGrBC,2BAHqB,GAGH,EAHG;AAAA;AAAA,mBAKM,kBAAGT,eAAeU,IAAf,CAAoB,EAAEf,SAASU,MAAX,EAApB,CAAH,CALN;;AAAA;AAAA;AAAA;AAKxBC,eALwB;AAKnBG,2BALmB;;AAMzB,iBAAQE,CAAR,GAAU,CAAV,EAAYA,IAAIF,gBAAgBG,MAAhC,EAAuCD,GAAvC,EAA2C;AAAEH,gCAAkBK,IAAlB,CAAuBJ,gBAAgBE,CAAhB,EAAmBG,GAA1C;AAAiD;;AANrE,6CAQlB,CAACR,GAAD,EAAMG,eAAN,EAAuBD,iBAAvB,CARkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAWAP,OAAOC,OAAP,CAAea,aAAf;AAAA,sEAA+B,kBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBV,eADyB,WACpBC,cADoB;AAEzBC,6BAFyB,GAEL,EAFK;AAGzBC,2BAHyB,GAGP,EAHO;;;AAK7B,iBAAQE,CAAR,GAAU,CAAV,EAAYA,IAAEK,SAASJ,MAAvB,EAA8BD,GAA9B,EAAkC;AAChCH,+DAAwBA,iBAAxB,sBAA8CQ,SAASL,CAAT,EAAYF,eAA1D;AACD;;AAEOE,aATqB,GASnB,CATmB;;AAAA;AAAA,kBASjBA,IAAEH,kBAAkBI,MATH;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAUG,kBAAGZ,eAAeiB,QAAf,CAAwBT,kBAAkBG,CAAlB,CAAxB,CAAH,CAVH;;AAAA;AAAA;AAAA;AAU1BL,eAV0B;AAUrBC,0BAVqB;;AAW3BE,4BAAgBI,IAAhB,CAAqBN,cAArB;;AAX2B;AASUI,eATV;AAAA;AAAA;;AAAA;AAAA,8CActB,CAACL,GAAD,EAAMG,eAAN,EAAuBD,iBAAvB,CAdsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA","file":"StudentProject.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport to from '../to';\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar studentProjectSchema = mongoose.Schema({\r\n  project: {\r\n    type: ObjectId,\r\n    required: true\r\n  },\r\n  student: {\r\n    type: ObjectId,\r\n    required: true\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: new Date()\r\n  },\r\n  cards: [ObjectId]\r\n})\r\n\r\nvar StudentProject = module.exports = mongoose.model('studentProject', studentProjectSchema);\r\n\r\nmodule.exports.getByUser = async (userId) =>{\r\n  let err, studentProject;\r\n  let studentProjectsId = [];\r\n  let studentProjects = [];\r\n\r\n  [err, studentProjects] = await to(StudentProject.find({ student: userId }));\r\n  for(var i=0;i < studentProjects.length;i++){ studentProjectsId.push(studentProjects[i]._id); }\r\n\r\n  return [err, studentProjects, studentProjectsId];\r\n}\r\n\r\nmodule.exports.getByProjects = async (projects) =>{\r\n  let err, studentProject;\r\n  let studentProjectsId = [];\r\n  let studentProjects = [];\r\n\r\n  for(var i=0;i<projects.length;i++){\r\n    studentProjectsId = [...studentProjectsId, ...projects[i].studentProjects];\r\n  }\r\n\r\n  for(var i=0;i<studentProjectsId.length;i++){\r\n    [err, studentProject] = await to(StudentProject.findById(studentProjectsId[i]));\r\n    studentProjects.push(studentProject)\r\n  }\r\n\r\n  return [err, studentProjects, studentProjectsId];\r\n}\r\n"]}