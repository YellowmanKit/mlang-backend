{"version":3,"sources":["../../../src/models/survey/Submit.js"],"names":["ObjectId","mongoose","Schema","Types","submitSchema","publish","type","questionnaire","submittedBy","createdAt","Date","answers","Submit","module","exports","model","getMultiple","submitsId","submits","profiles","find","_id","$in","err","i","length","Profile","findOne","belongTo","profile","Answer","data","getByUserAndPublishesId","userId","publishesId","submit","edit","answersId","rawAnswers","key","answer","add","question","value","push","findOneAndUpdate","new","create","Publish","$push"],"mappings":"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","file":"Submit.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport Model from '../Model';\r\nimport to from '../../to';\r\n\r\nimport Profile from '../Profile';\r\n\r\nimport Publish from './Publish';\r\nimport Answer from './Answer';\r\n\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar submitSchema = mongoose.Schema({\r\n  publish: {\r\n    type: ObjectId\r\n  },\r\n  questionnaire: {\r\n    type: ObjectId\r\n  },\r\n  submittedBy: {\r\n    type: ObjectId\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n  },\r\n  answers: [ObjectId]\r\n})\r\n\r\nvar Submit = module.exports = mongoose.model('submit', submitSchema);\r\n\r\nmodule.exports.getMultiple = async (submitsId)=>{\r\n  var err, profile, data;\r\n  var submits = [];\r\n  var answers = [];\r\n  var profiles = [];\r\n  [err, submits] = await to(Submit.find({ _id: { $in: submitsId }}));\r\n\r\n  for(var i=0;i<submits.length;i++){\r\n    [err, profile] = await to(Profile.findOne({ belongTo: submits[i].submittedBy }));\r\n    profiles = [...profiles, profile];\r\n\r\n    [err, data] = await to(Answer.find({ _id: { $in: submits[i].answers }}));\r\n    answers = [...answers, ...data];\r\n  }\r\n  return [err, submits, answers, profiles];\r\n}\r\n\r\nmodule.exports.getByUserAndPublishesId = async (userId, publishesId)=>{\r\n  var err, submit;\r\n  var submits = [];\r\n  var submitsId = [];\r\n\r\n  for(var i=0;i<publishesId.length;i++){\r\n    [err, submit] = await to(Submit.findOne({ publish: publishesId[i], submittedBy: userId }))\r\n    if(submit){\r\n      submits = [...submits, submit];\r\n      submitsId = [...submitsId, submit._id];\r\n    }\r\n  }\r\n  return [err, submits, submitsId];\r\n}\r\n\r\nmodule.exports.edit = async (data)=>{\r\n  var err, answer, submit;\r\n  var answers = [];\r\n  var answersId = [];\r\n  const rawAnswers = data.answers;\r\n  //console.log(data);\r\n  for(var key in rawAnswers){\r\n    if(rawAnswers[key].answer){\r\n      [err, answer] = await Answer.edit(rawAnswers[key])\r\n    }else{\r\n      [err, answer] = await Answer.add({ submit: data.submit._id, question: key, value: rawAnswers[key].value});\r\n    }\r\n    answers.push(answer);\r\n    answersId.push(answer._id);\r\n  }\r\n\r\n  [err, submit] = await to(Submit.findOneAndUpdate(\r\n    { _id: data.submit, },\r\n    { answers: answersId },\r\n    { new: true }\r\n  ));\r\n\r\n  return [err, submit, answers];\r\n}\r\n\r\nmodule.exports.add = async (data)=>{\r\n  var err, answer, submit, publish;\r\n  var answers = [];\r\n  var answersId = [];\r\n  const rawAnswers = data.answers;\r\n\r\n  [err, submit] = await to(Submit.create({ publish: data.publish, questionnaire: data.questionnaire, submittedBy: data.submittedBy, createdAt: new Date() }));\r\n\r\n  [err, publish] = await to(Publish.findOneAndUpdate(\r\n    { _id: submit.publish },\r\n    { $push: { submits: submit._id }},\r\n    { new: true }\r\n  ));\r\n\r\n  for(var key in rawAnswers){\r\n    [err, answer] = await Answer.add({ submit: submit._id, question: key, value: rawAnswers[key].value});\r\n    answers = [...answers, answer];\r\n    answersId = [...answersId, answer._id];\r\n  }\r\n\r\n  [err, submit] = await to(Submit.findOneAndUpdate({ _id: submit._id },{ answers: answersId},{ new: true }));\r\n\r\n  return [err, submit, answers];\r\n}\r\n"]}