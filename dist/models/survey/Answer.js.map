{"version":3,"sources":["../../../src/models/survey/Answer.js"],"names":["ObjectId","mongoose","Schema","Types","answerSchema","submit","type","question","value","String","Answer","module","exports","model","getBySubmits","submits","answers","i","length","find","_id","$in","err","data","edit","findOneAndUpdate","answer","$set","new","add","create"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAIA,WAAWC,mBAASC,MAAT,CAAgBC,KAAhB,CAAsBH,QAArC;AACA,IAAII,eAAeH,mBAASC,MAAT,CAAgB;AACjCG,UAAQ;AACNC,UAAMN;AADA,GADyB;AAIjCO,YAAU;AACRD,UAAMN;AADE,GAJuB;AAOjCQ,SAAO;AACLF,UAAMG;AADD;AAP0B,CAAhB,CAAnB;;AAYA,IAAIC,SAASC,OAAOC,OAAP,GAAiBX,mBAASY,KAAT,CAAe,QAAf,EAAyBT,YAAzB,CAA9B;;AAEAO,OAAOC,OAAP,CAAeE,YAAf;AAAA,qEAA8B,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAExBC,mBAFwB,GAEd,EAFc;AAGpBC,aAHoB,GAGlB,CAHkB;;AAAA;AAAA,kBAGhBA,IAAEF,QAAQG,MAHM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIN,kBAAGR,OAAOS,IAAP,CAAY,EAAEC,KAAK,EAAEC,KAAKN,QAAQE,CAAR,EAAWD,OAAlB,EAAP,EAAZ,CAAH,CAJM;;AAAA;AAAA;AAAA;AAIzBM,eAJyB;AAIpBC,gBAJoB;;AAK1BP,mDAAcA,OAAd,sBAA0BO,IAA1B;;AAL0B;AAGCN,eAHD;AAAA;AAAA;;AAAA;AAAA,6CAOrB,CAACK,GAAD,EAAMN,OAAN,CAPqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AAUAL,OAAOC,OAAP,CAAeY,IAAf;AAAA,sEAAsB,kBAAOD,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGE,kBAAGb,OAAOe,gBAAP,CACvB,EAAEL,KAAKG,KAAKG,MAAZ,EADuB,EAEvB,EAAEC,MAAM,EAAEnB,OAAOe,KAAKf,KAAd,EAAR,EAFuB,EAGvB,EAAEoB,KAAK,IAAP,EAHuB,CAAH,CAHF;;AAAA;AAAA;AAAA;AAGnBN,eAHmB;AAGdI,kBAHc;AAAA,8CAOb,CAACJ,GAAD,EAAMI,MAAN,CAPa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AAUAf,OAAOC,OAAP,CAAeiB,GAAf;AAAA,sEAAqB,kBAAON,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEG,kBAAGb,OAAOoB,MAAP,CAAc,EAAEzB,QAAQkB,KAAKlB,MAAf,EAAuBE,UAAUgB,KAAKhB,QAAtC,EAAgDC,OAAOe,KAAKf,KAA5D,EAAd,CAAH,CAFH;;AAAA;AAAA;AAAA;AAElBc,eAFkB;AAEbI,kBAFa;AAAA,8CAGZ,CAACJ,GAAD,EAAMI,MAAN,CAHY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA","file":"Answer.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport Model from '../Model';\r\nimport to from '../../to';\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar answerSchema = mongoose.Schema({\r\n  submit: {\r\n    type: ObjectId\r\n  },\r\n  question: {\r\n    type: ObjectId\r\n  },\r\n  value: {\r\n    type: String\r\n  }\r\n})\r\n\r\nvar Answer = module.exports = mongoose.model('answer', answerSchema);\r\n\r\nmodule.exports.getBySubmits = async (submits)=>{\r\n  var err, data;\r\n  var answers = [];\r\n  for(var i=0;i<submits.length;i++){\r\n    [err, data] = await to(Answer.find({ _id: { $in: submits[i].answers  }}));\r\n    answers = [...answers, ...data]\r\n  }\r\n  return [err, answers]\r\n}\r\n\r\nmodule.exports.edit = async (data)=>{\r\n  var err, answer;\r\n\r\n  [err, answer] = await to(Answer.findOneAndUpdate(\r\n    { _id: data.answer },\r\n    { $set: { value: data.value } },\r\n    { new: true }));\r\n  return [err, answer];\r\n}\r\n\r\nmodule.exports.add = async (data)=>{\r\n  var err, answer;\r\n  [err, answer] = await to(Answer.create({ submit: data.submit, question: data.question, value: data.value }));\r\n  return [err, answer];\r\n}\r\n"]}