{"version":3,"sources":["../../../src/models/survey/Publish.js"],"names":["ObjectId","mongoose","Schema","Types","publishSchema","title","type","String","questionnaire","school","submits","createdAt","Date","endDate","author","Publish","module","exports","model","getAssigned","profile","publishesId","find","$in","joinedSchools","$gt","err","publishes","i","length","_id","getByAuthor","userId","push","edit","data","School","findOne","code","schoolCode","findOneAndUpdate","publish","$set","new","add","create"],"mappings":"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","file":"Publish.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport Model from '../Model';\r\nimport to from '../../to';\r\n\r\nimport School from '../School';\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar publishSchema = mongoose.Schema({\r\n  title: {\r\n    type: String\r\n  },\r\n  questionnaire: {\r\n    type: ObjectId\r\n  },\r\n  school: {\r\n    type: ObjectId\r\n  },\r\n  submits: [ObjectId],\r\n  \r\n  createdAt: {\r\n    type: Date,\r\n  },\r\n  endDate: {\r\n    type: Date\r\n  },\r\n  author: {\r\n    type: ObjectId\r\n  }\r\n})\r\n\r\nvar Publish = module.exports = mongoose.model('publish',publishSchema);\r\n\r\n\r\nmodule.exports.getAssigned = async (profile)=>{\r\n  var err, publishes;\r\n  var publishesId = [];\r\n\r\n  [err, publishes] = await to(Publish.find({ school: { $in: profile.joinedSchools }, endDate: { $gt: new Date() } }));\r\n\r\n  for(var i=0;i<publishes.length;i++){\r\n    publishesId = [...publishesId, publishes[i]._id];\r\n  }\r\n\r\n  return [err, publishes, publishesId];\r\n}\r\n\r\nmodule.exports.getByAuthor = async (userId)=>{\r\n  var err, publishes;\r\n  var publishesId = [];\r\n\r\n  [err, publishes] = await to(Publish.find({ author: userId }));\r\n\r\n  for(var i=0;i<publishes.length;i++){ publishesId.push(publishes[i]._id); }\r\n\r\n  return [err, publishes, publishesId];\r\n}\r\n\r\nmodule.exports.edit = async (data)=>{\r\n  var err, school, publish;\r\n  [err, school] = await to(School.findOne({ code: data.schoolCode }));\r\n  if(!school){ return ['Invalid school code!', null]}\r\n\r\n  [err, publish] = await to(Publish.findOneAndUpdate(\r\n    { _id: data.publish._id },\r\n    { $set: { title: data.title, questionnaire: data.questionnaire, school: school._id,\r\n      endDate: data.endDate, author: data.author } },\r\n    { new: true }));\r\n  return [err, publish];\r\n}\r\n\r\nmodule.exports.add = async (data)=>{\r\n  var err, school, publish;\r\n  [err, school] = await to(School.findOne({ code: data.schoolCode }));\r\n  if(!school){ return ['Invalid school code!', null]}\r\n\r\n  [err, publish] = await to(Publish.create({\r\n    title: data.title, questionnaire: data.questionnaire, school: school._id,\r\n    endDate: data.endDate, author: data.author, createdAt: new Date()}));\r\n  return [err, publish, school];\r\n}\r\n"]}