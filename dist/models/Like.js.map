{"version":3,"sources":["../../src/models/Like.js"],"names":["ObjectId","mongoose","Schema","Types","likeSchema","card","type","required","user","cancelled","Boolean","default","createdAt","Date","Like","module","exports","model","cardId","userId","findOne","err","like","create","findOneAndUpdate","_id","$set","new","Card","$inc","likeCount"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,WAAWC,mBAASC,MAAT,CAAgBC,KAAhB,CAAsBH,QAArC;AACA,IAAII,aAAaH,mBAASC,MAAT,CAAgB;AAC/BG,QAAM;AACJC,UAAMN,QADF;AAEJO,cAAU;AAFN,GADyB;AAK/BC,QAAM;AACJF,UAAMN,QADF;AAEJO,cAAU;AAFN,GALyB;AAS/BE,aAAW;AACTH,UAAMI,OADG;AAETC,aAAS;AAFA,GAToB;AAa/BC,aAAW;AACTN,UAAMO;AADG;AAboB,CAAhB,CAAjB;;AAkBA,IAAIC,OAAOC,OAAOC,OAAP,GAAiBf,mBAASgB,KAAT,CAAe,MAAf,EAAsBb,UAAtB,CAA5B;;AAEAW,OAAOC,OAAP,CAAeX,IAAf;AAAA,qEAAsB,iBAAOa,MAAP,EAAeC,MAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEA,kBAAGL,KAAKM,OAAL,CAAa,EAACf,MAAMa,MAAP,EAAeV,MAAMW,MAArB,EAAb,CAAH,CAFA;;AAAA;AAAA;AAAA;AAEnBE,eAFmB;AAEdC,gBAFc;;AAAA,gBAGhBA,IAHgB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIE,kBAAGR,KAAKS,MAAL,CAAY,EAAClB,MAAMa,MAAP,EAAeV,MAAMW,MAArB,EAA6BP,WAAW,IAAIC,IAAJ,EAAxC,EAAZ,CAAH,CAJF;;AAAA;AAAA;AAAA;AAIjBQ,eAJiB;AAIZC,gBAJY;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAME,kBAAGR,KAAKU,gBAAL,CAAsB,EAACC,KAAKH,KAAKG,GAAX,EAAtB,EAAuC,EAAEC,MAAM,EAAEjB,WAAW,CAACa,KAAKb,SAAnB,EAAR,EAAvC,EAAgF,EAAEkB,KAAK,IAAP,EAAhF,CAAH,CANF;;AAAA;AAAA;AAAA;AAMjBN,eANiB;AAMZC,gBANY;;AAAA;AAAA;AAAA,mBAQA,kBAAGM,eAAKJ,gBAAL,CAAsB,EAAEC,KAAKP,MAAP,EAAtB,EAAsC,EAAEW,MAAM,EAAEC,WAAWR,KAAKb,SAAL,GAAgB,CAAC,CAAjB,GAAmB,CAAhC,EAAR,EAAtC,EAAqF,EAAEkB,KAAK,IAAP,EAArF,CAAH,CARA;;AAAA;AAAA;AAAA;AAQnBN,eARmB;AAQdhB,gBARc;AAAA,6CAUb,CAACgB,GAAD,EAAMhB,IAAN,EAAYiB,IAAZ,CAVa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA","file":"Like.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport to from'../to';\r\nimport Card from './Card';\r\n\r\nvar ObjectId = mongoose.Schema.Types.ObjectId;\r\nvar likeSchema = mongoose.Schema({\r\n  card: {\r\n    type: ObjectId,\r\n    required: true\r\n  },\r\n  user: {\r\n    type: ObjectId,\r\n    required: true\r\n  },\r\n  cancelled: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  createdAt: {\r\n    type: Date\r\n  }\r\n})\r\n\r\nvar Like = module.exports = mongoose.model('like',likeSchema);\r\n\r\nmodule.exports.card = async (cardId, userId)=>{\r\n  var err, like, card;\r\n  [err, like] = await to(Like.findOne({card: cardId, user: userId}));\r\n  if(!like){\r\n    [err, like] = await to(Like.create({card: cardId, user: userId, createdAt: new Date()}));\r\n  }else{\r\n    [err, like] = await to(Like.findOneAndUpdate({_id: like._id}, { $set: { cancelled: !like.cancelled }}, { new: true }));\r\n  }\r\n  [err, card] = await to(Card.findOneAndUpdate({ _id: cardId },{ $inc: { likeCount: like.cancelled? -1:1 } }, { new: true }));\r\n\r\n  return [err, card, like];\r\n}\r\n"]}